; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\system_stm32f4xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_stm32f4xx.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I.\USER -I.\SCR -I.\Libraries\CMSIS\Include -I.\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I.\Libraries\STM32F4xx_StdPeriph_Driver\inc -D__UVISION_VERSION=535 -DSTM32F446xx -DUSE_STDPERIPH_DRIVER -DSTM32F446xx -DHSE_VALUE=8000000 --omf_browse=.\objects\system_stm32f4xx.crf SCR\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;653      */
;;;654    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;655    {
;;;656    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
;;;657    /******************************************************************************/
;;;658    /*            PLL (clocked by HSE) used as System clock source                */
;;;659    /******************************************************************************/
;;;660      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;661      
;;;662      /* Enable HSE */
;;;663      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4841              LDR      r0,|L1.272|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  493f              LDR      r1,|L1.272|
000012  6008              STR      r0,[r1,#0]
;;;664     
;;;665      /* Wait till HSE is ready and if Time out is reached exit */
;;;666      do
000014  bf00              NOP      
                  |L1.22|
;;;667      {
;;;668        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  483e              LDR      r0,|L1.272|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;669        StartUpCounter++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;670      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L1.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b04fa0          CMP      r0,#0x5000
000030  d1f1              BNE      |L1.22|
                  |L1.50|
;;;671    
;;;672      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  4837              LDR      r0,|L1.272|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L1.66|
;;;673      {
;;;674        HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L1.70|
                  |L1.66|
;;;675      }
;;;676      else
;;;677      {
;;;678        HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L1.70|
;;;679      }
;;;680    
;;;681      if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d160              BNE      |L1.270|
;;;682      {
;;;683        /* Select regulator voltage output Scale 1 mode */
;;;684        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
00004c  4830              LDR      r0,|L1.272|
00004e  3040              ADDS     r0,r0,#0x40
000050  6800              LDR      r0,[r0,#0]
000052  f0405080          ORR      r0,r0,#0x10000000
000056  492e              LDR      r1,|L1.272|
000058  3140              ADDS     r1,r1,#0x40
00005a  6008              STR      r0,[r1,#0]
;;;685        PWR->CR |= PWR_CR_VOS;
00005c  482d              LDR      r0,|L1.276|
00005e  6800              LDR      r0,[r0,#0]
000060  f4404040          ORR      r0,r0,#0xc000
000064  492b              LDR      r1,|L1.276|
000066  6008              STR      r0,[r1,#0]
;;;686    
;;;687        /* HCLK = SYSCLK / 1*/
;;;688        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000068  4829              LDR      r0,|L1.272|
00006a  3008              ADDS     r0,r0,#8
00006c  6800              LDR      r0,[r0,#0]
00006e  4928              LDR      r1,|L1.272|
000070  3108              ADDS     r1,r1,#8
000072  6008              STR      r0,[r1,#0]
;;;689    
;;;690    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
;;;691        /* PCLK2 = HCLK / 2*/
;;;692        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f4404000          ORR      r0,r0,#0x8000
00007c  6008              STR      r0,[r1,#0]
;;;693        
;;;694        /* PCLK1 = HCLK / 4*/
;;;695        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00007e  4608              MOV      r0,r1
000080  6800              LDR      r0,[r0,#0]
000082  f44050a0          ORR      r0,r0,#0x1400
000086  6008              STR      r0,[r1,#0]
;;;696    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */
;;;697    
;;;698    #if defined(STM32F401xx) || defined(STM32F413_423xx)
;;;699        /* PCLK2 = HCLK / 1*/
;;;700        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;701        
;;;702        /* PCLK1 = HCLK / 2*/
;;;703        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;704    #endif /* STM32F401xx || STM32F413_423xx */
;;;705    
;;;706    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
;;;707        /* Configure the main PLL */
;;;708        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;709                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;710    #endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */
;;;711    
;;;712    #if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
;;;713        /* Configure the main PLL */
;;;714        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000088  4823              LDR      r0,|L1.280|
00008a  1f09              SUBS     r1,r1,#4
00008c  6008              STR      r0,[r1,#0]
;;;715                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
;;;716    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
;;;717        
;;;718        /* Enable the main PLL */
;;;719        RCC->CR |= RCC_CR_PLLON;
00008e  1f08              SUBS     r0,r1,#4
000090  6800              LDR      r0,[r0,#0]
000092  f0407080          ORR      r0,r0,#0x1000000
000096  1f09              SUBS     r1,r1,#4
000098  6008              STR      r0,[r1,#0]
;;;720    
;;;721        /* Wait till the main PLL is ready */
;;;722        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00009a  bf00              NOP      
                  |L1.156|
00009c  481c              LDR      r0,|L1.272|
00009e  6800              LDR      r0,[r0,#0]
0000a0  f0007000          AND      r0,r0,#0x2000000
0000a4  2800              CMP      r0,#0
0000a6  d0f9              BEQ      |L1.156|
;;;723        {
;;;724        }
;;;725       
;;;726    #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
;;;727        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;728        PWR->CR |= PWR_CR_ODEN;
0000a8  481a              LDR      r0,|L1.276|
0000aa  6800              LDR      r0,[r0,#0]
0000ac  f4403080          ORR      r0,r0,#0x10000
0000b0  4918              LDR      r1,|L1.276|
0000b2  6008              STR      r0,[r1,#0]
;;;729        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
0000b4  bf00              NOP      
                  |L1.182|
0000b6  4817              LDR      r0,|L1.276|
0000b8  6840              LDR      r0,[r0,#4]
0000ba  f4003080          AND      r0,r0,#0x10000
0000be  2800              CMP      r0,#0
0000c0  d0f9              BEQ      |L1.182|
;;;730        {
;;;731        }
;;;732        PWR->CR |= PWR_CR_ODSWEN;
0000c2  4814              LDR      r0,|L1.276|
0000c4  6800              LDR      r0,[r0,#0]
0000c6  f4403000          ORR      r0,r0,#0x20000
0000ca  4912              LDR      r1,|L1.276|
0000cc  6008              STR      r0,[r1,#0]
;;;733        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
0000ce  bf00              NOP      
                  |L1.208|
0000d0  4810              LDR      r0,|L1.276|
0000d2  6840              LDR      r0,[r0,#4]
0000d4  f4003000          AND      r0,r0,#0x20000
0000d8  2800              CMP      r0,#0
0000da  d0f9              BEQ      |L1.208|
;;;734        {
;;;735        }      
;;;736        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;737        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
0000dc  f2407005          MOV      r0,#0x705
0000e0  490e              LDR      r1,|L1.284|
0000e2  6008              STR      r0,[r1,#0]
;;;738    #endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
;;;739    
;;;740    #if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
;;;741        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;742        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;743    #endif /* STM32F40_41xxx  || STM32F412xG */
;;;744    
;;;745    #if defined(STM32F413_423xx)  
;;;746        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;747        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
;;;748    #endif /* STM32F413_423xx */
;;;749    
;;;750    #if defined(STM32F401xx)
;;;751        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;752        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;753    #endif /* STM32F401xx */
;;;754    
;;;755        /* Select the main PLL as system clock source */
;;;756        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000e4  480a              LDR      r0,|L1.272|
0000e6  3008              ADDS     r0,r0,#8
0000e8  6800              LDR      r0,[r0,#0]
0000ea  f0200003          BIC      r0,r0,#3
0000ee  4908              LDR      r1,|L1.272|
0000f0  3108              ADDS     r1,r1,#8
0000f2  6008              STR      r0,[r1,#0]
;;;757        RCC->CFGR |= RCC_CFGR_SW_PLL;
0000f4  4608              MOV      r0,r1
0000f6  6800              LDR      r0,[r0,#0]
0000f8  f0400002          ORR      r0,r0,#2
0000fc  6008              STR      r0,[r1,#0]
;;;758    
;;;759        /* Wait till the main PLL is used as system clock source */
;;;760        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
0000fe  bf00              NOP      
                  |L1.256|
000100  4803              LDR      r0,|L1.272|
000102  3008              ADDS     r0,r0,#8
000104  6800              LDR      r0,[r0,#0]
000106  f000000c          AND      r0,r0,#0xc
00010a  2808              CMP      r0,#8
00010c  d1f8              BNE      |L1.256|
                  |L1.270|
;;;761        {
;;;762        }
;;;763      }
;;;764      else
;;;765      { /* If HSE fails to start-up, the application will have wrong clock
;;;766             configuration. User can add here some code to deal with this error */
;;;767      }
;;;768    #elif defined(STM32F410xx) || defined(STM32F411xE)
;;;769    #if defined(USE_HSE_BYPASS) 
;;;770    /******************************************************************************/
;;;771    /*            PLL (clocked by HSE) used as System clock source                */
;;;772    /******************************************************************************/
;;;773      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
;;;774      
;;;775      /* Enable HSE and HSE BYPASS */
;;;776      RCC->CR |= ((uint32_t)RCC_CR_HSEON | RCC_CR_HSEBYP);
;;;777     
;;;778      /* Wait till HSE is ready and if Time out is reached exit */
;;;779      do
;;;780      {
;;;781        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;782        StartUpCounter++;
;;;783      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
;;;784    
;;;785      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
;;;786      {
;;;787        HSEStatus = (uint32_t)0x01;
;;;788      }
;;;789      else
;;;790      {
;;;791        HSEStatus = (uint32_t)0x00;
;;;792      }
;;;793    
;;;794      if (HSEStatus == (uint32_t)0x01)
;;;795      {
;;;796        /* Select regulator voltage output Scale 1 mode */
;;;797        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;798        PWR->CR |= PWR_CR_VOS;
;;;799    
;;;800        /* HCLK = SYSCLK / 1*/
;;;801        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;802    
;;;803        /* PCLK2 = HCLK / 2*/
;;;804        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;805        
;;;806        /* PCLK1 = HCLK / 4*/
;;;807        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;808    
;;;809        /* Configure the main PLL */
;;;810        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;811                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;812        
;;;813        /* Enable the main PLL */
;;;814        RCC->CR |= RCC_CR_PLLON;
;;;815    
;;;816        /* Wait till the main PLL is ready */
;;;817        while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;818        {
;;;819        }
;;;820    
;;;821        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;822        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;823    
;;;824        /* Select the main PLL as system clock source */
;;;825        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;826        RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;827    
;;;828        /* Wait till the main PLL is used as system clock source */
;;;829        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;830        {
;;;831        }
;;;832      }
;;;833      else
;;;834      { /* If HSE fails to start-up, the application will have wrong clock
;;;835             configuration. User can add here some code to deal with this error */
;;;836      }
;;;837    #else /* HSI will be used as PLL clock source */
;;;838      /* Select regulator voltage output Scale 1 mode */
;;;839      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;840      PWR->CR |= PWR_CR_VOS;
;;;841      
;;;842      /* HCLK = SYSCLK / 1*/
;;;843      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;844      
;;;845      /* PCLK2 = HCLK / 2*/
;;;846      RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;847      
;;;848      /* PCLK1 = HCLK / 4*/
;;;849      RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;850      
;;;851      /* Configure the main PLL */
;;;852      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (PLL_Q << 24); 
;;;853      
;;;854      /* Enable the main PLL */
;;;855      RCC->CR |= RCC_CR_PLLON;
;;;856      
;;;857      /* Wait till the main PLL is ready */
;;;858      while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;859      {
;;;860      }
;;;861      
;;;862      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;863      FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;864      
;;;865      /* Select the main PLL as system clock source */
;;;866      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;867      RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;868      
;;;869      /* Wait till the main PLL is used as system clock source */
;;;870      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;871      {
;;;872      }
;;;873    #endif /* USE_HSE_BYPASS */  
;;;874    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
;;;875    }
00010e  bd0c              POP      {r2,r3,pc}
;;;876    #if defined (DATA_IN_ExtSRAM) && defined (DATA_IN_ExtSDRAM)
                          ENDP

                  |L1.272|
                          DCD      0x40023800
                  |L1.276|
                          DCD      0x40007000
                  |L1.280|
                          DCD      0x77405a08
                  |L1.284|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;559      */
;;;560    void SystemCoreClockUpdate(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;561    {
;;;562      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2402              MOVS     r4,#2
000008  2300              MOVS     r3,#0
00000a  2002              MOVS     r0,#2
;;;563    #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
;;;564      uint32_t pllr = 2;
00000c  2502              MOVS     r5,#2
;;;565    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;566      /* Get SYSCLK source -------------------------------------------------------*/
;;;567      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000e  4e3e              LDR      r6,|L2.264|
000010  6836              LDR      r6,[r6,#0]
000012  f006010c          AND      r1,r6,#0xc
;;;568    
;;;569      switch (tmp)
000016  b131              CBZ      r1,|L2.38|
000018  2904              CMP      r1,#4
00001a  d008              BEQ      |L2.46|
00001c  2908              CMP      r1,#8
00001e  d00a              BEQ      |L2.54|
000020  290c              CMP      r1,#0xc
000022  d160              BNE      |L2.230|
000024  e033              B        |L2.142|
                  |L2.38|
;;;570      {
;;;571        case 0x00:  /* HSI used as system clock source */
;;;572          SystemCoreClock = HSI_VALUE;
000026  4e39              LDR      r6,|L2.268|
000028  4f39              LDR      r7,|L2.272|
00002a  603e              STR      r6,[r7,#0]  ; SystemCoreClock
;;;573          break;
00002c  e05f              B        |L2.238|
                  |L2.46|
;;;574        case 0x04:  /* HSE used as system clock source */
;;;575          SystemCoreClock = HSE_VALUE;
00002e  4e39              LDR      r6,|L2.276|
000030  4f37              LDR      r7,|L2.272|
000032  603e              STR      r6,[r7,#0]  ; SystemCoreClock
;;;576          break;
000034  e05b              B        |L2.238|
                  |L2.54|
;;;577        case 0x08:  /* PLL P used as system clock source */
;;;578           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;579             SYSCLK = PLL_VCO / PLL_P
;;;580             */    
;;;581          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000036  4e34              LDR      r6,|L2.264|
000038  1f36              SUBS     r6,r6,#4
00003a  6836              LDR      r6,[r6,#0]
00003c  f3c65380          UBFX     r3,r6,#22,#1
;;;582          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
000040  4e31              LDR      r6,|L2.264|
000042  1f36              SUBS     r6,r6,#4
000044  6836              LDR      r6,[r6,#0]
000046  f006003f          AND      r0,r6,#0x3f
;;;583          
;;;584    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
;;;585          if (pllsource != 0)
00004a  b153              CBZ      r3,|L2.98|
;;;586          {
;;;587            /* HSE used as PLL clock source */
;;;588            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
00004c  4e31              LDR      r6,|L2.276|
00004e  fbb6f6f0          UDIV     r6,r6,r0
000052  4f2d              LDR      r7,|L2.264|
000054  1f3f              SUBS     r7,r7,#4
000056  683f              LDR      r7,[r7,#0]
000058  f3c71788          UBFX     r7,r7,#6,#9
00005c  fb06f207          MUL      r2,r6,r7
000060  e009              B        |L2.118|
                  |L2.98|
;;;589          }
;;;590          else
;;;591          {
;;;592            /* HSI used as PLL clock source */
;;;593            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000062  4e2a              LDR      r6,|L2.268|
000064  fbb6f6f0          UDIV     r6,r6,r0
000068  4f27              LDR      r7,|L2.264|
00006a  1f3f              SUBS     r7,r7,#4
00006c  683f              LDR      r7,[r7,#0]
00006e  f3c71788          UBFX     r7,r7,#6,#9
000072  fb06f207          MUL      r2,r6,r7
                  |L2.118|
;;;594          }
;;;595    #elif defined(STM32F410xx) || defined(STM32F411xE)
;;;596    #if defined(USE_HSE_BYPASS)
;;;597          if (pllsource != 0)
;;;598          {
;;;599            /* HSE used as PLL clock source */
;;;600            pllvco = (HSE_BYPASS_INPUT_FREQUENCY / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;601          }  
;;;602    #else  
;;;603          if (pllsource == 0)
;;;604          {
;;;605            /* HSI used as PLL clock source */
;;;606            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;607          }  
;;;608    #endif /* USE_HSE_BYPASS */  
;;;609    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
;;;610          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000076  4e24              LDR      r6,|L2.264|
000078  1f36              SUBS     r6,r6,#4
00007a  6836              LDR      r6,[r6,#0]
00007c  f3c64601          UBFX     r6,r6,#16,#2
000080  1c76              ADDS     r6,r6,#1
000082  0074              LSLS     r4,r6,#1
;;;611          SystemCoreClock = pllvco/pllp;      
000084  fbb2f6f4          UDIV     r6,r2,r4
000088  4f21              LDR      r7,|L2.272|
00008a  603e              STR      r6,[r7,#0]  ; SystemCoreClock
;;;612          break;
00008c  e02f              B        |L2.238|
                  |L2.142|
;;;613    #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
;;;614          case 0x0C:  /* PLL R used as system clock source */
;;;615           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;616             SYSCLK = PLL_VCO / PLL_R
;;;617             */    
;;;618          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
00008e  4e1e              LDR      r6,|L2.264|
000090  1f36              SUBS     r6,r6,#4
000092  6836              LDR      r6,[r6,#0]
000094  f3c65380          UBFX     r3,r6,#22,#1
;;;619          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
000098  4e1b              LDR      r6,|L2.264|
00009a  1f36              SUBS     r6,r6,#4
00009c  6836              LDR      r6,[r6,#0]
00009e  f006003f          AND      r0,r6,#0x3f
;;;620          if (pllsource != 0)
0000a2  b153              CBZ      r3,|L2.186|
;;;621          {
;;;622            /* HSE used as PLL clock source */
;;;623            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
0000a4  4e1b              LDR      r6,|L2.276|
0000a6  fbb6f6f0          UDIV     r6,r6,r0
0000aa  4f17              LDR      r7,|L2.264|
0000ac  1f3f              SUBS     r7,r7,#4
0000ae  683f              LDR      r7,[r7,#0]
0000b0  f3c71788          UBFX     r7,r7,#6,#9
0000b4  fb06f207          MUL      r2,r6,r7
0000b8  e009              B        |L2.206|
                  |L2.186|
;;;624          }
;;;625          else
;;;626          {
;;;627            /* HSI used as PLL clock source */
;;;628            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
0000ba  4e14              LDR      r6,|L2.268|
0000bc  fbb6f6f0          UDIV     r6,r6,r0
0000c0  4f11              LDR      r7,|L2.264|
0000c2  1f3f              SUBS     r7,r7,#4
0000c4  683f              LDR      r7,[r7,#0]
0000c6  f3c71788          UBFX     r7,r7,#6,#9
0000ca  fb06f207          MUL      r2,r6,r7
                  |L2.206|
;;;629          }
;;;630     
;;;631          pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
0000ce  4e0e              LDR      r6,|L2.264|
0000d0  1f36              SUBS     r6,r6,#4
0000d2  6836              LDR      r6,[r6,#0]
0000d4  f3c67602          UBFX     r6,r6,#28,#3
0000d8  1c76              ADDS     r6,r6,#1
0000da  0075              LSLS     r5,r6,#1
;;;632          SystemCoreClock = pllvco/pllr;      
0000dc  fbb2f6f5          UDIV     r6,r2,r5
0000e0  4f0b              LDR      r7,|L2.272|
0000e2  603e              STR      r6,[r7,#0]  ; SystemCoreClock
;;;633          break;
0000e4  e003              B        |L2.238|
                  |L2.230|
;;;634    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;635        default:
;;;636          SystemCoreClock = HSI_VALUE;
0000e6  4e09              LDR      r6,|L2.268|
0000e8  4f09              LDR      r7,|L2.272|
0000ea  603e              STR      r6,[r7,#0]  ; SystemCoreClock
;;;637          break;
0000ec  bf00              NOP      
                  |L2.238|
0000ee  bf00              NOP                            ;573
;;;638      }
;;;639      /* Compute HCLK frequency --------------------------------------------------*/
;;;640      /* Get HCLK prescaler */
;;;641      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
0000f0  4e05              LDR      r6,|L2.264|
0000f2  6836              LDR      r6,[r6,#0]
0000f4  f3c61603          UBFX     r6,r6,#4,#4
0000f8  4f07              LDR      r7,|L2.280|
0000fa  5db9              LDRB     r1,[r7,r6]
;;;642      /* HCLK frequency */
;;;643      SystemCoreClock >>= tmp;
0000fc  4e04              LDR      r6,|L2.272|
0000fe  6836              LDR      r6,[r6,#0]  ; SystemCoreClock
000100  40ce              LSRS     r6,r6,r1
000102  4f03              LDR      r7,|L2.272|
000104  603e              STR      r6,[r7,#0]  ; SystemCoreClock
;;;644    }
000106  bdf0              POP      {r4-r7,pc}
;;;645    
                          ENDP

                  |L2.264|
                          DCD      0x40023808
                  |L2.268|
                          DCD      0x00f42400
                  |L2.272|
                          DCD      SystemCoreClock
                  |L2.276|
                          DCD      0x007a1200
                  |L2.280|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;482      */
;;;483    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;484    {
;;;485      /* FPU settings ------------------------------------------------------------*/
;;;486      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;487        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  4815              LDR      r0,|L3.88|
000004  6800              LDR      r0,[r0,#0]
000006  f4400070          ORR      r0,r0,#0xf00000
00000a  4913              LDR      r1,|L3.88|
00000c  6008              STR      r0,[r1,#0]
;;;488      #endif
;;;489      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;490      /* Set HSION bit */
;;;491      RCC->CR |= (uint32_t)0x00000001;
00000e  4813              LDR      r0,|L3.92|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4911              LDR      r1,|L3.92|
000018  6008              STR      r0,[r1,#0]
;;;492    
;;;493      /* Reset CFGR register */
;;;494      RCC->CFGR = 0x00000000;
00001a  2000              MOVS     r0,#0
00001c  490f              LDR      r1,|L3.92|
00001e  3108              ADDS     r1,r1,#8
000020  6008              STR      r0,[r1,#0]
;;;495    
;;;496      /* Reset HSEON, CSSON and PLLON bits */
;;;497      RCC->CR &= (uint32_t)0xFEF6FFFF;
000022  480e              LDR      r0,|L3.92|
000024  6800              LDR      r0,[r0,#0]
000026  490e              LDR      r1,|L3.96|
000028  4008              ANDS     r0,r0,r1
00002a  490c              LDR      r1,|L3.92|
00002c  6008              STR      r0,[r1,#0]
;;;498    
;;;499      /* Reset PLLCFGR register */
;;;500      RCC->PLLCFGR = 0x24003010;
00002e  480d              LDR      r0,|L3.100|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;501    
;;;502      /* Reset HSEBYP bit */
;;;503      RCC->CR &= (uint32_t)0xFFFBFFFF;
000034  1f08              SUBS     r0,r1,#4
000036  6800              LDR      r0,[r0,#0]
000038  f4202080          BIC      r0,r0,#0x40000
00003c  1f09              SUBS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;504    
;;;505      /* Disable all interrupts */
;;;506      RCC->CIR = 0x00000000;
000040  2000              MOVS     r0,#0
000042  4906              LDR      r1,|L3.92|
000044  310c              ADDS     r1,r1,#0xc
000046  6008              STR      r0,[r1,#0]
;;;507    
;;;508    #if defined(DATA_IN_ExtSRAM) || defined(DATA_IN_ExtSDRAM)
;;;509      SystemInit_ExtMemCtl(); 
;;;510    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;511             
;;;512      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;513         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;514      SetSysClock();
000048  f7fffffe          BL       SetSysClock
;;;515    
;;;516      /* Configure the Vector Table location add offset address ------------------*/
;;;517    #ifdef VECT_TAB_SRAM
;;;518      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;519    #else
;;;520      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00004c  f04f6000          MOV      r0,#0x8000000
000050  4901              LDR      r1,|L3.88|
000052  3980              SUBS     r1,r1,#0x80
000054  6008              STR      r0,[r1,#0]
;;;521    #endif
;;;522    }
000056  bd10              POP      {r4,pc}
;;;523    
                          ENDP

                  |L3.88|
                          DCD      0xe000ed88
                  |L3.92|
                          DCD      0x40023800
                  |L3.96|
                          DCD      0xfef6ffff
                  |L3.100|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0aba9500
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "SCR\\system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 138 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 153
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____RRX|
#line 328
|__asm___18_system_stm32f4xx_c_5d646a67____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
