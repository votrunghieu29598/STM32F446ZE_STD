; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\spi_mfrc522.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\spi_mfrc522.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I.\USER -I.\SCR -I.\Libraries\CMSIS\Include -I.\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I.\Libraries\STM32F4xx_StdPeriph_Driver\inc -D__UVISION_VERSION=535 -DSTM32F446xx -DUSE_STDPERIPH_DRIVER -DSTM32F446xx -DHSE_VALUE=8000000 --omf_browse=.\objects\spi_mfrc522.crf USER\spi_mfrc522.c]
                          THUMB

                          AREA ||i.MFRC522_AntennaOff||, CODE, READONLY, ALIGN=1

                  MFRC522_AntennaOff PROC
;;;129    
;;;130    void MFRC522_AntennaOff(void) {
000000  b510              PUSH     {r4,lr}
;;;131    	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
000002  2103              MOVS     r1,#3
000004  2014              MOVS     r0,#0x14
000006  f7fffffe          BL       MFRC522_ClearBitMask
;;;132    }
00000a  bd10              POP      {r4,pc}
;;;133    
                          ENDP


                          AREA ||i.MFRC522_AntennaOn||, CODE, READONLY, ALIGN=1

                  MFRC522_AntennaOn PROC
;;;120    
;;;121    void MFRC522_AntennaOn(void) {
000000  b510              PUSH     {r4,lr}
;;;122    	uint8_t temp;
;;;123    
;;;124    	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
000002  2014              MOVS     r0,#0x14
000004  f7fffffe          BL       MFRC522_ReadRegister
000008  4604              MOV      r4,r0
;;;125    	if (!(temp & 0x03)) {
00000a  f0040003          AND      r0,r4,#3
00000e  b918              CBNZ     r0,|L2.24|
;;;126    		MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
000010  2103              MOVS     r1,#3
000012  2014              MOVS     r0,#0x14
000014  f7fffffe          BL       MFRC522_SetBitMask
                  |L2.24|
;;;127    	}
;;;128    }
000018  bd10              POP      {r4,pc}
;;;129    
                          ENDP


                          AREA ||i.MFRC522_Anticoll||, CODE, READONLY, ALIGN=1

                  MFRC522_Anticoll PROC
;;;240    
;;;241    MFRC522_Status_t MFRC522_Anticoll(uint8_t* serNum) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4604              MOV      r4,r0
;;;242    	MFRC522_Status_t status;
;;;243    	uint8_t i;
;;;244    	uint8_t serNumCheck = 0;
000006  2700              MOVS     r7,#0
;;;245    	uint16_t unLen;
;;;246    
;;;247    	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
000008  2100              MOVS     r1,#0
00000a  200d              MOVS     r0,#0xd
00000c  f7fffffe          BL       MFRC522_WriteRegister
;;;248    
;;;249    	serNum[0] = PICC_ANTICOLL;
000010  2093              MOVS     r0,#0x93
000012  7020              STRB     r0,[r4,#0]
;;;250    	serNum[1] = 0x20;
000014  2020              MOVS     r0,#0x20
000016  7060              STRB     r0,[r4,#1]
;;;251    	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
000018  a801              ADD      r0,sp,#4
00001a  4623              MOV      r3,r4
00001c  2202              MOVS     r2,#2
00001e  4621              MOV      r1,r4
000020  9000              STR      r0,[sp,#0]
000022  200c              MOVS     r0,#0xc
000024  f7fffffe          BL       MFRC522_ToCard
000028  4606              MOV      r6,r0
;;;252    
;;;253    	if (status == MI_OK) {
00002a  b95e              CBNZ     r6,|L3.68|
;;;254    		//Check card serial number
;;;255    		for (i = 0; i < 4; i++) {   
00002c  2500              MOVS     r5,#0
00002e  e003              B        |L3.56|
                  |L3.48|
;;;256    			serNumCheck ^= serNum[i];
000030  5d60              LDRB     r0,[r4,r5]
000032  4047              EORS     r7,r7,r0
000034  1c68              ADDS     r0,r5,#1              ;255
000036  b2c5              UXTB     r5,r0                 ;255
                  |L3.56|
000038  2d04              CMP      r5,#4                 ;255
00003a  dbf9              BLT      |L3.48|
;;;257    		}
;;;258    		if (serNumCheck != serNum[i]) {   
00003c  5d60              LDRB     r0,[r4,r5]
00003e  42b8              CMP      r0,r7
000040  d000              BEQ      |L3.68|
;;;259    			status = MI_ERR;    
000042  2602              MOVS     r6,#2
                  |L3.68|
;;;260    		}
;;;261    	}
;;;262    	return status;
000044  4630              MOV      r0,r6
;;;263    } 
000046  e8bd81fc          POP      {r2-r8,pc}
;;;264    
                          ENDP


                          AREA ||i.MFRC522_Auth||, CODE, READONLY, ALIGN=1

                  MFRC522_Auth PROC
;;;313    
;;;314    MFRC522_Status_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4606              MOV      r6,r0
000008  460f              MOV      r7,r1
00000a  4690              MOV      r8,r2
00000c  4699              MOV      r9,r3
;;;315    	MFRC522_Status_t status;
;;;316    	uint16_t recvBits;
;;;317    	uint8_t i;
;;;318    	uint8_t buff[12]; 
;;;319    
;;;320    	//Verify the command block address + sector + password + card serial number
;;;321    	buff[0] = authMode;
00000e  f88d6004          STRB     r6,[sp,#4]
;;;322    	buff[1] = BlockAddr;
000012  f88d7005          STRB     r7,[sp,#5]
;;;323    	for (i = 0; i < 6; i++) {    
000016  2400              MOVS     r4,#0
000018  e006              B        |L4.40|
                  |L4.26|
;;;324    		buff[i+2] = *(Sectorkey+i);   
00001a  f8181004          LDRB     r1,[r8,r4]
00001e  aa01              ADD      r2,sp,#4
000020  1ca0              ADDS     r0,r4,#2
000022  5411              STRB     r1,[r2,r0]
000024  1c60              ADDS     r0,r4,#1              ;323
000026  b2c4              UXTB     r4,r0                 ;323
                  |L4.40|
000028  2c06              CMP      r4,#6                 ;323
00002a  dbf6              BLT      |L4.26|
;;;325    	}
;;;326    	for (i=0; i<4; i++) {    
00002c  2400              MOVS     r4,#0
00002e  e007              B        |L4.64|
                  |L4.48|
;;;327    		buff[i+8] = *(serNum+i);   
000030  f8191004          LDRB     r1,[r9,r4]
000034  aa01              ADD      r2,sp,#4
000036  f1040008          ADD      r0,r4,#8
00003a  5411              STRB     r1,[r2,r0]
00003c  1c60              ADDS     r0,r4,#1              ;326
00003e  b2c4              UXTB     r4,r0                 ;326
                  |L4.64|
000040  2c04              CMP      r4,#4                 ;326
000042  dbf5              BLT      |L4.48|
;;;328    	}
;;;329    	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
000044  a804              ADD      r0,sp,#0x10
000046  ab01              ADD      r3,sp,#4
000048  220c              MOVS     r2,#0xc
00004a  a901              ADD      r1,sp,#4
00004c  9000              STR      r0,[sp,#0]
00004e  200e              MOVS     r0,#0xe
000050  f7fffffe          BL       MFRC522_ToCard
000054  4605              MOV      r5,r0
;;;330    
;;;331    	if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) {   
000056  b92d              CBNZ     r5,|L4.100|
000058  2008              MOVS     r0,#8
00005a  f7fffffe          BL       MFRC522_ReadRegister
00005e  f0000008          AND      r0,r0,#8
000062  b900              CBNZ     r0,|L4.102|
                  |L4.100|
;;;332    		status = MI_ERR;   
000064  2502              MOVS     r5,#2
                  |L4.102|
;;;333    	}
;;;334    
;;;335    	return status;
000066  4628              MOV      r0,r5
;;;336    }
000068  b005              ADD      sp,sp,#0x14
00006a  e8bd83f0          POP      {r4-r9,pc}
;;;337    
                          ENDP


                          AREA ||i.MFRC522_CalculateCRC||, CODE, READONLY, ALIGN=1

                  MFRC522_CalculateCRC PROC
;;;264    
;;;265    void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;266    	uint8_t i, n;
;;;267    
;;;268    	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
00000a  2104              MOVS     r1,#4
00000c  2005              MOVS     r0,#5
00000e  f7fffffe          BL       MFRC522_ClearBitMask
;;;269    	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
000012  2180              MOVS     r1,#0x80
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       MFRC522_SetBitMask
;;;270    	//Write_MFRC522(CommandReg, PCD_IDLE);
;;;271    
;;;272    	//Writing data to the FIFO	
;;;273    	for (i = 0; i < len; i++) {   
00001a  2400              MOVS     r4,#0
00001c  e005              B        |L5.42|
                  |L5.30|
;;;274    		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
00001e  5d39              LDRB     r1,[r7,r4]
000020  2009              MOVS     r0,#9
000022  f7fffffe          BL       MFRC522_WriteRegister
000026  1c60              ADDS     r0,r4,#1              ;273
000028  b2c4              UXTB     r4,r0                 ;273
                  |L5.42|
00002a  4544              CMP      r4,r8                 ;273
00002c  dbf7              BLT      |L5.30|
;;;275    	}
;;;276    	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
00002e  2103              MOVS     r1,#3
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       MFRC522_WriteRegister
;;;277    
;;;278    	//Wait CRC calculation is complete
;;;279    	i = 0xFF;
000036  24ff              MOVS     r4,#0xff
;;;280    	do {
000038  bf00              NOP      
                  |L5.58|
;;;281    		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
00003a  2005              MOVS     r0,#5
00003c  f7fffffe          BL       MFRC522_ReadRegister
000040  4606              MOV      r6,r0
;;;282    		i--;
000042  1e60              SUBS     r0,r4,#1
000044  b2c4              UXTB     r4,r0
;;;283    	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
000046  b11c              CBZ      r4,|L5.80|
000048  f0060004          AND      r0,r6,#4
00004c  2800              CMP      r0,#0
00004e  d0f4              BEQ      |L5.58|
                  |L5.80|
;;;284    
;;;285    	//Read CRC calculation result
;;;286    	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
000050  2022              MOVS     r0,#0x22
000052  f7fffffe          BL       MFRC522_ReadRegister
000056  7028              STRB     r0,[r5,#0]
;;;287    	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
000058  2021              MOVS     r0,#0x21
00005a  f7fffffe          BL       MFRC522_ReadRegister
00005e  7068              STRB     r0,[r5,#1]
;;;288    }
000060  e8bd81f0          POP      {r4-r8,pc}
;;;289    
                          ENDP


                          AREA ||i.MFRC522_Check||, CODE, READONLY, ALIGN=1

                  MFRC522_Check PROC
;;;48     
;;;49     MFRC522_Status_t MFRC522_Check(uint8_t* id) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;50     	MFRC522_Status_t status;
;;;51     	//Find cards, return card type
;;;52     	status = MFRC522_Request(PICC_REQIDL, id);	
000004  4621              MOV      r1,r4
000006  2026              MOVS     r0,#0x26
000008  f7fffffe          BL       MFRC522_Request
00000c  4605              MOV      r5,r0
;;;53     	if (status == MI_OK) {
00000e  b91d              CBNZ     r5,|L6.24|
;;;54     		//Card detected
;;;55     		//Anti-collision, return card serial number 4 bytes
;;;56     		status = MFRC522_Anticoll(id);	
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       MFRC522_Anticoll
000016  4605              MOV      r5,r0
                  |L6.24|
;;;57     	}
;;;58     	MFRC522_Halt();			//Command card into hibernation 
000018  f7fffffe          BL       MFRC522_Halt
;;;59     
;;;60     	return status;
00001c  4628              MOV      r0,r5
;;;61     }
00001e  bd70              POP      {r4-r6,pc}
;;;62     
                          ENDP


                          AREA ||i.MFRC522_ClearBitMask||, CODE, READONLY, ALIGN=1

                  MFRC522_ClearBitMask PROC
;;;116    
;;;117    void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;118    	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       MFRC522_ReadRegister
00000c  ea200604          BIC      r6,r0,r4
000010  4631              MOV      r1,r6
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       MFRC522_WriteRegister
;;;119    } 
000018  bd70              POP      {r4-r6,pc}
;;;120    
                          ENDP


                          AREA ||i.MFRC522_Compare||, CODE, READONLY, ALIGN=1

                  MFRC522_Compare PROC
;;;62     
;;;63     MFRC522_Status_t MFRC522_Compare(uint8_t* CardID, uint8_t* CompareID) {
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;64     	uint8_t i;
;;;65     	for (i = 0; i < 5; i++) {
000006  2100              MOVS     r1,#0
000008  e007              B        |L8.26|
                  |L8.10|
;;;66     		if (CardID[i] != CompareID[i]) {
00000a  5c50              LDRB     r0,[r2,r1]
00000c  5c5c              LDRB     r4,[r3,r1]
00000e  42a0              CMP      r0,r4
000010  d001              BEQ      |L8.22|
;;;67     			return MI_ERR;
000012  2002              MOVS     r0,#2
                  |L8.20|
;;;68     		}
;;;69     	}
;;;70     	return MI_OK;
;;;71     }
000014  bd10              POP      {r4,pc}
                  |L8.22|
000016  1c48              ADDS     r0,r1,#1              ;65
000018  b2c1              UXTB     r1,r0                 ;65
                  |L8.26|
00001a  2905              CMP      r1,#5                 ;65
00001c  dbf5              BLT      |L8.10|
00001e  2000              MOVS     r0,#0                 ;70
000020  e7f8              B        |L8.20|
;;;72     
                          ENDP


                          AREA ||i.MFRC522_Halt||, CODE, READONLY, ALIGN=1

                  MFRC522_Halt PROC
;;;384    
;;;385    void MFRC522_Halt(void) {
000000  b50e              PUSH     {r1-r3,lr}
;;;386    	uint16_t unLen;
;;;387    	uint8_t buff[4]; 
;;;388    
;;;389    	buff[0] = PICC_HALT;
000002  2050              MOVS     r0,#0x50
000004  f88d0004          STRB     r0,[sp,#4]
;;;390    	buff[1] = 0;
000008  2000              MOVS     r0,#0
00000a  f88d0005          STRB     r0,[sp,#5]
;;;391    	MFRC522_CalculateCRC(buff, 2, &buff[2]);
00000e  f10d0206          ADD      r2,sp,#6
000012  2102              MOVS     r1,#2
000014  a801              ADD      r0,sp,#4
000016  f7fffffe          BL       MFRC522_CalculateCRC
;;;392    
;;;393    	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
00001a  a802              ADD      r0,sp,#8
00001c  ab01              ADD      r3,sp,#4
00001e  2204              MOVS     r2,#4
000020  a901              ADD      r1,sp,#4
000022  9000              STR      r0,[sp,#0]
000024  200c              MOVS     r0,#0xc
000026  f7fffffe          BL       MFRC522_ToCard
;;;394    }
00002a  bd0e              POP      {r1-r3,pc}
;;;395    
                          ENDP


                          AREA ||i.MFRC522_Init||, CODE, READONLY, ALIGN=2

                  MFRC522_Init PROC
;;;20     
;;;21     void MFRC522_Init(void) {
000000  b500              PUSH     {lr}
000002  b085              SUB      sp,sp,#0x14
;;;22     	MFRC522_InitPins();
000004  f7fffffe          BL       MFRC522_InitPins
;;;23     //	SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);
;;;24     	SPI_Initstruct(SPI1,// spi giao tiep
000008  f44f7082          MOV      r0,#0x104
00000c  2100              MOVS     r1,#0
00000e  2228              MOVS     r2,#0x28
000010  e9cd1201          STRD     r1,r2,[sp,#4]
000014  e9cd1003          STRD     r1,r0,[sp,#0xc]
000018  f44f7000          MOV      r0,#0x200
00001c  460b              MOV      r3,r1
00001e  460a              MOV      r2,r1
000020  21a1              MOVS     r1,#0xa1
000022  9000              STR      r0,[sp,#0]
000024  4812              LDR      r0,|L10.112|
000026  f7fffffe          BL       SPI_Initstruct
;;;25     								 SPI1_Pin1,//chan giao tiep spi
;;;26     								 SPI_Mode_0,
;;;27     								 SPI_Direction_2Lines_FullDuplex,// full song cong
;;;28     								 SPI_NSS_Soft,// chip select
;;;29     								 SPI_DataSize_8b,// kich thuoc data
;;;30     								 SPI_BaudRatePrescaler_64,// toc do baud
;;;31     								 SPI_FirstBit_MSB,// bit dau tien
;;;32     								 SPI_Mode_Master);// che do giao tiep
;;;33     	MFRC522_Reset();
00002a  f7fffffe          BL       MFRC522_Reset
;;;34     
;;;35     	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
00002e  218d              MOVS     r1,#0x8d
000030  202a              MOVS     r0,#0x2a
000032  f7fffffe          BL       MFRC522_WriteRegister
;;;36     	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
000036  213e              MOVS     r1,#0x3e
000038  202b              MOVS     r0,#0x2b
00003a  f7fffffe          BL       MFRC522_WriteRegister
;;;37     	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
00003e  211e              MOVS     r1,#0x1e
000040  202d              MOVS     r0,#0x2d
000042  f7fffffe          BL       MFRC522_WriteRegister
;;;38     	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
000046  2100              MOVS     r1,#0
000048  202c              MOVS     r0,#0x2c
00004a  f7fffffe          BL       MFRC522_WriteRegister
;;;39     
;;;40     	/* 48dB gain */
;;;41     	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
00004e  2170              MOVS     r1,#0x70
000050  2026              MOVS     r0,#0x26
000052  f7fffffe          BL       MFRC522_WriteRegister
;;;42     	
;;;43     	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
000056  2140              MOVS     r1,#0x40
000058  2015              MOVS     r0,#0x15
00005a  f7fffffe          BL       MFRC522_WriteRegister
;;;44     	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
00005e  213d              MOVS     r1,#0x3d
000060  2011              MOVS     r0,#0x11
000062  f7fffffe          BL       MFRC522_WriteRegister
;;;45     
;;;46     	MFRC522_AntennaOn();		//Open the antenna
000066  f7fffffe          BL       MFRC522_AntennaOn
;;;47     }
00006a  b005              ADD      sp,sp,#0x14
00006c  bd00              POP      {pc}
;;;48     
                          ENDP

00006e  0000              DCW      0x0000
                  |L10.112|
                          DCD      0x40013000

                          AREA ||i.MFRC522_InitPins||, CODE, READONLY, ALIGN=2

                  MFRC522_InitPins PROC
;;;72     
;;;73     void MFRC522_InitPins(void) {
000000  b51c              PUSH     {r2-r4,lr}
;;;74     	GPIO_InitTypeDef GPIO_InitStruct;
;;;75     	//Enable clock
;;;76     	RCC_AHB1PeriphClockCmd(MFRC522_CS_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;77     
;;;78     	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2002              MOVS     r0,#2
00000c  f88d0005          STRB     r0,[sp,#5]
;;;79     	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
000010  2001              MOVS     r0,#1
000012  f88d0004          STRB     r0,[sp,#4]
;;;80     	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
000016  2000              MOVS     r0,#0
000018  f88d0006          STRB     r0,[sp,#6]
;;;81     	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
00001c  f88d0007          STRB     r0,[sp,#7]
;;;82     	//CS pin
;;;83     	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
000020  2010              MOVS     r0,#0x10
000022  9000              STR      r0,[sp,#0]
;;;84     	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);	
000024  4669              MOV      r1,sp
000026  4803              LDR      r0,|L11.52|
000028  f7fffffe          BL       GPIO_Init
;;;85     
;;;86     	MFRC522_CS_HIGH;
00002c  2010              MOVS     r0,#0x10
00002e  4901              LDR      r1,|L11.52|
000030  8308              STRH     r0,[r1,#0x18]
;;;87     }
000032  bd1c              POP      {r2-r4,pc}
;;;88     
                          ENDP

                  |L11.52|
                          DCD      0x40020000

                          AREA ||i.MFRC522_Read||, CODE, READONLY, ALIGN=1

                  MFRC522_Read PROC
;;;337    
;;;338    MFRC522_Status_t MFRC522_Read(uint8_t blockAddr, uint8_t* recvData) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;339    	MFRC522_Status_t status;
;;;340    	uint16_t unLen;
;;;341    
;;;342    	recvData[0] = PICC_READ;
000006  2030              MOVS     r0,#0x30
000008  7020              STRB     r0,[r4,#0]
;;;343    	recvData[1] = blockAddr;
00000a  7065              STRB     r5,[r4,#1]
;;;344    	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
00000c  1ca2              ADDS     r2,r4,#2
00000e  2102              MOVS     r1,#2
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       MFRC522_CalculateCRC
;;;345    	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
000016  a801              ADD      r0,sp,#4
000018  4623              MOV      r3,r4
00001a  2204              MOVS     r2,#4
00001c  4621              MOV      r1,r4
00001e  9000              STR      r0,[sp,#0]
000020  200c              MOVS     r0,#0xc
000022  f7fffffe          BL       MFRC522_ToCard
000026  4606              MOV      r6,r0
;;;346    
;;;347    	if ((status != MI_OK) || (unLen != 0x90)) {
000028  b91e              CBNZ     r6,|L12.50|
00002a  f8bd0004          LDRH     r0,[sp,#4]
00002e  2890              CMP      r0,#0x90
000030  d000              BEQ      |L12.52|
                  |L12.50|
;;;348    		status = MI_ERR;
000032  2602              MOVS     r6,#2
                  |L12.52|
;;;349    	}
;;;350    
;;;351    	return status;
000034  4630              MOV      r0,r6
;;;352    }
000036  bd7c              POP      {r2-r6,pc}
;;;353    
                          ENDP


                          AREA ||i.MFRC522_ReadRegister||, CODE, READONLY, ALIGN=2

                  MFRC522_ReadRegister PROC
;;;99     
;;;100    uint8_t MFRC522_ReadRegister(uint8_t addr) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;101    	uint8_t val;
;;;102    	//CS low
;;;103    	MFRC522_CS_LOW;
000004  2010              MOVS     r0,#0x10
000006  490a              LDR      r1,|L13.48|
000008  8348              STRH     r0,[r1,#0x1a]
;;;104    
;;;105    	SPI_Send(MFRC522_SPI, ((addr << 1) & 0x7E) | 0x80);	
00000a  207e              MOVS     r0,#0x7e
00000c  ea000044          AND      r0,r0,r4,LSL #1
000010  f0400180          ORR      r1,r0,#0x80
000014  4807              LDR      r0,|L13.52|
000016  f7fffffe          BL       SPI_Send
;;;106    	val = SPI_Send(MFRC522_SPI, MFRC522_DUMMY);
00001a  2100              MOVS     r1,#0
00001c  4805              LDR      r0,|L13.52|
00001e  f7fffffe          BL       SPI_Send
000022  4605              MOV      r5,r0
;;;107    	//CS high
;;;108    	MFRC522_CS_HIGH;
000024  2010              MOVS     r0,#0x10
000026  4902              LDR      r1,|L13.48|
000028  8308              STRH     r0,[r1,#0x18]
;;;109    
;;;110    	return val;	
00002a  4628              MOV      r0,r5
;;;111    }
00002c  bd70              POP      {r4-r6,pc}
;;;112    
                          ENDP

00002e  0000              DCW      0x0000
                  |L13.48|
                          DCD      0x40020000
                  |L13.52|
                          DCD      0x40013000

                          AREA ||i.MFRC522_Request||, CODE, READONLY, ALIGN=1

                  MFRC522_Request PROC
;;;137    
;;;138    MFRC522_Status_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;139    	MFRC522_Status_t status;  
;;;140    	uint16_t backBits;			//The received data bits
;;;141    
;;;142    	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
000006  2107              MOVS     r1,#7
000008  200d              MOVS     r0,#0xd
00000a  f7fffffe          BL       MFRC522_WriteRegister
;;;143    
;;;144    	TagType[0] = reqMode;
00000e  7026              STRB     r6,[r4,#0]
;;;145    	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
000010  a801              ADD      r0,sp,#4
000012  4623              MOV      r3,r4
000014  2201              MOVS     r2,#1
000016  4621              MOV      r1,r4
000018  9000              STR      r0,[sp,#0]
00001a  200c              MOVS     r0,#0xc
00001c  f7fffffe          BL       MFRC522_ToCard
000020  4605              MOV      r5,r0
;;;146    
;;;147    	if ((status != MI_OK) || (backBits != 0x10)) {    
000022  b91d              CBNZ     r5,|L14.44|
000024  f8bd0004          LDRH     r0,[sp,#4]
000028  2810              CMP      r0,#0x10
00002a  d000              BEQ      |L14.46|
                  |L14.44|
;;;148    		status = MI_ERR;
00002c  2502              MOVS     r5,#2
                  |L14.46|
;;;149    	}
;;;150    
;;;151    	return status;
00002e  4628              MOV      r0,r5
;;;152    }
000030  bd7c              POP      {r2-r6,pc}
;;;153    
                          ENDP


                          AREA ||i.MFRC522_Reset||, CODE, READONLY, ALIGN=1

                  MFRC522_Reset PROC
;;;133    
;;;134    void MFRC522_Reset(void) {
000000  b510              PUSH     {r4,lr}
;;;135    	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
000002  210f              MOVS     r1,#0xf
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       MFRC522_WriteRegister
;;;136    }
00000a  bd10              POP      {r4,pc}
;;;137    
                          ENDP


                          AREA ||i.MFRC522_SelectTag||, CODE, READONLY, ALIGN=1

                  MFRC522_SelectTag PROC
;;;289    
;;;290    uint8_t MFRC522_SelectTag(uint8_t* serNum) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b085              SUB      sp,sp,#0x14
000004  4607              MOV      r7,r0
;;;291    	uint8_t i;
;;;292    	MFRC522_Status_t status;
;;;293    	uint8_t size;
;;;294    	uint16_t recvBits;
;;;295    	uint8_t buffer[9]; 
;;;296    
;;;297    	buffer[0] = PICC_SElECTTAG;
000006  2093              MOVS     r0,#0x93
000008  f88d0004          STRB     r0,[sp,#4]
;;;298    	buffer[1] = 0x70;
00000c  2070              MOVS     r0,#0x70
00000e  f88d0005          STRB     r0,[sp,#5]
;;;299    	for (i = 0; i < 5; i++) {
000012  2400              MOVS     r4,#0
000014  e005              B        |L16.34|
                  |L16.22|
;;;300    		buffer[i+2] = *(serNum+i);
000016  5d39              LDRB     r1,[r7,r4]
000018  aa01              ADD      r2,sp,#4
00001a  1ca0              ADDS     r0,r4,#2
00001c  5411              STRB     r1,[r2,r0]
00001e  1c60              ADDS     r0,r4,#1              ;299
000020  b2c4              UXTB     r4,r0                 ;299
                  |L16.34|
000022  2c05              CMP      r4,#5                 ;299
000024  dbf7              BLT      |L16.22|
;;;301    	}
;;;302    	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
000026  f10d020b          ADD      r2,sp,#0xb
00002a  2107              MOVS     r1,#7
00002c  a801              ADD      r0,sp,#4
00002e  f7fffffe          BL       MFRC522_CalculateCRC
;;;303    	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
000032  a804              ADD      r0,sp,#0x10
000034  ab01              ADD      r3,sp,#4
000036  2209              MOVS     r2,#9
000038  a901              ADD      r1,sp,#4
00003a  9000              STR      r0,[sp,#0]
00003c  200c              MOVS     r0,#0xc
00003e  f7fffffe          BL       MFRC522_ToCard
000042  4605              MOV      r5,r0
;;;304    
;;;305    	if ((status == MI_OK) && (recvBits == 0x18)) {   
000044  b935              CBNZ     r5,|L16.84|
000046  f8bd0010          LDRH     r0,[sp,#0x10]
00004a  2818              CMP      r0,#0x18
00004c  d102              BNE      |L16.84|
;;;306    		size = buffer[0]; 
00004e  f89d6004          LDRB     r6,[sp,#4]
000052  e000              B        |L16.86|
                  |L16.84|
;;;307    	} else {   
;;;308    		size = 0;    
000054  2600              MOVS     r6,#0
                  |L16.86|
;;;309    	}
;;;310    
;;;311    	return size;
000056  4630              MOV      r0,r6
;;;312    }
000058  b005              ADD      sp,sp,#0x14
00005a  bdf0              POP      {r4-r7,pc}
;;;313    
                          ENDP


                          AREA ||i.MFRC522_SetBitMask||, CODE, READONLY, ALIGN=1

                  MFRC522_SetBitMask PROC
;;;112    
;;;113    void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;114    	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       MFRC522_ReadRegister
00000c  ea400604          ORR      r6,r0,r4
000010  4631              MOV      r1,r6
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       MFRC522_WriteRegister
;;;115    }
000018  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.MFRC522_ToCard||, CODE, READONLY, ALIGN=1

                  MFRC522_ToCard PROC
;;;153    
;;;154    MFRC522_Status_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
000000  e92d4ffe          PUSH     {r1-r11,lr}
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
00000c  f8ddb030          LDR      r11,[sp,#0x30]
;;;155    	MFRC522_Status_t status = MI_ERR;
000010  2002              MOVS     r0,#2
000012  9002              STR      r0,[sp,#8]
;;;156    	uint8_t irqEn = 0x00;
000014  2000              MOVS     r0,#0
000016  9001              STR      r0,[sp,#4]
;;;157    	uint8_t waitIRq = 0x00;
000018  9000              STR      r0,[sp,#0]
;;;158    	uint8_t lastBits;
;;;159    	uint8_t n;
;;;160    	uint16_t i;
;;;161    
;;;162    	switch (command) {
00001a  2e0c              CMP      r6,#0xc
00001c  d006              BEQ      |L18.44|
00001e  2e0e              CMP      r6,#0xe
000020  d109              BNE      |L18.54|
;;;163    		case PCD_AUTHENT: {
;;;164    			irqEn = 0x12;
000022  2012              MOVS     r0,#0x12
000024  9001              STR      r0,[sp,#4]
;;;165    			waitIRq = 0x10;
000026  2010              MOVS     r0,#0x10
000028  9000              STR      r0,[sp,#0]
;;;166    			break;
00002a  e005              B        |L18.56|
                  |L18.44|
;;;167    		}
;;;168    		case PCD_TRANSCEIVE: {
;;;169    			irqEn = 0x77;
00002c  2077              MOVS     r0,#0x77
00002e  9001              STR      r0,[sp,#4]
;;;170    			waitIRq = 0x30;
000030  2030              MOVS     r0,#0x30
000032  9000              STR      r0,[sp,#0]
;;;171    			break;
000034  e000              B        |L18.56|
                  |L18.54|
;;;172    		}
;;;173    		default:
;;;174    			break;
000036  bf00              NOP      
                  |L18.56|
000038  bf00              NOP                            ;166
;;;175    	}
;;;176    
;;;177    	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
00003a  9801              LDR      r0,[sp,#4]
00003c  f0400180          ORR      r1,r0,#0x80
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       MFRC522_WriteRegister
;;;178    	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
000046  2180              MOVS     r1,#0x80
000048  2004              MOVS     r0,#4
00004a  f7fffffe          BL       MFRC522_ClearBitMask
;;;179    	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
00004e  2180              MOVS     r1,#0x80
000050  200a              MOVS     r0,#0xa
000052  f7fffffe          BL       MFRC522_SetBitMask
;;;180    
;;;181    	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
000056  2100              MOVS     r1,#0
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       MFRC522_WriteRegister
;;;182    
;;;183    	//Writing data to the FIFO
;;;184    	for (i = 0; i < sendLen; i++) {   
00005e  2500              MOVS     r5,#0
000060  e006              B        |L18.112|
                  |L18.98|
;;;185    		MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
000062  f8181005          LDRB     r1,[r8,r5]
000066  2009              MOVS     r0,#9
000068  f7fffffe          BL       MFRC522_WriteRegister
00006c  1c68              ADDS     r0,r5,#1              ;184
00006e  b285              UXTH     r5,r0                 ;184
                  |L18.112|
000070  454d              CMP      r5,r9                 ;184
000072  dbf6              BLT      |L18.98|
;;;186    	}
;;;187    
;;;188    	//Execute the command
;;;189    	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
000074  4631              MOV      r1,r6
000076  2001              MOVS     r0,#1
000078  f7fffffe          BL       MFRC522_WriteRegister
;;;190    	if (command == PCD_TRANSCEIVE) {    
00007c  2e0c              CMP      r6,#0xc
00007e  d103              BNE      |L18.136|
;;;191    		MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
000080  2180              MOVS     r1,#0x80
000082  200d              MOVS     r0,#0xd
000084  f7fffffe          BL       MFRC522_SetBitMask
                  |L18.136|
;;;192    	}   
;;;193    
;;;194    	//Waiting to receive data to complete
;;;195    	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
000088  f44f65fa          MOV      r5,#0x7d0
;;;196    	do {
00008c  bf00              NOP      
                  |L18.142|
;;;197    		//CommIrqReg[7..0]
;;;198    		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
;;;199    		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
00008e  2004              MOVS     r0,#4
000090  f7fffffe          BL       MFRC522_ReadRegister
000094  4604              MOV      r4,r0
;;;200    		i--;
000096  1e68              SUBS     r0,r5,#1
000098  b285              UXTH     r5,r0
;;;201    	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
00009a  b135              CBZ      r5,|L18.170|
00009c  f0040001          AND      r0,r4,#1
0000a0  b918              CBNZ     r0,|L18.170|
0000a2  9800              LDR      r0,[sp,#0]
0000a4  4020              ANDS     r0,r0,r4
0000a6  2800              CMP      r0,#0
0000a8  d0f1              BEQ      |L18.142|
                  |L18.170|
;;;202    
;;;203    	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
0000aa  2180              MOVS     r1,#0x80
0000ac  200d              MOVS     r0,#0xd
0000ae  f7fffffe          BL       MFRC522_ClearBitMask
;;;204    
;;;205    	if (i != 0)  {
0000b2  2d00              CMP      r5,#0
0000b4  d036              BEQ      |L18.292|
;;;206    		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
0000b6  2006              MOVS     r0,#6
0000b8  f7fffffe          BL       MFRC522_ReadRegister
0000bc  f000001b          AND      r0,r0,#0x1b
0000c0  bb70              CBNZ     r0,|L18.288|
;;;207    			status = MI_OK;
0000c2  2000              MOVS     r0,#0
0000c4  9002              STR      r0,[sp,#8]
;;;208    			if (n & irqEn & 0x01) {   
0000c6  9801              LDR      r0,[sp,#4]
0000c8  4020              ANDS     r0,r0,r4
0000ca  f0000001          AND      r0,r0,#1
0000ce  b108              CBZ      r0,|L18.212|
;;;209    				status = MI_NOTAGERR;			
0000d0  2001              MOVS     r0,#1
0000d2  9002              STR      r0,[sp,#8]
                  |L18.212|
;;;210    			}
;;;211    
;;;212    			if (command == PCD_TRANSCEIVE) {
0000d4  2e0c              CMP      r6,#0xc
0000d6  d125              BNE      |L18.292|
;;;213    				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
0000d8  200a              MOVS     r0,#0xa
0000da  f7fffffe          BL       MFRC522_ReadRegister
0000de  4604              MOV      r4,r0
;;;214    				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
0000e0  200c              MOVS     r0,#0xc
0000e2  f7fffffe          BL       MFRC522_ReadRegister
0000e6  f0000707          AND      r7,r0,#7
;;;215    				if (lastBits) {   
0000ea  b12f              CBZ      r7,|L18.248|
;;;216    					*backLen = (n - 1) * 8 + lastBits;   
0000ec  1e60              SUBS     r0,r4,#1
0000ee  eb0700c0          ADD      r0,r7,r0,LSL #3
0000f2  f8ab0000          STRH     r0,[r11,#0]
0000f6  e002              B        |L18.254|
                  |L18.248|
;;;217    				} else {   
;;;218    					*backLen = n * 8;   
0000f8  00e0              LSLS     r0,r4,#3
0000fa  f8ab0000          STRH     r0,[r11,#0]
                  |L18.254|
;;;219    				}
;;;220    
;;;221    				if (n == 0) {   
0000fe  b904              CBNZ     r4,|L18.258|
;;;222    					n = 1;    
000100  2401              MOVS     r4,#1
                  |L18.258|
;;;223    				}
;;;224    				if (n > MFRC522_MAX_LEN) {   
000102  2c10              CMP      r4,#0x10
000104  dd00              BLE      |L18.264|
;;;225    					n = MFRC522_MAX_LEN;   
000106  2410              MOVS     r4,#0x10
                  |L18.264|
;;;226    				}
;;;227    
;;;228    				//Reading the received data in FIFO
;;;229    				for (i = 0; i < n; i++) {   
000108  2500              MOVS     r5,#0
00010a  e006              B        |L18.282|
                  |L18.268|
;;;230    					backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
00010c  2009              MOVS     r0,#9
00010e  f7fffffe          BL       MFRC522_ReadRegister
000112  f80a0005          STRB     r0,[r10,r5]
000116  1c68              ADDS     r0,r5,#1              ;229
000118  b285              UXTH     r5,r0                 ;229
                  |L18.282|
00011a  42a5              CMP      r5,r4                 ;229
00011c  dbf6              BLT      |L18.268|
00011e  e001              B        |L18.292|
                  |L18.288|
;;;231    				}
;;;232    			}
;;;233    		} else {   
;;;234    			status = MI_ERR;  
000120  2002              MOVS     r0,#2
000122  9002              STR      r0,[sp,#8]
                  |L18.292|
;;;235    		}
;;;236    	}
;;;237    
;;;238    	return status;
000124  9802              LDR      r0,[sp,#8]
;;;239    }
000126  e8bd8ffe          POP      {r1-r11,pc}
;;;240    
                          ENDP


                          AREA ||i.MFRC522_Write||, CODE, READONLY, ALIGN=1

                  MFRC522_Write PROC
;;;353    
;;;354    MFRC522_Status_t MFRC522_Write(uint8_t blockAddr, uint8_t* writeData) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;355    	MFRC522_Status_t status;
;;;356    	uint16_t recvBits;
;;;357    	uint8_t i;
;;;358    	uint8_t buff[18]; 
;;;359    
;;;360    	buff[0] = PICC_WRITE;
000008  20a0              MOVS     r0,#0xa0
00000a  f88d0004          STRB     r0,[sp,#4]
;;;361    	buff[1] = blockAddr;
00000e  f88d6005          STRB     r6,[sp,#5]
;;;362    	MFRC522_CalculateCRC(buff, 2, &buff[2]);
000012  f10d0206          ADD      r2,sp,#6
000016  2102              MOVS     r1,#2
000018  a801              ADD      r0,sp,#4
00001a  f7fffffe          BL       MFRC522_CalculateCRC
;;;363    	status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
00001e  a806              ADD      r0,sp,#0x18
000020  ab01              ADD      r3,sp,#4
000022  2204              MOVS     r2,#4
000024  a901              ADD      r1,sp,#4
000026  9000              STR      r0,[sp,#0]
000028  200c              MOVS     r0,#0xc
00002a  f7fffffe          BL       MFRC522_ToCard
00002e  4605              MOV      r5,r0
;;;364    
;;;365    	if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) {   
000030  b94d              CBNZ     r5,|L19.70|
000032  f8bd0018          LDRH     r0,[sp,#0x18]
000036  2804              CMP      r0,#4
000038  d105              BNE      |L19.70|
00003a  f89d0004          LDRB     r0,[sp,#4]
00003e  f000000f          AND      r0,r0,#0xf
000042  280a              CMP      r0,#0xa
000044  d000              BEQ      |L19.72|
                  |L19.70|
;;;366    		status = MI_ERR;   
000046  2502              MOVS     r5,#2
                  |L19.72|
;;;367    	}
;;;368    
;;;369    	if (status == MI_OK) {
000048  bb15              CBNZ     r5,|L19.144|
;;;370    		//Data to the FIFO write 16Byte
;;;371    		for (i = 0; i < 16; i++) {    
00004a  2400              MOVS     r4,#0
00004c  e004              B        |L19.88|
                  |L19.78|
;;;372    			buff[i] = *(writeData+i);   
00004e  5d38              LDRB     r0,[r7,r4]
000050  a901              ADD      r1,sp,#4
000052  5508              STRB     r0,[r1,r4]
000054  1c60              ADDS     r0,r4,#1              ;371
000056  b2c4              UXTB     r4,r0                 ;371
                  |L19.88|
000058  2c10              CMP      r4,#0x10              ;371
00005a  dbf8              BLT      |L19.78|
;;;373    		}
;;;374    		MFRC522_CalculateCRC(buff, 16, &buff[16]);
00005c  aa05              ADD      r2,sp,#0x14
00005e  2110              MOVS     r1,#0x10
000060  a801              ADD      r0,sp,#4
000062  f7fffffe          BL       MFRC522_CalculateCRC
;;;375    		status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
000066  a806              ADD      r0,sp,#0x18
000068  ab01              ADD      r3,sp,#4
00006a  2212              MOVS     r2,#0x12
00006c  a901              ADD      r1,sp,#4
00006e  9000              STR      r0,[sp,#0]
000070  200c              MOVS     r0,#0xc
000072  f7fffffe          BL       MFRC522_ToCard
000076  4605              MOV      r5,r0
;;;376    
;;;377    		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) {   
000078  b94d              CBNZ     r5,|L19.142|
00007a  f8bd0018          LDRH     r0,[sp,#0x18]
00007e  2804              CMP      r0,#4
000080  d105              BNE      |L19.142|
000082  f89d0004          LDRB     r0,[sp,#4]
000086  f000000f          AND      r0,r0,#0xf
00008a  280a              CMP      r0,#0xa
00008c  d000              BEQ      |L19.144|
                  |L19.142|
;;;378    			status = MI_ERR;   
00008e  2502              MOVS     r5,#2
                  |L19.144|
;;;379    		}
;;;380    	}
;;;381    
;;;382    	return status;
000090  4628              MOV      r0,r5
;;;383    }
000092  b007              ADD      sp,sp,#0x1c
000094  bdf0              POP      {r4-r7,pc}
;;;384    
                          ENDP


                          AREA ||i.MFRC522_WriteRegister||, CODE, READONLY, ALIGN=2

                  MFRC522_WriteRegister PROC
;;;88     
;;;89     void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;90     	//CS low
;;;91     	MFRC522_CS_LOW;
000006  2010              MOVS     r0,#0x10
000008  4907              LDR      r1,|L20.40|
00000a  8348              STRH     r0,[r1,#0x1a]
;;;92     	//Send address
;;;93     	SPI_Send(MFRC522_SPI, (addr << 1) & 0x7E);
00000c  207e              MOVS     r0,#0x7e
00000e  ea000144          AND      r1,r0,r4,LSL #1
000012  4806              LDR      r0,|L20.44|
000014  f7fffffe          BL       SPI_Send
;;;94     	//Send data	
;;;95     	SPI_Send(MFRC522_SPI, val);
000018  4629              MOV      r1,r5
00001a  4804              LDR      r0,|L20.44|
00001c  f7fffffe          BL       SPI_Send
;;;96     	//CS high
;;;97     	MFRC522_CS_HIGH;
000020  2010              MOVS     r0,#0x10
000022  4901              LDR      r1,|L20.40|
000024  8308              STRH     r0,[r1,#0x18]
;;;98     }
000026  bd70              POP      {r4-r6,pc}
;;;99     
                          ENDP

                  |L20.40|
                          DCD      0x40020000
                  |L20.44|
                          DCD      0x40013000

;*** Start embedded assembler ***

#line 1 "USER\\spi_mfrc522.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_spi_mfrc522_c_f73849e2____REV16|
#line 138 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_spi_mfrc522_c_f73849e2____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_spi_mfrc522_c_f73849e2____REVSH|
#line 153
|__asm___13_spi_mfrc522_c_f73849e2____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_spi_mfrc522_c_f73849e2____RRX|
#line 328
|__asm___13_spi_mfrc522_c_f73849e2____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
