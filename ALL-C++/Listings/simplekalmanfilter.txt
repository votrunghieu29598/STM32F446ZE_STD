; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\objects\simplekalmanfilter.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\simplekalmanfilter.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I.\USER -I.\SCR -I.\Libraries\CMSIS\Include -I.\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I.\Libraries\STM32F4xx_StdPeriph_Driver\inc -I"C:\Users\Vo Trung Hieu\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include" -D__UVISION_VERSION=536 -DSTM32F446xx -DUSE_STDPERIPH_DRIVER -DSTM32F446xx -DHSE_VALUE=8000000 --omf_browse=.\objects\simplekalmanfilter.crf USER\SimpleKalmanFilter.cpp]
                          THUMB

                          AREA ||i._ZN18SimpleKalmanFilter13getKalmanGainEv||, CODE, READONLY, ALIGN=1

                  _ZN18SimpleKalmanFilter13getKalmanGainEv PROC ; SimpleKalmanFilter::getKalmanGain()
;;;42     
;;;43     float SimpleKalmanFilter::getKalmanGain() {
000000  ed900a05          VLDR     s0,[r0,#0x14]
;;;44       return _kalman_gain;
;;;45     }
000004  4770              BX       lr
;;;46     
                          ENDP


                          AREA ||i._ZN18SimpleKalmanFilter14updateEstimateEf||, CODE, READONLY, ALIGN=2

                  _ZN18SimpleKalmanFilter14updateEstimateEf PROC ; SimpleKalmanFilter::updateEstimate(float)
;;;17     
;;;18     float SimpleKalmanFilter::updateEstimate(float mea)
000000  b570              PUSH     {r4-r6,lr}
;;;19     {
000002  ed2d8b0e          VPUSH    {d8-d14}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;20       _kalman_gain = _err_estimate/(_err_estimate + _err_measure);
00000c  ed940a01          VLDR     s0,[r4,#4]
000010  edd40a00          VLDR     s1,[r4,#0]
000014  ee300a20          VADD.F32 s0,s0,s1
000018  edd40a01          VLDR     s1,[r4,#4]
00001c  ee801a80          VDIV.F32 s2,s1,s0
000020  ed841a05          VSTR     s2,[r4,#0x14]
;;;21       _current_estimate = _last_estimate + _kalman_gain * (mea - _last_estimate);
000024  ed940a04          VLDR     s0,[r4,#0x10]
000028  edd40a05          VLDR     s1,[r4,#0x14]
00002c  ed941a04          VLDR     s2,[r4,#0x10]
000030  ee381a41          VSUB.F32 s2,s16,s2
000034  ee000a81          VMLA.F32 s0,s1,s2
000038  ed840a03          VSTR     s0,[r4,#0xc]
;;;22       _err_estimate =  (1.0 - _kalman_gain)*_err_estimate + fabs(_last_estimate-_current_estimate)*_q;
00003c  edd40a04          VLDR     s1,[r4,#0x10]
000040  ed941a03          VLDR     s2,[r4,#0xc]
000044  ee300ac1          VSUB.F32 s0,s1,s2
000048  eef00ac0          VABS.F32 s1,s0
00004c  ed940a02          VLDR     s0,[r4,#8]
000050  ee200a80          VMUL.F32 s0,s1,s0
000054  ee105a10          VMOV     r5,s0
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       __aeabi_f2d
00005e  ec410b1a          VMOV     d10,r0,r1
000062  ed940a01          VLDR     s0,[r4,#4]
000066  ee101a10          VMOV     r1,s0
00006a  4608              MOV      r0,r1
00006c  f7fffffe          BL       __aeabi_f2d
000070  ec410b1c          VMOV     d12,r0,r1
000074  ed940a05          VLDR     s0,[r4,#0x14]
000078  ee101a10          VMOV     r1,s0
00007c  4608              MOV      r0,r1
00007e  f7fffffe          BL       __aeabi_f2d
000082  ec410b1e          VMOV     d14,r0,r1
000086  ed9f0b10          VLDR     d0,|L2.200|
00008a  ec532b10          VMOV     r2,r3,d0
00008e  f7fffffe          BL       __aeabi_drsub
000092  ec410b1d          VMOV     d13,r0,r1
000096  ec532b1c          VMOV     r2,r3,d12
00009a  f7fffffe          BL       __aeabi_dmul
00009e  ec410b1b          VMOV     d11,r0,r1
0000a2  ec532b1a          VMOV     r2,r3,d10
0000a6  f7fffffe          BL       __aeabi_dadd
0000aa  ec410b19          VMOV     d9,r0,r1
0000ae  f7fffffe          BL       __aeabi_d2f
0000b2  6060              STR      r0,[r4,#4]
;;;23       _last_estimate=_current_estimate;
0000b4  ed940a03          VLDR     s0,[r4,#0xc]
0000b8  ed840a04          VSTR     s0,[r4,#0x10]
;;;24     
;;;25       return _current_estimate;
0000bc  ed940a03          VLDR     s0,[r4,#0xc]
;;;26     }
0000c0  ecbd8b0e          VPOP     {d8-d14}
0000c4  bd70              POP      {r4-r6,pc}
;;;27     
                          ENDP

0000c6  0000              DCW      0x0000
                  |L2.200|
0000c8  00000000          DCFD     0x3ff0000000000000 ; 1
0000cc  3ff00000

                          AREA ||i._ZN18SimpleKalmanFilter15setProcessNoiseEf||, CODE, READONLY, ALIGN=1

                  _ZN18SimpleKalmanFilter15setProcessNoiseEf PROC ; SimpleKalmanFilter::setProcessNoise(float)
;;;37     
;;;38     void SimpleKalmanFilter::setProcessNoise(float q)
000000  ed800a02          VSTR     s0,[r0,#8]
;;;39     {
;;;40       _q=q;
;;;41     }
000004  4770              BX       lr
;;;42     
                          ENDP


                          AREA ||i._ZN18SimpleKalmanFilter16setEstimateErrorEf||, CODE, READONLY, ALIGN=1

                  _ZN18SimpleKalmanFilter16setEstimateErrorEf PROC ; SimpleKalmanFilter::setEstimateError(float)
;;;32     
;;;33     void SimpleKalmanFilter::setEstimateError(float est_e)
000000  ed800a01          VSTR     s0,[r0,#4]
;;;34     {
;;;35       _err_estimate=est_e;
;;;36     }
000004  4770              BX       lr
;;;37     
                          ENDP


                          AREA ||i._ZN18SimpleKalmanFilter19setMeasurementErrorEf||, CODE, READONLY, ALIGN=1

                  _ZN18SimpleKalmanFilter19setMeasurementErrorEf PROC ; SimpleKalmanFilter::setMeasurementError(float)
;;;27     
;;;28     void SimpleKalmanFilter::setMeasurementError(float mea_e)
000000  ed800a00          VSTR     s0,[r0,#0]
;;;29     {
;;;30       _err_measure=mea_e;
;;;31     }
000004  4770              BX       lr
;;;32     
                          ENDP


                          AREA ||i._ZN18SimpleKalmanFilterC1Efff||, CODE, READONLY, ALIGN=1

                  _ZN18SimpleKalmanFilterC2Efff                  ; Alternate entry point ; SimpleKalmanFilter::SimpleKalmanFilter__sub_object(float, float, float)
                  _ZN18SimpleKalmanFilterC1Efff PROC ; SimpleKalmanFilter::SimpleKalmanFilter(float, float, float)
;;;10     
;;;11     SimpleKalmanFilter::SimpleKalmanFilter(float mea_e, float est_e, float q)
;;;12     {
;;;13       _err_measure=mea_e;
;;;14       _err_estimate=est_e;
;;;15       _q = q;
;;;16     }
;;;17     
000000  ed800a00          VSTR     s0,[r0,#0]
000004  edc00a01          VSTR     s1,[r0,#4]
000008  ed801a02          VSTR     s2,[r0,#8]
00000c  4770              BX       lr
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._ZN18SimpleKalmanFilterC1Efff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._ZN18SimpleKalmanFilterC1Efff||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._ZN18SimpleKalmanFilter14updateEstimateEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN18SimpleKalmanFilter14updateEstimateEf||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._ZN18SimpleKalmanFilter19setMeasurementErrorEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN18SimpleKalmanFilter19setMeasurementErrorEf||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._ZN18SimpleKalmanFilter16setEstimateErrorEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN18SimpleKalmanFilter16setEstimateErrorEf||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._ZN18SimpleKalmanFilter15setProcessNoiseEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN18SimpleKalmanFilter15setProcessNoiseEf||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._ZN18SimpleKalmanFilter13getKalmanGainEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN18SimpleKalmanFilter13getKalmanGainEv||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Rx_data
                          %        100

                          AREA ||.data||, DATA, ALIGN=0

                  Rx_indx
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "USER\\SimpleKalmanFilter.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_SimpleKalmanFilter_cpp_cc44ea01___Z7__REV16j|
#line 138 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___22_SimpleKalmanFilter_cpp_cc44ea01___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_SimpleKalmanFilter_cpp_cc44ea01___Z7__REVSHi|
#line 153
|__asm___22_SimpleKalmanFilter_cpp_cc44ea01___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_SimpleKalmanFilter_cpp_cc44ea01___Z5__RRXj|
#line 328
|__asm___22_SimpleKalmanFilter_cpp_cc44ea01___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
