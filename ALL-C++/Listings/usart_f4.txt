; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\usart_f4.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usart_f4.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I.\USER -I.\SCR -I.\Libraries\CMSIS\Include -I.\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I.\Libraries\STM32F4xx_StdPeriph_Driver\inc -D__UVISION_VERSION=535 -DSTM32F446xx -DUSE_STDPERIPH_DRIVER -DSTM32F446xx -DHSE_VALUE=8000000 --omf_browse=.\objects\usart_f4.crf USER\usart_f4.c]
                          THUMB

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  USART2_IRQHandler PROC
;;;312    }
;;;313    void USART2_IRQHandler(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;314    {
;;;315    static char* data[10] = {0};
;;;316    volatile	u8 i = 0,z = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;317    if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000008  f2405125          MOV      r1,#0x525
00000c  48fe              LDR      r0,|L1.1032|
00000e  f7fffffe          BL       USART_GetITStatus
000012  2800              CMP      r0,#0
000014  d02e              BEQ      |L1.116|
;;;318    	{
;;;319    		if (Rx_indx ==0){ for( i = 0; i < 255; ++i) {Rx_data[i] = 0;}}
000016  48fd              LDR      r0,|L1.1036|
000018  7800              LDRB     r0,[r0,#0]  ; Rx_indx
00001a  b980              CBNZ     r0,|L1.62|
00001c  2000              MOVS     r0,#0
00001e  9001              STR      r0,[sp,#4]
000020  e009              B        |L1.54|
                  |L1.34|
000022  2000              MOVS     r0,#0
000024  49fa              LDR      r1,|L1.1040|
000026  f89d2004          LDRB     r2,[sp,#4]
00002a  5488              STRB     r0,[r1,r2]
00002c  f89d0004          LDRB     r0,[sp,#4]
000030  1c40              ADDS     r0,r0,#1
000032  b2c0              UXTB     r0,r0
000034  9001              STR      r0,[sp,#4]
                  |L1.54|
000036  f89d0004          LDRB     r0,[sp,#4]
00003a  28ff              CMP      r0,#0xff
00003c  dbf1              BLT      |L1.34|
                  |L1.62|
;;;320    		//luu du lieu vao buffer
;;;321    		Rx_data[Rx_indx++] = USART2 -> DR;
00003e  49f2              LDR      r1,|L1.1032|
000040  1d09              ADDS     r1,r1,#4
000042  8809              LDRH     r1,[r1,#0]
000044  b2ca              UXTB     r2,r1
000046  49f1              LDR      r1,|L1.1036|
000048  7808              LDRB     r0,[r1,#0]  ; Rx_indx
00004a  1c41              ADDS     r1,r0,#1
00004c  4bef              LDR      r3,|L1.1036|
00004e  7019              STRB     r1,[r3,#0]
000050  49ef              LDR      r1,|L1.1040|
000052  540a              STRB     r2,[r1,r0]
;;;322    		/*kiem tra do dai cua chuoi hoac kiem tra khong co ky tu \r dau buffer thi bao loi len pc*/
;;;323    		if(strlen((const char*)Rx_data) > BufferSize || strchr((char*)Rx_data,'\r') == NULL)
000054  4608              MOV      r0,r1
000056  f7fffffe          BL       strlen
00005a  283b              CMP      r0,#0x3b
00005c  d804              BHI      |L1.104|
00005e  210d              MOVS     r1,#0xd
000060  48eb              LDR      r0,|L1.1040|
000062  f7fffffe          BL       strchr
000066  b930              CBNZ     r0,|L1.118|
                  |L1.104|
;;;324    		{
;;;325    			Rx_indx = 0;
000068  2000              MOVS     r0,#0
00006a  49e8              LDR      r1,|L1.1036|
00006c  7008              STRB     r0,[r1,#0]
;;;326    			printf("\nERROR_BUFFER");
00006e  a0e9              ADR      r0,|L1.1044|
000070  f7fffffe          BL       __2printf
                  |L1.116|
000074  e312              B        |L1.1692|
                  |L1.118|
;;;327    		}
;;;328    		/* kiem tra co ky tu +,\r ,\n o cuoi buffer khong
;;;329    		VD: <CR>0+LED4_ON+LED2_ON+LED3_ON+LED1_ON+LED5_ON+LED6_ON+<CR><LF>*/
;;;330    		else if(strstr((char*)Rx_data,"+\r\n") != NULL)
000076  a1eb              ADR      r1,|L1.1060|
000078  48e5              LDR      r0,|L1.1040|
00007a  f7fffffe          BL       strstr
00007e  2800              CMP      r0,#0
000080  d0f8              BEQ      |L1.116|
;;;331    		{
;;;332    			// tach chuoi https://stackoverflow.com/questions/15472299/split-string-into-tokens-and-save-them-in-an-array
;;;333    			data[z] = strtok((char*)Rx_data,"+");
000082  a1e9              ADR      r1,|L1.1064|
000084  48e2              LDR      r0,|L1.1040|
000086  f7fffffe          BL       strtok
00008a  49e8              LDR      r1,|L1.1068|
00008c  f89d2000          LDRB     r2,[sp,#0]
000090  f8410022          STR      r0,[r1,r2,LSL #2]
;;;334    			while (data[z] != NULL)
000094  e00e              B        |L1.180|
                  |L1.150|
;;;335    			{
;;;336    				data[++z] = strtok(NULL,"+");
000096  a1e4              ADR      r1,|L1.1064|
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       strtok
00009e  f89d1000          LDRB     r1,[sp,#0]
0000a2  1c49              ADDS     r1,r1,#1
0000a4  b2c9              UXTB     r1,r1
0000a6  9100              STR      r1,[sp,#0]
0000a8  4ae0              LDR      r2,|L1.1068|
0000aa  f8420021          STR      r0,[r2,r1,LSL #2]
;;;337    				Rx_indx = 0;
0000ae  2000              MOVS     r0,#0
0000b0  49d6              LDR      r1,|L1.1036|
0000b2  7008              STRB     r0,[r1,#0]
                  |L1.180|
0000b4  48dd              LDR      r0,|L1.1068|
0000b6  f89d1000          LDRB     r1,[sp,#0]            ;334
0000ba  f8500021          LDR      r0,[r0,r1,LSL #2]     ;334
0000be  2800              CMP      r0,#0                 ;334
0000c0  d1e9              BNE      |L1.150|
;;;338    			}
;;;339    			// xuat nguoc lai len pc kiem tra
;;;340    			printf("%s\n",data[0]);// = 0;// bo mang phan tu dau tien (array[0]) tranh nhieu;
0000c2  48da              LDR      r0,|L1.1068|
0000c4  6801              LDR      r1,[r0,#0]  ; data
0000c6  a0da              ADR      r0,|L1.1072|
0000c8  f7fffffe          BL       __2printf
;;;341    			printf("%s\n",data[1]);// = LED4_ON;
0000cc  48d7              LDR      r0,|L1.1068|
0000ce  6841              LDR      r1,[r0,#4]  ; data
0000d0  a0d7              ADR      r0,|L1.1072|
0000d2  f7fffffe          BL       __2printf
;;;342    			printf("%s\n",data[2]);// = LED2_ON;
0000d6  48d5              LDR      r0,|L1.1068|
0000d8  6881              LDR      r1,[r0,#8]  ; data
0000da  a0d5              ADR      r0,|L1.1072|
0000dc  f7fffffe          BL       __2printf
;;;343    			printf("%s\n",data[3]);//
0000e0  48d2              LDR      r0,|L1.1068|
0000e2  68c1              LDR      r1,[r0,#0xc]  ; data
0000e4  a0d2              ADR      r0,|L1.1072|
0000e6  f7fffffe          BL       __2printf
;;;344    			printf("%s\n",data[4]);
0000ea  48d0              LDR      r0,|L1.1068|
0000ec  6901              LDR      r1,[r0,#0x10]  ; data
0000ee  a0d0              ADR      r0,|L1.1072|
0000f0  f7fffffe          BL       __2printf
;;;345    			printf("%s\n",data[5]);
0000f4  48cd              LDR      r0,|L1.1068|
0000f6  6941              LDR      r1,[r0,#0x14]  ; data
0000f8  a0cd              ADR      r0,|L1.1072|
0000fa  f7fffffe          BL       __2printf
;;;346    			printf("%s\n",data[6]);	
0000fe  48cb              LDR      r0,|L1.1068|
000100  6981              LDR      r1,[r0,#0x18]  ; data
000102  a0cb              ADR      r0,|L1.1072|
000104  f7fffffe          BL       __2printf
;;;347    			
;;;348    			// LED 1
;;;349    			if(strcmp(data[1],"LED1_ON") == 0 || strcmp(data[2],"LED1_ON") == 0 || strcmp(data[3],"LED1_ON") == 0 
000108  49c8              LDR      r1,|L1.1068|
00010a  6848              LDR      r0,[r1,#4]  ; data
00010c  a1c9              ADR      r1,|L1.1076|
00010e  f7fffffe          BL       strcmp
000112  b1e8              CBZ      r0,|L1.336|
000114  49c5              LDR      r1,|L1.1068|
000116  6888              LDR      r0,[r1,#8]  ; data
000118  a1c6              ADR      r1,|L1.1076|
00011a  f7fffffe          BL       strcmp
00011e  b1b8              CBZ      r0,|L1.336|
000120  49c2              LDR      r1,|L1.1068|
000122  68c8              LDR      r0,[r1,#0xc]  ; data
000124  a1c3              ADR      r1,|L1.1076|
000126  f7fffffe          BL       strcmp
00012a  b188              CBZ      r0,|L1.336|
;;;350    			|| strcmp(data[4],"LED1_ON") == 0 || strcmp(data[5],"LED1_ON") == 0 || strcmp(data[6],"LED1_ON") == 0 )
00012c  49bf              LDR      r1,|L1.1068|
00012e  6908              LDR      r0,[r1,#0x10]  ; data
000130  a1c0              ADR      r1,|L1.1076|
000132  f7fffffe          BL       strcmp
000136  b158              CBZ      r0,|L1.336|
000138  49bc              LDR      r1,|L1.1068|
00013a  6948              LDR      r0,[r1,#0x14]  ; data
00013c  a1bd              ADR      r1,|L1.1076|
00013e  f7fffffe          BL       strcmp
000142  b128              CBZ      r0,|L1.336|
000144  49b9              LDR      r1,|L1.1068|
000146  6988              LDR      r0,[r1,#0x18]  ; data
000148  a1ba              ADR      r1,|L1.1076|
00014a  f7fffffe          BL       strcmp
00014e  b968              CBNZ     r0,|L1.364|
                  |L1.336|
;;;351    			{
;;;352    				B0_OUT = 1;
000150  2001              MOVS     r0,#1
000152  49ba              LDR      r1,|L1.1084|
000154  6008              STR      r0,[r1,#0]
;;;353    				SSD1306_GotoXY (0, 20);
000156  2114              MOVS     r1,#0x14
000158  2000              MOVS     r0,#0
00015a  f7fffffe          BL       SSD1306_GotoXY
;;;354    				SSD1306_Puts ("LED1:ON ", &Font_7x10, SSD1306_COLOR_WHITE);
00015e  2201              MOVS     r2,#1
000160  49b7              LDR      r1,|L1.1088|
000162  a0b8              ADR      r0,|L1.1092|
000164  f7fffffe          BL       SSD1306_Puts
;;;355    				SSD1306_UpdateScreen();
000168  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.364|
;;;356    			}
;;;357    			if(strcmp(data[1],"LED1_OFF") == 0 || strcmp(data[2],"LED1_OFF") == 0 || strcmp(data[3],"LED1_OFF") == 0 
00016c  49af              LDR      r1,|L1.1068|
00016e  6848              LDR      r0,[r1,#4]  ; data
000170  a1b7              ADR      r1,|L1.1104|
000172  f7fffffe          BL       strcmp
000176  b1e8              CBZ      r0,|L1.436|
000178  49ac              LDR      r1,|L1.1068|
00017a  6888              LDR      r0,[r1,#8]  ; data
00017c  a1b4              ADR      r1,|L1.1104|
00017e  f7fffffe          BL       strcmp
000182  b1b8              CBZ      r0,|L1.436|
000184  49a9              LDR      r1,|L1.1068|
000186  68c8              LDR      r0,[r1,#0xc]  ; data
000188  a1b1              ADR      r1,|L1.1104|
00018a  f7fffffe          BL       strcmp
00018e  b188              CBZ      r0,|L1.436|
;;;358    			|| strcmp(data[4],"LED1_OFF") == 0 || strcmp(data[5],"LED1_OFF") == 0 || strcmp(data[6],"LED1_OFF") == 0 )
000190  49a6              LDR      r1,|L1.1068|
000192  6908              LDR      r0,[r1,#0x10]  ; data
000194  a1ae              ADR      r1,|L1.1104|
000196  f7fffffe          BL       strcmp
00019a  b158              CBZ      r0,|L1.436|
00019c  49a3              LDR      r1,|L1.1068|
00019e  6948              LDR      r0,[r1,#0x14]  ; data
0001a0  a1ab              ADR      r1,|L1.1104|
0001a2  f7fffffe          BL       strcmp
0001a6  b128              CBZ      r0,|L1.436|
0001a8  49a0              LDR      r1,|L1.1068|
0001aa  6988              LDR      r0,[r1,#0x18]  ; data
0001ac  a1a8              ADR      r1,|L1.1104|
0001ae  f7fffffe          BL       strcmp
0001b2  b960              CBNZ     r0,|L1.462|
                  |L1.436|
;;;359    			{
;;;360    				B0_OUT = 0;
0001b4  2000              MOVS     r0,#0
0001b6  49a1              LDR      r1,|L1.1084|
0001b8  6008              STR      r0,[r1,#0]
;;;361    				SSD1306_GotoXY (0, 20);
0001ba  2114              MOVS     r1,#0x14
0001bc  f7fffffe          BL       SSD1306_GotoXY
;;;362    				SSD1306_Puts ("LED1:OFF", &Font_7x10, SSD1306_COLOR_WHITE);				
0001c0  2201              MOVS     r2,#1
0001c2  499f              LDR      r1,|L1.1088|
0001c4  a0a5              ADR      r0,|L1.1116|
0001c6  f7fffffe          BL       SSD1306_Puts
;;;363    				SSD1306_UpdateScreen();
0001ca  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.462|
;;;364    			}
;;;365    			// LED2
;;;366    			if(strcmp(data[1],"LED2_ON") == 0 || strcmp(data[2],"LED2_ON") == 0 || strcmp(data[3],"LED2_ON") == 0 
0001ce  4997              LDR      r1,|L1.1068|
0001d0  6848              LDR      r0,[r1,#4]  ; data
0001d2  a1a5              ADR      r1,|L1.1128|
0001d4  f7fffffe          BL       strcmp
0001d8  b1e8              CBZ      r0,|L1.534|
0001da  4994              LDR      r1,|L1.1068|
0001dc  6888              LDR      r0,[r1,#8]  ; data
0001de  a1a2              ADR      r1,|L1.1128|
0001e0  f7fffffe          BL       strcmp
0001e4  b1b8              CBZ      r0,|L1.534|
0001e6  4991              LDR      r1,|L1.1068|
0001e8  68c8              LDR      r0,[r1,#0xc]  ; data
0001ea  a19f              ADR      r1,|L1.1128|
0001ec  f7fffffe          BL       strcmp
0001f0  b188              CBZ      r0,|L1.534|
;;;367    			|| strcmp(data[4],"LED2_ON") == 0 || strcmp(data[5],"LED2_ON") == 0 || strcmp(data[6],"LED2_ON") == 0 )
0001f2  498e              LDR      r1,|L1.1068|
0001f4  6908              LDR      r0,[r1,#0x10]  ; data
0001f6  a19c              ADR      r1,|L1.1128|
0001f8  f7fffffe          BL       strcmp
0001fc  b158              CBZ      r0,|L1.534|
0001fe  498b              LDR      r1,|L1.1068|
000200  6948              LDR      r0,[r1,#0x14]  ; data
000202  a199              ADR      r1,|L1.1128|
000204  f7fffffe          BL       strcmp
000208  b128              CBZ      r0,|L1.534|
00020a  4988              LDR      r1,|L1.1068|
00020c  6988              LDR      r0,[r1,#0x18]  ; data
00020e  a196              ADR      r1,|L1.1128|
000210  f7fffffe          BL       strcmp
000214  b970              CBNZ     r0,|L1.564|
                  |L1.534|
;;;368    			{
;;;369    				B7_OUT = 1;
000216  2001              MOVS     r0,#1
000218  4988              LDR      r1,|L1.1084|
00021a  311c              ADDS     r1,r1,#0x1c
00021c  6008              STR      r0,[r1,#0]
;;;370    				SSD1306_GotoXY (0, 30);
00021e  211e              MOVS     r1,#0x1e
000220  2000              MOVS     r0,#0
000222  f7fffffe          BL       SSD1306_GotoXY
;;;371    				SSD1306_Puts ("LED2:ON ", &Font_7x10, SSD1306_COLOR_WHITE);
000226  2201              MOVS     r2,#1
000228  4985              LDR      r1,|L1.1088|
00022a  a091              ADR      r0,|L1.1136|
00022c  f7fffffe          BL       SSD1306_Puts
;;;372    				SSD1306_UpdateScreen();
000230  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.564|
;;;373    			}
;;;374    			if(strcmp(data[1],"LED2_OFF") == 0 || strcmp(data[2],"LED2_OFF") == 0 || strcmp(data[3],"LED2_OFF") == 0 
000234  497d              LDR      r1,|L1.1068|
000236  6848              LDR      r0,[r1,#4]  ; data
000238  a190              ADR      r1,|L1.1148|
00023a  f7fffffe          BL       strcmp
00023e  b1e8              CBZ      r0,|L1.636|
000240  497a              LDR      r1,|L1.1068|
000242  6888              LDR      r0,[r1,#8]  ; data
000244  a18d              ADR      r1,|L1.1148|
000246  f7fffffe          BL       strcmp
00024a  b1b8              CBZ      r0,|L1.636|
00024c  4977              LDR      r1,|L1.1068|
00024e  68c8              LDR      r0,[r1,#0xc]  ; data
000250  a18a              ADR      r1,|L1.1148|
000252  f7fffffe          BL       strcmp
000256  b188              CBZ      r0,|L1.636|
;;;375    			|| strcmp(data[4],"LED2_OFF") == 0 || strcmp(data[5],"LED2_OFF") == 0 || strcmp(data[6],"LED2_OFF") == 0 )
000258  4974              LDR      r1,|L1.1068|
00025a  6908              LDR      r0,[r1,#0x10]  ; data
00025c  a187              ADR      r1,|L1.1148|
00025e  f7fffffe          BL       strcmp
000262  b158              CBZ      r0,|L1.636|
000264  4971              LDR      r1,|L1.1068|
000266  6948              LDR      r0,[r1,#0x14]  ; data
000268  a184              ADR      r1,|L1.1148|
00026a  f7fffffe          BL       strcmp
00026e  b128              CBZ      r0,|L1.636|
000270  496e              LDR      r1,|L1.1068|
000272  6988              LDR      r0,[r1,#0x18]  ; data
000274  a181              ADR      r1,|L1.1148|
000276  f7fffffe          BL       strcmp
00027a  b968              CBNZ     r0,|L1.664|
                  |L1.636|
;;;376    			{
;;;377    				B7_OUT = 0;
00027c  2000              MOVS     r0,#0
00027e  496f              LDR      r1,|L1.1084|
000280  311c              ADDS     r1,r1,#0x1c
000282  6008              STR      r0,[r1,#0]
;;;378    				SSD1306_GotoXY (0, 30);
000284  211e              MOVS     r1,#0x1e
000286  f7fffffe          BL       SSD1306_GotoXY
;;;379    				SSD1306_Puts ("LED2:OFF", &Font_7x10, SSD1306_COLOR_WHITE);
00028a  2201              MOVS     r2,#1
00028c  496c              LDR      r1,|L1.1088|
00028e  a07e              ADR      r0,|L1.1160|
000290  f7fffffe          BL       SSD1306_Puts
;;;380    				SSD1306_UpdateScreen();
000294  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.664|
;;;381    
;;;382    			}
;;;383    			// LED 3
;;;384    			if(strcmp(data[1],"LED3_ON") == 0 || strcmp(data[2],"LED3_ON") == 0 || strcmp(data[3],"LED3_ON") == 0 
000298  4964              LDR      r1,|L1.1068|
00029a  6848              LDR      r0,[r1,#4]  ; data
00029c  a17d              ADR      r1,|L1.1172|
00029e  f7fffffe          BL       strcmp
0002a2  b1e8              CBZ      r0,|L1.736|
0002a4  4961              LDR      r1,|L1.1068|
0002a6  6888              LDR      r0,[r1,#8]  ; data
0002a8  a17a              ADR      r1,|L1.1172|
0002aa  f7fffffe          BL       strcmp
0002ae  b1b8              CBZ      r0,|L1.736|
0002b0  495e              LDR      r1,|L1.1068|
0002b2  68c8              LDR      r0,[r1,#0xc]  ; data
0002b4  a177              ADR      r1,|L1.1172|
0002b6  f7fffffe          BL       strcmp
0002ba  b188              CBZ      r0,|L1.736|
;;;385    			|| strcmp(data[4],"LED3_ON") == 0 || strcmp(data[5],"LED3_ON") == 0 || strcmp(data[6],"LED3_ON") == 0 )
0002bc  495b              LDR      r1,|L1.1068|
0002be  6908              LDR      r0,[r1,#0x10]  ; data
0002c0  a174              ADR      r1,|L1.1172|
0002c2  f7fffffe          BL       strcmp
0002c6  b158              CBZ      r0,|L1.736|
0002c8  4958              LDR      r1,|L1.1068|
0002ca  6948              LDR      r0,[r1,#0x14]  ; data
0002cc  a171              ADR      r1,|L1.1172|
0002ce  f7fffffe          BL       strcmp
0002d2  b128              CBZ      r0,|L1.736|
0002d4  4955              LDR      r1,|L1.1068|
0002d6  6988              LDR      r0,[r1,#0x18]  ; data
0002d8  a16e              ADR      r1,|L1.1172|
0002da  f7fffffe          BL       strcmp
0002de  b970              CBNZ     r0,|L1.766|
                  |L1.736|
;;;386    			{
;;;387    				B14_OUT = 1;
0002e0  2001              MOVS     r0,#1
0002e2  4956              LDR      r1,|L1.1084|
0002e4  3138              ADDS     r1,r1,#0x38
0002e6  6008              STR      r0,[r1,#0]
;;;388    				SSD1306_GotoXY (0, 40);
0002e8  2128              MOVS     r1,#0x28
0002ea  2000              MOVS     r0,#0
0002ec  f7fffffe          BL       SSD1306_GotoXY
;;;389    				SSD1306_Puts ("LED3:ON ", &Font_7x10, SSD1306_COLOR_WHITE);
0002f0  2201              MOVS     r2,#1
0002f2  4953              LDR      r1,|L1.1088|
0002f4  a069              ADR      r0,|L1.1180|
0002f6  f7fffffe          BL       SSD1306_Puts
;;;390    				SSD1306_UpdateScreen();
0002fa  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.766|
;;;391    			}
;;;392    			if(strcmp(data[1],"LED3_OFF") == 0 || strcmp(data[2],"LED3_OFF") == 0 || strcmp(data[3],"LED3_OFF") == 0 
0002fe  494b              LDR      r1,|L1.1068|
000300  6848              LDR      r0,[r1,#4]  ; data
000302  a169              ADR      r1,|L1.1192|
000304  f7fffffe          BL       strcmp
000308  b1e8              CBZ      r0,|L1.838|
00030a  4948              LDR      r1,|L1.1068|
00030c  6888              LDR      r0,[r1,#8]  ; data
00030e  a166              ADR      r1,|L1.1192|
000310  f7fffffe          BL       strcmp
000314  b1b8              CBZ      r0,|L1.838|
000316  4945              LDR      r1,|L1.1068|
000318  68c8              LDR      r0,[r1,#0xc]  ; data
00031a  a163              ADR      r1,|L1.1192|
00031c  f7fffffe          BL       strcmp
000320  b188              CBZ      r0,|L1.838|
;;;393    			|| strcmp(data[4],"LED3_OFF") == 0 || strcmp(data[5],"LED3_OFF") == 0 || strcmp(data[6],"LED3_OFF") == 0 )
000322  4942              LDR      r1,|L1.1068|
000324  6908              LDR      r0,[r1,#0x10]  ; data
000326  a160              ADR      r1,|L1.1192|
000328  f7fffffe          BL       strcmp
00032c  b158              CBZ      r0,|L1.838|
00032e  493f              LDR      r1,|L1.1068|
000330  6948              LDR      r0,[r1,#0x14]  ; data
000332  a15d              ADR      r1,|L1.1192|
000334  f7fffffe          BL       strcmp
000338  b128              CBZ      r0,|L1.838|
00033a  493c              LDR      r1,|L1.1068|
00033c  6988              LDR      r0,[r1,#0x18]  ; data
00033e  a15a              ADR      r1,|L1.1192|
000340  f7fffffe          BL       strcmp
000344  b968              CBNZ     r0,|L1.866|
                  |L1.838|
;;;394    			{
;;;395    				B14_OUT = 0;
000346  2000              MOVS     r0,#0
000348  493c              LDR      r1,|L1.1084|
00034a  3138              ADDS     r1,r1,#0x38
00034c  6008              STR      r0,[r1,#0]
;;;396    				SSD1306_GotoXY (0, 40);
00034e  2128              MOVS     r1,#0x28
000350  f7fffffe          BL       SSD1306_GotoXY
;;;397    				SSD1306_Puts ("LED3:OFF", &Font_7x10, SSD1306_COLOR_WHITE);
000354  2201              MOVS     r2,#1
000356  493a              LDR      r1,|L1.1088|
000358  a056              ADR      r0,|L1.1204|
00035a  f7fffffe          BL       SSD1306_Puts
;;;398    				SSD1306_UpdateScreen();
00035e  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.866|
;;;399    			}
;;;400    			// LED 4
;;;401    			if(strcmp(data[1],"LED4_ON") == 0 || strcmp(data[2],"LED4_ON") == 0 || strcmp(data[3],"LED4_ON") == 0 
000362  4932              LDR      r1,|L1.1068|
000364  6848              LDR      r0,[r1,#4]  ; data
000366  a156              ADR      r1,|L1.1216|
000368  f7fffffe          BL       strcmp
00036c  b1e8              CBZ      r0,|L1.938|
00036e  492f              LDR      r1,|L1.1068|
000370  6888              LDR      r0,[r1,#8]  ; data
000372  a153              ADR      r1,|L1.1216|
000374  f7fffffe          BL       strcmp
000378  b1b8              CBZ      r0,|L1.938|
00037a  492c              LDR      r1,|L1.1068|
00037c  68c8              LDR      r0,[r1,#0xc]  ; data
00037e  a150              ADR      r1,|L1.1216|
000380  f7fffffe          BL       strcmp
000384  b188              CBZ      r0,|L1.938|
;;;402    			|| strcmp(data[4],"LED4_ON") == 0 || strcmp(data[5],"LED4_ON") == 0 || strcmp(data[6],"LED4_ON") == 0 )
000386  4929              LDR      r1,|L1.1068|
000388  6908              LDR      r0,[r1,#0x10]  ; data
00038a  a14d              ADR      r1,|L1.1216|
00038c  f7fffffe          BL       strcmp
000390  b158              CBZ      r0,|L1.938|
000392  4926              LDR      r1,|L1.1068|
000394  6948              LDR      r0,[r1,#0x14]  ; data
000396  a14a              ADR      r1,|L1.1216|
000398  f7fffffe          BL       strcmp
00039c  b128              CBZ      r0,|L1.938|
00039e  4923              LDR      r1,|L1.1068|
0003a0  6988              LDR      r0,[r1,#0x18]  ; data
0003a2  a147              ADR      r1,|L1.1216|
0003a4  f7fffffe          BL       strcmp
0003a8  b970              CBNZ     r0,|L1.968|
                  |L1.938|
;;;403    			{
;;;404    				B1_OUT = 1;
0003aa  2001              MOVS     r0,#1
0003ac  4923              LDR      r1,|L1.1084|
0003ae  1d09              ADDS     r1,r1,#4
0003b0  6008              STR      r0,[r1,#0]
;;;405    				SSD1306_GotoXY (60, 20);
0003b2  2114              MOVS     r1,#0x14
0003b4  203c              MOVS     r0,#0x3c
0003b6  f7fffffe          BL       SSD1306_GotoXY
;;;406    				SSD1306_Puts ("LED4:ON ", &Font_7x10, SSD1306_COLOR_WHITE);
0003ba  2201              MOVS     r2,#1
0003bc  4920              LDR      r1,|L1.1088|
0003be  a042              ADR      r0,|L1.1224|
0003c0  f7fffffe          BL       SSD1306_Puts
;;;407    				SSD1306_UpdateScreen();
0003c4  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.968|
;;;408    			}
;;;409    			if(strcmp(data[1],"LED4_OFF") == 0 || strcmp(data[2],"LED4_OFF") == 0 || strcmp(data[3],"LED4_OFF") == 0 
0003c8  4918              LDR      r1,|L1.1068|
0003ca  6848              LDR      r0,[r1,#4]  ; data
0003cc  a141              ADR      r1,|L1.1236|
0003ce  f7fffffe          BL       strcmp
0003d2  b1b8              CBZ      r0,|L1.1028|
0003d4  4915              LDR      r1,|L1.1068|
0003d6  6888              LDR      r0,[r1,#8]  ; data
0003d8  a13e              ADR      r1,|L1.1236|
0003da  f7fffffe          BL       strcmp
0003de  b188              CBZ      r0,|L1.1028|
0003e0  4912              LDR      r1,|L1.1068|
0003e2  68c8              LDR      r0,[r1,#0xc]  ; data
0003e4  a13b              ADR      r1,|L1.1236|
0003e6  f7fffffe          BL       strcmp
0003ea  b158              CBZ      r0,|L1.1028|
;;;410    			|| strcmp(data[4],"LED4_OFF") == 0 || strcmp(data[5],"LED4_OFF") == 0 || strcmp(data[6],"LED4_OFF") == 0 )
0003ec  490f              LDR      r1,|L1.1068|
0003ee  6908              LDR      r0,[r1,#0x10]  ; data
0003f0  a138              ADR      r1,|L1.1236|
0003f2  f7fffffe          BL       strcmp
0003f6  b128              CBZ      r0,|L1.1028|
0003f8  490c              LDR      r1,|L1.1068|
0003fa  6948              LDR      r0,[r1,#0x14]  ; data
0003fc  a135              ADR      r1,|L1.1236|
0003fe  f7fffffe          BL       strcmp
000402  e06d              B        |L1.1248|
                  |L1.1028|
000404  e074              B        |L1.1264|
000406  0000              DCW      0x0000
                  |L1.1032|
                          DCD      0x40004400
                  |L1.1036|
                          DCD      Rx_indx
                  |L1.1040|
                          DCD      Rx_data
                  |L1.1044|
000414  0a455252          DCB      "\nERROR_BUFFER",0
000418  4f525f42
00041c  55464645
000420  5200    
000422  00                DCB      0
000423  00                DCB      0
                  |L1.1060|
000424  2b0d0a00          DCB      "+\r\n",0
                  |L1.1064|
000428  2b00              DCB      "+",0
00042a  00                DCB      0
00042b  00                DCB      0
                  |L1.1068|
                          DCD      data
                  |L1.1072|
000430  25730a00          DCB      "%s\n",0
                  |L1.1076|
000434  4c454431          DCB      "LED1_ON",0
000438  5f4f4e00
                  |L1.1084|
                          DCD      0x42408280
                  |L1.1088|
                          DCD      Font_7x10
                  |L1.1092|
000444  4c454431          DCB      "LED1:ON ",0
000448  3a4f4e20
00044c  00      
00044d  00                DCB      0
00044e  00                DCB      0
00044f  00                DCB      0
                  |L1.1104|
000450  4c454431          DCB      "LED1_OFF",0
000454  5f4f4646
000458  00      
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L1.1116|
00045c  4c454431          DCB      "LED1:OFF",0
000460  3a4f4646
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L1.1128|
000468  4c454432          DCB      "LED2_ON",0
00046c  5f4f4e00
                  |L1.1136|
000470  4c454432          DCB      "LED2:ON ",0
000474  3a4f4e20
000478  00      
000479  00                DCB      0
00047a  00                DCB      0
00047b  00                DCB      0
                  |L1.1148|
00047c  4c454432          DCB      "LED2_OFF",0
000480  5f4f4646
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  4c454432          DCB      "LED2:OFF",0
00048c  3a4f4646
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
                  |L1.1172|
000494  4c454433          DCB      "LED3_ON",0
000498  5f4f4e00
                  |L1.1180|
00049c  4c454433          DCB      "LED3:ON ",0
0004a0  3a4f4e20
0004a4  00      
0004a5  00                DCB      0
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  4c454433          DCB      "LED3_OFF",0
0004ac  5f4f4646
0004b0  00      
0004b1  00                DCB      0
0004b2  00                DCB      0
0004b3  00                DCB      0
                  |L1.1204|
0004b4  4c454433          DCB      "LED3:OFF",0
0004b8  3a4f4646
0004bc  00      
0004bd  00                DCB      0
0004be  00                DCB      0
0004bf  00                DCB      0
                  |L1.1216|
0004c0  4c454434          DCB      "LED4_ON",0
0004c4  5f4f4e00
                  |L1.1224|
0004c8  4c454434          DCB      "LED4:ON ",0
0004cc  3a4f4e20
0004d0  00      
0004d1  00                DCB      0
0004d2  00                DCB      0
0004d3  00                DCB      0
                  |L1.1236|
0004d4  4c454434          DCB      "LED4_OFF",0
0004d8  5f4f4646
0004dc  00      
0004dd  00                DCB      0
0004de  00                DCB      0
0004df  00                DCB      0
                  |L1.1248|
0004e0  b130              CBZ      r0,|L1.1264|
0004e2  496f              LDR      r1,|L1.1696|
0004e4  6988              LDR      r0,[r1,#0x18]  ; data
0004e6  f2af0114          ADR      r1,|L1.1236|
0004ea  f7fffffe          BL       strcmp
0004ee  b968              CBNZ     r0,|L1.1292|
                  |L1.1264|
;;;411    			{
;;;412    				B1_OUT = 0;
0004f0  2000              MOVS     r0,#0
0004f2  496c              LDR      r1,|L1.1700|
0004f4  6008              STR      r0,[r1,#0]
;;;413    				SSD1306_GotoXY (60, 20);
0004f6  2114              MOVS     r1,#0x14
0004f8  203c              MOVS     r0,#0x3c
0004fa  f7fffffe          BL       SSD1306_GotoXY
;;;414    				SSD1306_Puts ("LED4:OFF", &Font_7x10, SSD1306_COLOR_WHITE);							
0004fe  2201              MOVS     r2,#1
000500  4969              LDR      r1,|L1.1704|
000502  a06a              ADR      r0,|L1.1708|
000504  f7fffffe          BL       SSD1306_Puts
;;;415    				SSD1306_UpdateScreen();
000508  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.1292|
;;;416    			}
;;;417    			// LED 5
;;;418    			if(strcmp(data[1],"LED5_ON") == 0 || strcmp(data[2],"LED5_ON") == 0 || strcmp(data[3],"LED5_ON") == 0 
00050c  4964              LDR      r1,|L1.1696|
00050e  6848              LDR      r0,[r1,#4]  ; data
000510  a169              ADR      r1,|L1.1720|
000512  f7fffffe          BL       strcmp
000516  b1e8              CBZ      r0,|L1.1364|
000518  4961              LDR      r1,|L1.1696|
00051a  6888              LDR      r0,[r1,#8]  ; data
00051c  a166              ADR      r1,|L1.1720|
00051e  f7fffffe          BL       strcmp
000522  b1b8              CBZ      r0,|L1.1364|
000524  495e              LDR      r1,|L1.1696|
000526  68c8              LDR      r0,[r1,#0xc]  ; data
000528  a163              ADR      r1,|L1.1720|
00052a  f7fffffe          BL       strcmp
00052e  b188              CBZ      r0,|L1.1364|
;;;419    			|| strcmp(data[4],"LED5_ON") == 0 || strcmp(data[5],"LED5_ON") == 0 || strcmp(data[6],"LED5_ON") == 0 )
000530  495b              LDR      r1,|L1.1696|
000532  6908              LDR      r0,[r1,#0x10]  ; data
000534  a160              ADR      r1,|L1.1720|
000536  f7fffffe          BL       strcmp
00053a  b158              CBZ      r0,|L1.1364|
00053c  4958              LDR      r1,|L1.1696|
00053e  6948              LDR      r0,[r1,#0x14]  ; data
000540  a15d              ADR      r1,|L1.1720|
000542  f7fffffe          BL       strcmp
000546  b128              CBZ      r0,|L1.1364|
000548  4955              LDR      r1,|L1.1696|
00054a  6988              LDR      r0,[r1,#0x18]  ; data
00054c  a15a              ADR      r1,|L1.1720|
00054e  f7fffffe          BL       strcmp
000552  b968              CBNZ     r0,|L1.1392|
                  |L1.1364|
;;;420    			{
;;;421    				B1_OUT = 1;
000554  2001              MOVS     r0,#1
000556  4953              LDR      r1,|L1.1700|
000558  6008              STR      r0,[r1,#0]
;;;422    				SSD1306_GotoXY (60, 30);
00055a  211e              MOVS     r1,#0x1e
00055c  203c              MOVS     r0,#0x3c
00055e  f7fffffe          BL       SSD1306_GotoXY
;;;423    				SSD1306_Puts ("LED5:ON ", &Font_7x10, SSD1306_COLOR_WHITE);							
000562  2201              MOVS     r2,#1
000564  4950              LDR      r1,|L1.1704|
000566  a056              ADR      r0,|L1.1728|
000568  f7fffffe          BL       SSD1306_Puts
;;;424    				SSD1306_UpdateScreen();
00056c  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.1392|
;;;425    			}
;;;426    			if(strcmp(data[1],"LED5_OFF") == 0 || strcmp(data[2],"LED5_OFF") == 0 || strcmp(data[3],"LED5_OFF") == 0 
000570  494b              LDR      r1,|L1.1696|
000572  6848              LDR      r0,[r1,#4]  ; data
000574  a155              ADR      r1,|L1.1740|
000576  f7fffffe          BL       strcmp
00057a  b1e8              CBZ      r0,|L1.1464|
00057c  4948              LDR      r1,|L1.1696|
00057e  6888              LDR      r0,[r1,#8]  ; data
000580  a152              ADR      r1,|L1.1740|
000582  f7fffffe          BL       strcmp
000586  b1b8              CBZ      r0,|L1.1464|
000588  4945              LDR      r1,|L1.1696|
00058a  68c8              LDR      r0,[r1,#0xc]  ; data
00058c  a14f              ADR      r1,|L1.1740|
00058e  f7fffffe          BL       strcmp
000592  b188              CBZ      r0,|L1.1464|
;;;427    			|| strcmp(data[4],"LED5_OFF") == 0 || strcmp(data[5],"LED5_OFF") == 0 || strcmp(data[6],"LED5_OFF") == 0 )
000594  4942              LDR      r1,|L1.1696|
000596  6908              LDR      r0,[r1,#0x10]  ; data
000598  a14c              ADR      r1,|L1.1740|
00059a  f7fffffe          BL       strcmp
00059e  b158              CBZ      r0,|L1.1464|
0005a0  493f              LDR      r1,|L1.1696|
0005a2  6948              LDR      r0,[r1,#0x14]  ; data
0005a4  a149              ADR      r1,|L1.1740|
0005a6  f7fffffe          BL       strcmp
0005aa  b128              CBZ      r0,|L1.1464|
0005ac  493c              LDR      r1,|L1.1696|
0005ae  6988              LDR      r0,[r1,#0x18]  ; data
0005b0  a146              ADR      r1,|L1.1740|
0005b2  f7fffffe          BL       strcmp
0005b6  b968              CBNZ     r0,|L1.1492|
                  |L1.1464|
;;;428    			{
;;;429    				B1_OUT = 0;
0005b8  2000              MOVS     r0,#0
0005ba  493a              LDR      r1,|L1.1700|
0005bc  6008              STR      r0,[r1,#0]
;;;430    				SSD1306_GotoXY (60, 30);
0005be  211e              MOVS     r1,#0x1e
0005c0  203c              MOVS     r0,#0x3c
0005c2  f7fffffe          BL       SSD1306_GotoXY
;;;431    				SSD1306_Puts ("LED5:OFF", &Font_7x10, SSD1306_COLOR_WHITE);							
0005c6  2201              MOVS     r2,#1
0005c8  4937              LDR      r1,|L1.1704|
0005ca  a043              ADR      r0,|L1.1752|
0005cc  f7fffffe          BL       SSD1306_Puts
;;;432    				SSD1306_UpdateScreen();	
0005d0  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.1492|
;;;433    			}
;;;434    			// LED 6
;;;435    			if(strcmp(data[1],"LED6_ON") == 0 || strcmp(data[2],"LED6_ON") == 0 || strcmp(data[3],"LED6_ON") == 0 
0005d4  4932              LDR      r1,|L1.1696|
0005d6  6848              LDR      r0,[r1,#4]  ; data
0005d8  a142              ADR      r1,|L1.1764|
0005da  f7fffffe          BL       strcmp
0005de  b1e8              CBZ      r0,|L1.1564|
0005e0  492f              LDR      r1,|L1.1696|
0005e2  6888              LDR      r0,[r1,#8]  ; data
0005e4  a13f              ADR      r1,|L1.1764|
0005e6  f7fffffe          BL       strcmp
0005ea  b1b8              CBZ      r0,|L1.1564|
0005ec  492c              LDR      r1,|L1.1696|
0005ee  68c8              LDR      r0,[r1,#0xc]  ; data
0005f0  a13c              ADR      r1,|L1.1764|
0005f2  f7fffffe          BL       strcmp
0005f6  b188              CBZ      r0,|L1.1564|
;;;436    			|| strcmp(data[4],"LED6_ON") == 0 || strcmp(data[5],"LED6_ON") == 0 || strcmp(data[6],"LED6_ON") == 0 )
0005f8  4929              LDR      r1,|L1.1696|
0005fa  6908              LDR      r0,[r1,#0x10]  ; data
0005fc  a139              ADR      r1,|L1.1764|
0005fe  f7fffffe          BL       strcmp
000602  b158              CBZ      r0,|L1.1564|
000604  4926              LDR      r1,|L1.1696|
000606  6948              LDR      r0,[r1,#0x14]  ; data
000608  a136              ADR      r1,|L1.1764|
00060a  f7fffffe          BL       strcmp
00060e  b128              CBZ      r0,|L1.1564|
000610  4923              LDR      r1,|L1.1696|
000612  6988              LDR      r0,[r1,#0x18]  ; data
000614  a133              ADR      r1,|L1.1764|
000616  f7fffffe          BL       strcmp
00061a  b968              CBNZ     r0,|L1.1592|
                  |L1.1564|
;;;437    			{
;;;438    				B1_OUT = 1;
00061c  2001              MOVS     r0,#1
00061e  4921              LDR      r1,|L1.1700|
000620  6008              STR      r0,[r1,#0]
;;;439    				SSD1306_GotoXY (60, 40);
000622  2128              MOVS     r1,#0x28
000624  203c              MOVS     r0,#0x3c
000626  f7fffffe          BL       SSD1306_GotoXY
;;;440    				SSD1306_Puts ("LED6:ON ", &Font_7x10, SSD1306_COLOR_WHITE);						
00062a  2201              MOVS     r2,#1
00062c  491e              LDR      r1,|L1.1704|
00062e  a02f              ADR      r0,|L1.1772|
000630  f7fffffe          BL       SSD1306_Puts
;;;441    				SSD1306_UpdateScreen();
000634  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.1592|
;;;442    			}
;;;443    			if(strcmp(data[1],"LED6_OFF") == 0 || strcmp(data[2],"LED6_OFF") == 0 || strcmp(data[3],"LED6_OFF") == 0 
000638  4919              LDR      r1,|L1.1696|
00063a  6848              LDR      r0,[r1,#4]  ; data
00063c  a12e              ADR      r1,|L1.1784|
00063e  f7fffffe          BL       strcmp
000642  b1e8              CBZ      r0,|L1.1664|
000644  4916              LDR      r1,|L1.1696|
000646  6888              LDR      r0,[r1,#8]  ; data
000648  a12b              ADR      r1,|L1.1784|
00064a  f7fffffe          BL       strcmp
00064e  b1b8              CBZ      r0,|L1.1664|
000650  4913              LDR      r1,|L1.1696|
000652  68c8              LDR      r0,[r1,#0xc]  ; data
000654  a128              ADR      r1,|L1.1784|
000656  f7fffffe          BL       strcmp
00065a  b188              CBZ      r0,|L1.1664|
;;;444    			|| strcmp(data[4],"LED6_OFF") == 0 || strcmp(data[5],"LED6_OFF") == 0 || strcmp(data[6],"LED6_OFF") == 0 )
00065c  4910              LDR      r1,|L1.1696|
00065e  6908              LDR      r0,[r1,#0x10]  ; data
000660  a125              ADR      r1,|L1.1784|
000662  f7fffffe          BL       strcmp
000666  b158              CBZ      r0,|L1.1664|
000668  490d              LDR      r1,|L1.1696|
00066a  6948              LDR      r0,[r1,#0x14]  ; data
00066c  a122              ADR      r1,|L1.1784|
00066e  f7fffffe          BL       strcmp
000672  b128              CBZ      r0,|L1.1664|
000674  490a              LDR      r1,|L1.1696|
000676  6988              LDR      r0,[r1,#0x18]  ; data
000678  a11f              ADR      r1,|L1.1784|
00067a  f7fffffe          BL       strcmp
00067e  b968              CBNZ     r0,|L1.1692|
                  |L1.1664|
;;;445    			{
;;;446    				B1_OUT = 0;
000680  2000              MOVS     r0,#0
000682  4908              LDR      r1,|L1.1700|
000684  6008              STR      r0,[r1,#0]
;;;447    				SSD1306_GotoXY (60, 40);
000686  2128              MOVS     r1,#0x28
000688  203c              MOVS     r0,#0x3c
00068a  f7fffffe          BL       SSD1306_GotoXY
;;;448    				SSD1306_Puts ("LED6:OFF", &Font_7x10, SSD1306_COLOR_WHITE);		
00068e  2201              MOVS     r2,#1
000690  4905              LDR      r1,|L1.1704|
000692  a01c              ADR      r0,|L1.1796|
000694  f7fffffe          BL       SSD1306_Puts
;;;449    				SSD1306_UpdateScreen();							
000698  f7fffffe          BL       SSD1306_UpdateScreen
                  |L1.1692|
;;;450    			}
;;;451    		}
;;;452    	}
;;;453    }
00069c  bd1c              POP      {r2-r4,pc}
;;;454    
                          ENDP

00069e  0000              DCW      0x0000
                  |L1.1696|
                          DCD      data
                  |L1.1700|
                          DCD      0x42408284
                  |L1.1704|
                          DCD      Font_7x10
                  |L1.1708|
0006ac  4c454434          DCB      "LED4:OFF",0
0006b0  3a4f4646
0006b4  00      
0006b5  00                DCB      0
0006b6  00                DCB      0
0006b7  00                DCB      0
                  |L1.1720|
0006b8  4c454435          DCB      "LED5_ON",0
0006bc  5f4f4e00
                  |L1.1728|
0006c0  4c454435          DCB      "LED5:ON ",0
0006c4  3a4f4e20
0006c8  00      
0006c9  00                DCB      0
0006ca  00                DCB      0
0006cb  00                DCB      0
                  |L1.1740|
0006cc  4c454435          DCB      "LED5_OFF",0
0006d0  5f4f4646
0006d4  00      
0006d5  00                DCB      0
0006d6  00                DCB      0
0006d7  00                DCB      0
                  |L1.1752|
0006d8  4c454435          DCB      "LED5:OFF",0
0006dc  3a4f4646
0006e0  00      
0006e1  00                DCB      0
0006e2  00                DCB      0
0006e3  00                DCB      0
                  |L1.1764|
0006e4  4c454436          DCB      "LED6_ON",0
0006e8  5f4f4e00
                  |L1.1772|
0006ec  4c454436          DCB      "LED6:ON ",0
0006f0  3a4f4e20
0006f4  00      
0006f5  00                DCB      0
0006f6  00                DCB      0
0006f7  00                DCB      0
                  |L1.1784|
0006f8  4c454436          DCB      "LED6_OFF",0
0006fc  5f4f4646
000700  00      
000701  00                DCB      0
000702  00                DCB      0
000703  00                DCB      0
                  |L1.1796|
000704  4c454436          DCB      "LED6:OFF",0
000708  3a4f4646
00070c  00      
00070d  00                DCB      0
00070e  00                DCB      0
00070f  00                DCB      0

                          AREA ||i.USART_Check_Buffer||, CODE, READONLY, ALIGN=2

                  USART_Check_Buffer PROC
;;;291    }
;;;292    uint8_t USART_Check_Buffer(USART_TypeDef* USARTx, char* Buff,uint8_t Size,char *data[])
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;293    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
;;;294    	u8 count = 0,z = 0;
00000c  f04f0900          MOV      r9,#0
000010  2600              MOVS     r6,#0
;;;295    	Buff[count++] = USARTx -> DR;
000012  88b8              LDRH     r0,[r7,#4]
000014  4649              MOV      r1,r9
000016  f1090901          ADD      r9,r9,#1
00001a  5460              STRB     r0,[r4,r1]
;;;296    	if (count ==0){ for( u8 i = 0; i < 255; ++i) {Buff[i] = 0;}}
00001c  f1b90f00          CMP      r9,#0
000020  d107              BNE      |L2.50|
000022  2000              MOVS     r0,#0
000024  e003              B        |L2.46|
                  |L2.38|
000026  2100              MOVS     r1,#0
000028  5421              STRB     r1,[r4,r0]
00002a  1c41              ADDS     r1,r0,#1
00002c  b2c8              UXTB     r0,r1
                  |L2.46|
00002e  28ff              CMP      r0,#0xff
000030  dbf9              BLT      |L2.38|
                  |L2.50|
;;;297    	if(strlen((const char*)Buff) >= Size)
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       strlen
000038  4540              CMP      r0,r8
00003a  d307              BCC      |L2.76|
;;;298    		{
;;;299    			Rx_indx = 0;
00003c  2000              MOVS     r0,#0
00003e  4912              LDR      r1,|L2.136|
000040  7008              STRB     r0,[r1,#0]
;;;300    			USART_Send_String (USART2,"\nERROR BUFFERSIZE\n");
000042  a112              ADR      r1,|L2.140|
000044  4816              LDR      r0,|L2.160|
000046  f7fffffe          BL       USART_Send_String
00004a  e01a              B        |L2.130|
                  |L2.76|
;;;301    		}
;;;302    	else if(strstr((const char*)Rx_data,"\r\n") != NULL)
00004c  a115              ADR      r1,|L2.164|
00004e  4816              LDR      r0,|L2.168|
000050  f7fffffe          BL       strstr
000054  b1a8              CBZ      r0,|L2.130|
;;;303    		{
;;;304    			data[z] = strtok((char*)Rx_data,"+\r\n");
000056  a115              ADR      r1,|L2.172|
000058  4813              LDR      r0,|L2.168|
00005a  f7fffffe          BL       strtok
00005e  f8450026          STR      r0,[r5,r6,LSL #2]
;;;305    			while (data[z] != NULL)
000062  e00a              B        |L2.122|
                  |L2.100|
;;;306    			{
;;;307    				data[++z] = strtok(NULL,"+");
000064  a112              ADR      r1,|L2.176|
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       strtok
00006c  1c71              ADDS     r1,r6,#1
00006e  b2c9              UXTB     r1,r1
000070  460e              MOV      r6,r1
000072  f8450021          STR      r0,[r5,r1,LSL #2]
;;;308    				count = 0;
000076  f04f0900          MOV      r9,#0
                  |L2.122|
00007a  f8550026          LDR      r0,[r5,r6,LSL #2]     ;305
00007e  2800              CMP      r0,#0                 ;305
000080  d1f0              BNE      |L2.100|
                  |L2.130|
;;;309    			}
;;;310    		}
;;;311    		return 0;
000082  2000              MOVS     r0,#0
;;;312    }
000084  e8bd87f0          POP      {r4-r10,pc}
;;;313    void USART2_IRQHandler(void)
                          ENDP

                  |L2.136|
                          DCD      Rx_indx
                  |L2.140|
00008c  0a455252          DCB      "\nERROR BUFFERSIZE\n",0
000090  4f522042
000094  55464645
000098  5253495a
00009c  450a00  
00009f  00                DCB      0
                  |L2.160|
                          DCD      0x40004400
                  |L2.164|
0000a4  0d0a00            DCB      "\r\n",0
0000a7  00                DCB      0
                  |L2.168|
                          DCD      Rx_data
                  |L2.172|
0000ac  2b0d0a00          DCB      "+\r\n",0
                  |L2.176|
0000b0  2b00              DCB      "+",0
0000b2  00                DCB      0
0000b3  00                DCB      0

                          AREA ||i.USART_ClearBuff||, CODE, READONLY, ALIGN=1

                  USART_ClearBuff PROC
;;;284    //}
;;;285    void USART_ClearBuff (USART_TypeDef* USARTx,volatile char *buff)
000000  4602              MOV      r2,r0
;;;286    {
;;;287    	for(uint8_t i = 0; i < 255; ++i)
000002  2000              MOVS     r0,#0
000004  e003              B        |L3.14|
                  |L3.6|
;;;288    	{
;;;289    		buff[i] = 0;
000006  2300              MOVS     r3,#0
000008  540b              STRB     r3,[r1,r0]
00000a  1c43              ADDS     r3,r0,#1              ;287
00000c  b2d8              UXTB     r0,r3                 ;287
                  |L3.14|
00000e  28ff              CMP      r0,#0xff              ;287
000010  dbf9              BLT      |L3.6|
;;;290    	}
;;;291    }
000012  4770              BX       lr
;;;292    uint8_t USART_Check_Buffer(USART_TypeDef* USARTx, char* Buff,uint8_t Size,char *data[])
                          ENDP


                          AREA ||i.USART_Initstruct||, CODE, READONLY, ALIGN=2

                  USART_Initstruct PROC
;;;2      
;;;3      void USART_Initstruct (USART_TypeDef* USARTx,						
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;4      											 uint8_t USART_Pin,
;;;5      											 uint32_t Buad_rate ,
;;;6      											 uint16_t USART_HFC,
;;;7      											 uint16_t Mode, 
;;;8      											 uint16_t Parity, 
;;;9      											 uint16_t Stop_Bit,
;;;10     										 	 uint16_t WLength)
;;;11     {
000004  b087              SUB      sp,sp,#0x1c
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
00000e  e9ddab11          LDRD     r10,r11,[sp,#0x44]
000012  f8dd9040          LDR      r9,[sp,#0x40]
;;;12     												 
;;;13     	NVIC_InitTypeDef NVIC_InitStructure;
;;;14     	GPIO_InitTypeDef GPIO_InitStructure;
;;;15     	USART_InitTypeDef USART_InitStructure;											 
;;;16     	uint32_t pin = USART_Pin;
000016  4634              MOV      r4,r6
;;;17     												 
;;;18     /* ------------------------- Config GPIO USART1 ------------------------- */
;;;19     	if(USARTx == USART1 && pin == USART_Pin){
000018  48fb              LDR      r0,|L4.1032|
00001a  4285              CMP      r5,r0
00001c  d14e              BNE      |L4.188|
00001e  42b4              CMP      r4,r6
000020  d14c              BNE      |L4.188|
;;;20     		if(pin == (USART1_Pin1)){
000022  2ca0              CMP      r4,#0xa0
000024  d124              BNE      |L4.112|
;;;21     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOA, ENABLE);
000026  2101              MOVS     r1,#1
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;22     			NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
00002e  2025              MOVS     r0,#0x25
000030  f88d0018          STRB     r0,[sp,#0x18]
;;;23     			
;;;24     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000034  2002              MOVS     r0,#2
000036  f88d0014          STRB     r0,[sp,#0x14]
;;;25     			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00003a  2000              MOVS     r0,#0
00003c  f88d0016          STRB     r0,[sp,#0x16]
;;;26     			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
000040  f44f60c0          MOV      r0,#0x600
000044  9004              STR      r0,[sp,#0x10]
;;;27     			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000046  2000              MOVS     r0,#0
000048  f88d0017          STRB     r0,[sp,#0x17]
;;;28     			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00004c  2002              MOVS     r0,#2
00004e  f88d0015          STRB     r0,[sp,#0x15]
;;;29     			GPIO_Init (GPIOA, &GPIO_InitStructure);
000052  a904              ADD      r1,sp,#0x10
000054  48ed              LDR      r0,|L4.1036|
000056  f7fffffe          BL       GPIO_Init
;;;30     			
;;;31     			GPIO_PinAFConfig  (GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
00005a  2207              MOVS     r2,#7
00005c  2109              MOVS     r1,#9
00005e  48eb              LDR      r0,|L4.1036|
000060  f7fffffe          BL       GPIO_PinAFConfig
;;;32     			GPIO_PinAFConfig  (GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
000064  2207              MOVS     r2,#7
000066  210a              MOVS     r1,#0xa
000068  48e8              LDR      r0,|L4.1036|
00006a  f7fffffe          BL       GPIO_PinAFConfig
                  |L4.110|
00006e  e1e7              B        |L4.1088|
                  |L4.112|
;;;33     		}else if ( pin == USART1_Pin2){
000070  2ca1              CMP      r4,#0xa1
000072  d1fc              BNE      |L4.110|
;;;34     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOB, ENABLE);
000074  2101              MOVS     r1,#1
000076  2002              MOVS     r0,#2
000078  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;35     			NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
00007c  2025              MOVS     r0,#0x25
00007e  f88d0018          STRB     r0,[sp,#0x18]
;;;36     
;;;37     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000082  2002              MOVS     r0,#2
000084  f88d0014          STRB     r0,[sp,#0x14]
;;;38     			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000088  2000              MOVS     r0,#0
00008a  f88d0016          STRB     r0,[sp,#0x16]
;;;39     			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
00008e  20c0              MOVS     r0,#0xc0
000090  9004              STR      r0,[sp,#0x10]
;;;40     			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000092  2000              MOVS     r0,#0
000094  f88d0017          STRB     r0,[sp,#0x17]
;;;41     			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000098  2002              MOVS     r0,#2
00009a  f88d0015          STRB     r0,[sp,#0x15]
;;;42     			GPIO_Init (GPIOB, &GPIO_InitStructure);
00009e  a904              ADD      r1,sp,#0x10
0000a0  48db              LDR      r0,|L4.1040|
0000a2  f7fffffe          BL       GPIO_Init
;;;43     			
;;;44     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
0000a6  2207              MOVS     r2,#7
0000a8  2106              MOVS     r1,#6
0000aa  48d9              LDR      r0,|L4.1040|
0000ac  f7fffffe          BL       GPIO_PinAFConfig
;;;45     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource7, GPIO_AF_USART1);			
0000b0  2207              MOVS     r2,#7
0000b2  4611              MOV      r1,r2
0000b4  48d6              LDR      r0,|L4.1040|
0000b6  f7fffffe          BL       GPIO_PinAFConfig
0000ba  e1c1              B        |L4.1088|
                  |L4.188|
;;;46     			
;;;47     		}
;;;48     	}
;;;49     /* ------------------------- Config GPIO USART2 ------------------------- */	
;;;50     	else if (USARTx == USART2 && pin == USART_Pin){
0000bc  48d5              LDR      r0,|L4.1044|
0000be  4285              CMP      r5,r0
0000c0  d14d              BNE      |L4.350|
0000c2  42b4              CMP      r4,r6
0000c4  d14b              BNE      |L4.350|
;;;51     		if(pin == (USART2_Pin1)){
0000c6  2ca2              CMP      r4,#0xa2
0000c8  d123              BNE      |L4.274|
;;;52     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOA, ENABLE);
0000ca  2101              MOVS     r1,#1
0000cc  4608              MOV      r0,r1
0000ce  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;53     			NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
0000d2  2026              MOVS     r0,#0x26
0000d4  f88d0018          STRB     r0,[sp,#0x18]
;;;54     
;;;55     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0000d8  2002              MOVS     r0,#2
0000da  f88d0014          STRB     r0,[sp,#0x14]
;;;56     			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
0000de  2000              MOVS     r0,#0
0000e0  f88d0016          STRB     r0,[sp,#0x16]
;;;57     			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
0000e4  200c              MOVS     r0,#0xc
0000e6  9004              STR      r0,[sp,#0x10]
;;;58     			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
0000e8  2000              MOVS     r0,#0
0000ea  f88d0017          STRB     r0,[sp,#0x17]
;;;59     			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000ee  2002              MOVS     r0,#2
0000f0  f88d0015          STRB     r0,[sp,#0x15]
;;;60     			GPIO_Init (GPIOA, &GPIO_InitStructure);
0000f4  a904              ADD      r1,sp,#0x10
0000f6  48c5              LDR      r0,|L4.1036|
0000f8  f7fffffe          BL       GPIO_Init
;;;61     			
;;;62     			GPIO_PinAFConfig  (GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
0000fc  2207              MOVS     r2,#7
0000fe  2102              MOVS     r1,#2
000100  48c2              LDR      r0,|L4.1036|
000102  f7fffffe          BL       GPIO_PinAFConfig
;;;63     			GPIO_PinAFConfig  (GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
000106  2207              MOVS     r2,#7
000108  2103              MOVS     r1,#3
00010a  48c0              LDR      r0,|L4.1036|
00010c  f7fffffe          BL       GPIO_PinAFConfig
000110  e196              B        |L4.1088|
                  |L4.274|
;;;64     		}else if ( pin == USART2_Pin2){
000112  2ca3              CMP      r4,#0xa3
000114  d1ab              BNE      |L4.110|
;;;65     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOD, ENABLE);
000116  2101              MOVS     r1,#1
000118  2008              MOVS     r0,#8
00011a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;66     			NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
00011e  2026              MOVS     r0,#0x26
000120  f88d0018          STRB     r0,[sp,#0x18]
;;;67     
;;;68     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000124  2002              MOVS     r0,#2
000126  f88d0014          STRB     r0,[sp,#0x14]
;;;69     			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00012a  2000              MOVS     r0,#0
00012c  f88d0016          STRB     r0,[sp,#0x16]
;;;70     			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
000130  2060              MOVS     r0,#0x60
000132  9004              STR      r0,[sp,#0x10]
;;;71     			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000134  2000              MOVS     r0,#0
000136  f88d0017          STRB     r0,[sp,#0x17]
;;;72     			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00013a  2002              MOVS     r0,#2
00013c  f88d0015          STRB     r0,[sp,#0x15]
;;;73     			GPIO_Init (GPIOD, &GPIO_InitStructure);
000140  a904              ADD      r1,sp,#0x10
000142  48b5              LDR      r0,|L4.1048|
000144  f7fffffe          BL       GPIO_Init
;;;74     			
;;;75     			GPIO_PinAFConfig  (GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
000148  2207              MOVS     r2,#7
00014a  2105              MOVS     r1,#5
00014c  48b2              LDR      r0,|L4.1048|
00014e  f7fffffe          BL       GPIO_PinAFConfig
;;;76     			GPIO_PinAFConfig  (GPIOD, GPIO_PinSource6, GPIO_AF_USART2);			
000152  2207              MOVS     r2,#7
000154  2106              MOVS     r1,#6
000156  48b0              LDR      r0,|L4.1048|
000158  f7fffffe          BL       GPIO_PinAFConfig
                  |L4.348|
00015c  e170              B        |L4.1088|
                  |L4.350|
;;;77     		}
;;;78     	}
;;;79     /* ------------------------- Config GPIO USART3 ------------------------- */	
;;;80     	else if (USARTx == USART3 && pin == USART_Pin){
00015e  48af              LDR      r0,|L4.1052|
000160  4285              CMP      r5,r0
000162  d177              BNE      |L4.596|
000164  42b4              CMP      r4,r6
000166  d175              BNE      |L4.596|
;;;81     		if(pin == (USART3_Pin1)){
000168  2ca5              CMP      r4,#0xa5
00016a  d124              BNE      |L4.438|
;;;82     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOB, ENABLE);
00016c  2101              MOVS     r1,#1
00016e  2002              MOVS     r0,#2
000170  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;83     			NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000174  2027              MOVS     r0,#0x27
000176  f88d0018          STRB     r0,[sp,#0x18]
;;;84     			
;;;85     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00017a  2002              MOVS     r0,#2
00017c  f88d0014          STRB     r0,[sp,#0x14]
;;;86     			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000180  2000              MOVS     r0,#0
000182  f88d0016          STRB     r0,[sp,#0x16]
;;;87     			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
000186  f44f6040          MOV      r0,#0xc00
00018a  9004              STR      r0,[sp,#0x10]
;;;88     			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
00018c  2000              MOVS     r0,#0
00018e  f88d0017          STRB     r0,[sp,#0x17]
;;;89     			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000192  2002              MOVS     r0,#2
000194  f88d0015          STRB     r0,[sp,#0x15]
;;;90     			GPIO_Init (GPIOB, &GPIO_InitStructure);
000198  a904              ADD      r1,sp,#0x10
00019a  489d              LDR      r0,|L4.1040|
00019c  f7fffffe          BL       GPIO_Init
;;;91     			
;;;92     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource10, GPIO_AF_USART3);
0001a0  2207              MOVS     r2,#7
0001a2  210a              MOVS     r1,#0xa
0001a4  489a              LDR      r0,|L4.1040|
0001a6  f7fffffe          BL       GPIO_PinAFConfig
;;;93     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource11, GPIO_AF_USART3);
0001aa  2207              MOVS     r2,#7
0001ac  210b              MOVS     r1,#0xb
0001ae  4898              LDR      r0,|L4.1040|
0001b0  f7fffffe          BL       GPIO_PinAFConfig
0001b4  e144              B        |L4.1088|
                  |L4.438|
;;;94     		}else if (pin == USART3_Pin2){
0001b6  2ca6              CMP      r4,#0xa6
0001b8  d124              BNE      |L4.516|
;;;95     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOC, ENABLE);
0001ba  2101              MOVS     r1,#1
0001bc  2004              MOVS     r0,#4
0001be  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;96     			NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
0001c2  2027              MOVS     r0,#0x27
0001c4  f88d0018          STRB     r0,[sp,#0x18]
;;;97     
;;;98     			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0001c8  2002              MOVS     r0,#2
0001ca  f88d0014          STRB     r0,[sp,#0x14]
;;;99     			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
0001ce  2000              MOVS     r0,#0
0001d0  f88d0016          STRB     r0,[sp,#0x16]
;;;100    			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
0001d4  f44f6040          MOV      r0,#0xc00
0001d8  9004              STR      r0,[sp,#0x10]
;;;101    			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
0001da  2000              MOVS     r0,#0
0001dc  f88d0017          STRB     r0,[sp,#0x17]
;;;102    			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0001e0  2002              MOVS     r0,#2
0001e2  f88d0015          STRB     r0,[sp,#0x15]
;;;103    			GPIO_Init (GPIOC, &GPIO_InitStructure);
0001e6  a904              ADD      r1,sp,#0x10
0001e8  488d              LDR      r0,|L4.1056|
0001ea  f7fffffe          BL       GPIO_Init
;;;104    			
;;;105    			GPIO_PinAFConfig  (GPIOC, GPIO_PinSource10, GPIO_AF_USART3);
0001ee  2207              MOVS     r2,#7
0001f0  210a              MOVS     r1,#0xa
0001f2  488b              LDR      r0,|L4.1056|
0001f4  f7fffffe          BL       GPIO_PinAFConfig
;;;106    			GPIO_PinAFConfig  (GPIOC, GPIO_PinSource11, GPIO_AF_USART3);			
0001f8  2207              MOVS     r2,#7
0001fa  210b              MOVS     r1,#0xb
0001fc  4888              LDR      r0,|L4.1056|
0001fe  f7fffffe          BL       GPIO_PinAFConfig
                  |L4.514|
000202  e11d              B        |L4.1088|
                  |L4.516|
;;;107    		}else if ( pin == USART3_Pin3){
000204  2ca7              CMP      r4,#0xa7
000206  d1a9              BNE      |L4.348|
;;;108    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOD, ENABLE);
000208  2101              MOVS     r1,#1
00020a  2008              MOVS     r0,#8
00020c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;109    			NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000210  2027              MOVS     r0,#0x27
000212  f88d0018          STRB     r0,[sp,#0x18]
;;;110    
;;;111    			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000216  2002              MOVS     r0,#2
000218  f88d0014          STRB     r0,[sp,#0x14]
;;;112    			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00021c  2000              MOVS     r0,#0
00021e  f88d0016          STRB     r0,[sp,#0x16]
;;;113    			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
000222  f44f7040          MOV      r0,#0x300
000226  9004              STR      r0,[sp,#0x10]
;;;114    			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000228  2000              MOVS     r0,#0
00022a  f88d0017          STRB     r0,[sp,#0x17]
;;;115    			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00022e  2002              MOVS     r0,#2
000230  f88d0015          STRB     r0,[sp,#0x15]
;;;116    			GPIO_Init (GPIOD, &GPIO_InitStructure);
000234  a904              ADD      r1,sp,#0x10
000236  4878              LDR      r0,|L4.1048|
000238  f7fffffe          BL       GPIO_Init
;;;117    			
;;;118    			GPIO_PinAFConfig  (GPIOD, GPIO_PinSource8, GPIO_AF_USART3);
00023c  2207              MOVS     r2,#7
00023e  2108              MOVS     r1,#8
000240  4875              LDR      r0,|L4.1048|
000242  f7fffffe          BL       GPIO_PinAFConfig
;;;119    			GPIO_PinAFConfig  (GPIOD, GPIO_PinSource9, GPIO_AF_USART3);			
000246  2207              MOVS     r2,#7
000248  2109              MOVS     r1,#9
00024a  4873              LDR      r0,|L4.1048|
00024c  f7fffffe          BL       GPIO_PinAFConfig
000250  e0f6              B        |L4.1088|
000252  e7ff              B        |L4.596|
                  |L4.596|
;;;120    		}			
;;;121    		
;;;122    	}
;;;123    /* ------------------------- Config GPIO UART4 ------------------------- */	
;;;124    	else if (USARTx == UART4 && pin == USART_Pin){
000254  4873              LDR      r0,|L4.1060|
000256  4285              CMP      r5,r0
000258  d14e              BNE      |L4.760|
00025a  42b4              CMP      r4,r6
00025c  d14c              BNE      |L4.760|
;;;125    		if(pin == (UART4_Pin1)){
00025e  2ca8              CMP      r4,#0xa8
000260  d123              BNE      |L4.682|
;;;126    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOA, ENABLE);
000262  2101              MOVS     r1,#1
000264  4608              MOV      r0,r1
000266  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;127    			NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
00026a  2034              MOVS     r0,#0x34
00026c  f88d0018          STRB     r0,[sp,#0x18]
;;;128    			
;;;129    			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000270  2002              MOVS     r0,#2
000272  f88d0014          STRB     r0,[sp,#0x14]
;;;130    			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000276  2000              MOVS     r0,#0
000278  f88d0016          STRB     r0,[sp,#0x16]
;;;131    			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
00027c  2003              MOVS     r0,#3
00027e  9004              STR      r0,[sp,#0x10]
;;;132    			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000280  2000              MOVS     r0,#0
000282  f88d0017          STRB     r0,[sp,#0x17]
;;;133    			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000286  2002              MOVS     r0,#2
000288  f88d0015          STRB     r0,[sp,#0x15]
;;;134    			GPIO_Init (GPIOA, &GPIO_InitStructure);
00028c  a904              ADD      r1,sp,#0x10
00028e  485f              LDR      r0,|L4.1036|
000290  f7fffffe          BL       GPIO_Init
;;;135    			
;;;136    			GPIO_PinAFConfig  (GPIOA, GPIO_PinSource0, GPIO_AF_UART4);
000294  2208              MOVS     r2,#8
000296  2100              MOVS     r1,#0
000298  485c              LDR      r0,|L4.1036|
00029a  f7fffffe          BL       GPIO_PinAFConfig
;;;137    			GPIO_PinAFConfig  (GPIOA, GPIO_PinSource1, GPIO_AF_UART4);
00029e  2208              MOVS     r2,#8
0002a0  2101              MOVS     r1,#1
0002a2  485a              LDR      r0,|L4.1036|
0002a4  f7fffffe          BL       GPIO_PinAFConfig
0002a8  e0ca              B        |L4.1088|
                  |L4.682|
;;;138    		}else if ( pin == UART4_Pin2){
0002aa  2ca9              CMP      r4,#0xa9
0002ac  d1a9              BNE      |L4.514|
;;;139    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOC, ENABLE);
0002ae  2101              MOVS     r1,#1
0002b0  2004              MOVS     r0,#4
0002b2  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;140    			NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
0002b6  2034              MOVS     r0,#0x34
0002b8  f88d0018          STRB     r0,[sp,#0x18]
;;;141    
;;;142    			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0002bc  2002              MOVS     r0,#2
0002be  f88d0014          STRB     r0,[sp,#0x14]
;;;143    			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
0002c2  2000              MOVS     r0,#0
0002c4  f88d0016          STRB     r0,[sp,#0x16]
;;;144    			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
0002c8  f44f6040          MOV      r0,#0xc00
0002cc  9004              STR      r0,[sp,#0x10]
;;;145    			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
0002ce  2000              MOVS     r0,#0
0002d0  f88d0017          STRB     r0,[sp,#0x17]
;;;146    			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0002d4  2002              MOVS     r0,#2
0002d6  f88d0015          STRB     r0,[sp,#0x15]
;;;147    			GPIO_Init (GPIOC, &GPIO_InitStructure);
0002da  a904              ADD      r1,sp,#0x10
0002dc  4850              LDR      r0,|L4.1056|
0002de  f7fffffe          BL       GPIO_Init
;;;148    			
;;;149    			GPIO_PinAFConfig  (GPIOC, GPIO_PinSource10, GPIO_AF_UART4);
0002e2  2208              MOVS     r2,#8
0002e4  210a              MOVS     r1,#0xa
0002e6  484e              LDR      r0,|L4.1056|
0002e8  f7fffffe          BL       GPIO_PinAFConfig
;;;150    			GPIO_PinAFConfig  (GPIOC, GPIO_PinSource11, GPIO_AF_UART4);			
0002ec  2208              MOVS     r2,#8
0002ee  210b              MOVS     r1,#0xb
0002f0  484b              LDR      r0,|L4.1056|
0002f2  f7fffffe          BL       GPIO_PinAFConfig
0002f6  e0a3              B        |L4.1088|
                  |L4.760|
;;;151    		}
;;;152    	}
;;;153    /* ------------------------- Config GPIO UART5 ------------------------- */		
;;;154    	else if (USARTx == UART5 && pin == USART_Pin){
0002f8  484b              LDR      r0,|L4.1064|
0002fa  4285              CMP      r5,r0
0002fc  d131              BNE      |L4.866|
0002fe  42b4              CMP      r4,r6
000300  d12f              BNE      |L4.866|
;;;155    		if(pin == (UART5_Pin)){
000302  2cb1              CMP      r4,#0xb1
000304  d12c              BNE      |L4.864|
;;;156    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOC, ENABLE);
000306  2101              MOVS     r1,#1
000308  2004              MOVS     r0,#4
00030a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;157    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOD, ENABLE);
00030e  2101              MOVS     r1,#1
000310  2008              MOVS     r0,#8
000312  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;158    			NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
000316  2035              MOVS     r0,#0x35
000318  f88d0018          STRB     r0,[sp,#0x18]
;;;159    
;;;160    			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00031c  2002              MOVS     r0,#2
00031e  f88d0014          STRB     r0,[sp,#0x14]
;;;161    			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000322  2000              MOVS     r0,#0
000324  f88d0016          STRB     r0,[sp,#0x16]
;;;162    			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
000328  14a8              ASRS     r0,r5,#18
00032a  9004              STR      r0,[sp,#0x10]
;;;163    			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
00032c  2004              MOVS     r0,#4
00032e  9004              STR      r0,[sp,#0x10]
;;;164    			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000330  2000              MOVS     r0,#0
000332  f88d0017          STRB     r0,[sp,#0x17]
;;;165    			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000336  2002              MOVS     r0,#2
000338  f88d0015          STRB     r0,[sp,#0x15]
;;;166    			GPIO_Init (GPIOC, &GPIO_InitStructure);
00033c  a904              ADD      r1,sp,#0x10
00033e  4838              LDR      r0,|L4.1056|
000340  f7fffffe          BL       GPIO_Init
;;;167    			GPIO_Init (GPIOD, &GPIO_InitStructure);
000344  a904              ADD      r1,sp,#0x10
000346  4834              LDR      r0,|L4.1048|
000348  f7fffffe          BL       GPIO_Init
;;;168    			
;;;169    			GPIO_PinAFConfig  (GPIOC, GPIO_PinSource12, GPIO_AF_UART5);
00034c  2208              MOVS     r2,#8
00034e  210c              MOVS     r1,#0xc
000350  4833              LDR      r0,|L4.1056|
000352  f7fffffe          BL       GPIO_PinAFConfig
;;;170    			GPIO_PinAFConfig  (GPIOD, GPIO_PinSource2, GPIO_AF_UART5);
000356  2208              MOVS     r2,#8
000358  2102              MOVS     r1,#2
00035a  482f              LDR      r0,|L4.1048|
00035c  f7fffffe          BL       GPIO_PinAFConfig
                  |L4.864|
000360  e06e              B        |L4.1088|
                  |L4.866|
;;;171    		}
;;;172    	}
;;;173    /* ------------------------- Config GPIO USART6 ------------------------- */		
;;;174    	else if (USARTx == USART6 && pin == USART_Pin){
000362  4832              LDR      r0,|L4.1068|
000364  4285              CMP      r5,r0
000366  d165              BNE      |L4.1076|
000368  42b4              CMP      r4,r6
00036a  d163              BNE      |L4.1076|
;;;175    		if(pin == (USART3_Pin1)){
00036c  2ca5              CMP      r4,#0xa5
00036e  d123              BNE      |L4.952|
;;;176    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOC, ENABLE);
000370  2101              MOVS     r1,#1
000372  2004              MOVS     r0,#4
000374  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;177    			NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
000378  2047              MOVS     r0,#0x47
00037a  f88d0018          STRB     r0,[sp,#0x18]
;;;178    			
;;;179    			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00037e  2002              MOVS     r0,#2
000380  f88d0014          STRB     r0,[sp,#0x14]
;;;180    			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000384  2000              MOVS     r0,#0
000386  f88d0016          STRB     r0,[sp,#0x16]
;;;181    			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
00038a  20c0              MOVS     r0,#0xc0
00038c  9004              STR      r0,[sp,#0x10]
;;;182    			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
00038e  2000              MOVS     r0,#0
000390  f88d0017          STRB     r0,[sp,#0x17]
;;;183    			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000394  2002              MOVS     r0,#2
000396  f88d0015          STRB     r0,[sp,#0x15]
;;;184    			GPIO_Init (GPIOC, &GPIO_InitStructure);
00039a  a904              ADD      r1,sp,#0x10
00039c  4820              LDR      r0,|L4.1056|
00039e  f7fffffe          BL       GPIO_Init
;;;185    			
;;;186    			GPIO_PinAFConfig  (GPIOC, GPIO_PinSource6, GPIO_AF_USART6);
0003a2  2208              MOVS     r2,#8
0003a4  2106              MOVS     r1,#6
0003a6  481e              LDR      r0,|L4.1056|
0003a8  f7fffffe          BL       GPIO_PinAFConfig
;;;187    			GPIO_PinAFConfig  (GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
0003ac  2208              MOVS     r2,#8
0003ae  2107              MOVS     r1,#7
0003b0  481b              LDR      r0,|L4.1056|
0003b2  f7fffffe          BL       GPIO_PinAFConfig
0003b6  e043              B        |L4.1088|
                  |L4.952|
;;;188    		}else if (pin == USART3_Pin2){
0003b8  2ca6              CMP      r4,#0xa6
0003ba  d141              BNE      |L4.1088|
;;;189    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOG, ENABLE);
0003bc  2101              MOVS     r1,#1
0003be  2040              MOVS     r0,#0x40
0003c0  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;190    			NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
0003c4  2047              MOVS     r0,#0x47
0003c6  f88d0018          STRB     r0,[sp,#0x18]
;;;191    
;;;192    			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0003ca  2002              MOVS     r0,#2
0003cc  f88d0014          STRB     r0,[sp,#0x14]
;;;193    			GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
0003d0  2000              MOVS     r0,#0
0003d2  f88d0016          STRB     r0,[sp,#0x16]
;;;194    			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14 | GPIO_Pin_9;
0003d6  f44f4084          MOV      r0,#0x4200
0003da  9004              STR      r0,[sp,#0x10]
;;;195    			GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
0003dc  2000              MOVS     r0,#0
0003de  f88d0017          STRB     r0,[sp,#0x17]
;;;196    			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0003e2  2002              MOVS     r0,#2
0003e4  f88d0015          STRB     r0,[sp,#0x15]
;;;197    			GPIO_Init (GPIOG, &GPIO_InitStructure);
0003e8  a904              ADD      r1,sp,#0x10
0003ea  4811              LDR      r0,|L4.1072|
0003ec  f7fffffe          BL       GPIO_Init
;;;198    			
;;;199    			GPIO_PinAFConfig  (GPIOG, GPIO_PinSource14, GPIO_AF_USART6);
0003f0  2208              MOVS     r2,#8
0003f2  210e              MOVS     r1,#0xe
0003f4  480e              LDR      r0,|L4.1072|
0003f6  f7fffffe          BL       GPIO_PinAFConfig
;;;200    			GPIO_PinAFConfig  (GPIOG, GPIO_PinSource9, GPIO_AF_USART6);			
0003fa  2208              MOVS     r2,#8
0003fc  2109              MOVS     r1,#9
0003fe  480c              LDR      r0,|L4.1072|
000400  f7fffffe          BL       GPIO_PinAFConfig
000404  e01c              B        |L4.1088|
000406  e015              B        |L4.1076|
                  |L4.1032|
                          DCD      0x40011000
                  |L4.1036|
                          DCD      0x40020000
                  |L4.1040|
                          DCD      0x40020400
                  |L4.1044|
                          DCD      0x40004400
                  |L4.1048|
                          DCD      0x40020c00
                  |L4.1052|
                          DCD      0x40004800
                  |L4.1056|
                          DCD      0x40020800
                  |L4.1060|
                          DCD      0x40004c00
                  |L4.1064|
                          DCD      0x40005000
                  |L4.1068|
                          DCD      0x40011400
                  |L4.1072|
                          DCD      0x40021800
                  |L4.1076|
;;;201    		}		
;;;202    	}else if (USARTx == UART7 && pin == USART_Pin){
000434  4839              LDR      r0,|L4.1308|
000436  4285              CMP      r5,r0
000438  d101              BNE      |L4.1086|
00043a  42b4              CMP      r4,r6
00043c  d000              BEQ      |L4.1088|
                  |L4.1086|
;;;203    		
;;;204    	}else if (USARTx == UART8 && pin == USART_Pin){
00043e  bf00              NOP      
                  |L4.1088|
;;;205    		
;;;206    	}
;;;207    	
;;;208    	
;;;209    	if(USARTx == USART1){
000440  4837              LDR      r0,|L4.1312|
000442  4285              CMP      r5,r0
000444  d104              BNE      |L4.1104|
;;;210    		RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART1, ENABLE);
000446  2101              MOVS     r1,#1
000448  2010              MOVS     r0,#0x10
00044a  f7fffffe          BL       RCC_APB2PeriphClockCmd
00044e  e036              B        |L4.1214|
                  |L4.1104|
;;;211    	}
;;;212    	else if (USARTx == USART2){
000450  4834              LDR      r0,|L4.1316|
000452  4285              CMP      r5,r0
000454  d104              BNE      |L4.1120|
;;;213    		RCC_APB1PeriphClockCmd  (RCC_APB1Periph_USART2, ENABLE); 
000456  2101              MOVS     r1,#1
000458  0448              LSLS     r0,r1,#17
00045a  f7fffffe          BL       RCC_APB1PeriphClockCmd
00045e  e02e              B        |L4.1214|
                  |L4.1120|
;;;214    	}
;;;215    	else if (USARTx == USART3){
000460  4831              LDR      r0,|L4.1320|
000462  4285              CMP      r5,r0
000464  d104              BNE      |L4.1136|
;;;216    		RCC_APB1PeriphClockCmd  (RCC_APB1Periph_USART3, ENABLE); 
000466  2101              MOVS     r1,#1
000468  0488              LSLS     r0,r1,#18
00046a  f7fffffe          BL       RCC_APB1PeriphClockCmd
00046e  e026              B        |L4.1214|
                  |L4.1136|
;;;217    	}
;;;218    	else if (USARTx == UART4){
000470  482e              LDR      r0,|L4.1324|
000472  4285              CMP      r5,r0
000474  d104              BNE      |L4.1152|
;;;219    		RCC_APB1PeriphClockCmd  (RCC_APB1Periph_UART4, ENABLE);
000476  2101              MOVS     r1,#1
000478  04c8              LSLS     r0,r1,#19
00047a  f7fffffe          BL       RCC_APB1PeriphClockCmd
00047e  e01e              B        |L4.1214|
                  |L4.1152|
;;;220    	}
;;;221    	else if (USARTx == UART5){
000480  482b              LDR      r0,|L4.1328|
000482  4285              CMP      r5,r0
000484  d104              BNE      |L4.1168|
;;;222    		RCC_APB1PeriphClockCmd  (RCC_APB1Periph_UART5, ENABLE);
000486  2101              MOVS     r1,#1
000488  0508              LSLS     r0,r1,#20
00048a  f7fffffe          BL       RCC_APB1PeriphClockCmd
00048e  e016              B        |L4.1214|
                  |L4.1168|
;;;223    	}
;;;224    	else if (USARTx == USART6){
000490  4828              LDR      r0,|L4.1332|
000492  4285              CMP      r5,r0
000494  d104              BNE      |L4.1184|
;;;225    		RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART6, ENABLE);
000496  2101              MOVS     r1,#1
000498  2020              MOVS     r0,#0x20
00049a  f7fffffe          BL       RCC_APB2PeriphClockCmd
00049e  e00e              B        |L4.1214|
                  |L4.1184|
;;;226    	}
;;;227    	else if (USARTx == UART7){
0004a0  481e              LDR      r0,|L4.1308|
0004a2  4285              CMP      r5,r0
0004a4  d104              BNE      |L4.1200|
;;;228    		RCC_APB1PeriphClockCmd  (RCC_APB1Periph_UART7, ENABLE); 
0004a6  2101              MOVS     r1,#1
0004a8  0788              LSLS     r0,r1,#30
0004aa  f7fffffe          BL       RCC_APB1PeriphClockCmd
0004ae  e006              B        |L4.1214|
                  |L4.1200|
;;;229    	}
;;;230    	else if (USARTx == UART8){
0004b0  4821              LDR      r0,|L4.1336|
0004b2  4285              CMP      r5,r0
0004b4  d103              BNE      |L4.1214|
;;;231    		RCC_APB1PeriphClockCmd  (RCC_APB1Periph_UART8, ENABLE);
0004b6  2101              MOVS     r1,#1
0004b8  0540              LSLS     r0,r0,#21
0004ba  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L4.1214|
;;;232    	}
;;;233    	
;;;234    	USART_DeInit(USARTx);
0004be  4628              MOV      r0,r5
0004c0  f7fffffe          BL       USART_DeInit
;;;235    	
;;;236    
;;;237    	USART_InitStructure.USART_BaudRate = Buad_rate;
0004c4  9700              STR      r7,[sp,#0]
;;;238    	USART_InitStructure.USART_HardwareFlowControl = USART_HFC;
0004c6  f8ad800c          STRH     r8,[sp,#0xc]
;;;239    	USART_InitStructure.USART_Mode = Mode;
0004ca  f8ad900a          STRH     r9,[sp,#0xa]
;;;240    	USART_InitStructure.USART_Parity = Parity;
0004ce  f8ada008          STRH     r10,[sp,#8]
;;;241    	USART_InitStructure.USART_StopBits = Stop_Bit;
0004d2  f8adb006          STRH     r11,[sp,#6]
;;;242    	USART_InitStructure.USART_WordLength = WLength;
0004d6  9813              LDR      r0,[sp,#0x4c]
0004d8  f8ad0004          STRH     r0,[sp,#4]
;;;243    	USART_Init  (USARTx, &USART_InitStructure);
0004dc  4669              MOV      r1,sp
0004de  4628              MOV      r0,r5
0004e0  f7fffffe          BL       USART_Init
;;;244    	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE);
0004e4  2201              MOVS     r2,#1
0004e6  f2405125          MOV      r1,#0x525
0004ea  4628              MOV      r0,r5
0004ec  f7fffffe          BL       USART_ITConfig
;;;245    	USART_Cmd  (USARTx, ENABLE);
0004f0  2101              MOVS     r1,#1
0004f2  4628              MOV      r0,r5
0004f4  f7fffffe          BL       USART_Cmd
;;;246    
;;;247      
;;;248      /* Enable the USARTx Interrupt */
;;;249    	NVIC_PriorityGroupConfig  (NVIC_PriorityGroup_0);
0004f8  f44f60e0          MOV      r0,#0x700
0004fc  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;250      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x03;
000500  2003              MOVS     r0,#3
000502  f88d0019          STRB     r0,[sp,#0x19]
;;;251      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03;
000506  f88d001a          STRB     r0,[sp,#0x1a]
;;;252      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00050a  2001              MOVS     r0,#1
00050c  f88d001b          STRB     r0,[sp,#0x1b]
;;;253      NVIC_Init(&NVIC_InitStructure);
000510  a806              ADD      r0,sp,#0x18
000512  f7fffffe          BL       NVIC_Init
;;;254    }
000516  b007              ADD      sp,sp,#0x1c
000518  e8bd8ff0          POP      {r4-r11,pc}
;;;255    											 
                          ENDP

                  |L4.1308|
                          DCD      0x40007800
                  |L4.1312|
                          DCD      0x40011000
                  |L4.1316|
                          DCD      0x40004400
                  |L4.1320|
                          DCD      0x40004800
                  |L4.1324|
                          DCD      0x40004c00
                  |L4.1328|
                          DCD      0x40005000
                  |L4.1332|
                          DCD      0x40011400
                  |L4.1336|
                          DCD      0x40007c00

                          AREA ||i.USART_Send_Char||, CODE, READONLY, ALIGN=1

                  USART_Send_Char PROC
;;;255    											 
;;;256    void USART_Send_Char (USART_TypeDef* USARTx, volatile char c){
000000  b513              PUSH     {r0,r1,r4,lr}
000002  4604              MOV      r4,r0
;;;257    	USART_SendData  (USARTx,c);
000004  f89d1004          LDRB     r1,[sp,#4]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_SendData
;;;258    	while(!USART_GetFlagStatus  (USARTx,USART_FLAG_TXE));
00000e  bf00              NOP      
                  |L5.16|
000010  2180              MOVS     r1,#0x80
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       USART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L5.16|
;;;259    }
00001c  bd1c              POP      {r2-r4,pc}
;;;260    void USART_Send_String (USART_TypeDef* USARTx, volatile char *string){
                          ENDP


                          AREA ||i.USART_Send_String||, CODE, READONLY, ALIGN=1

                  USART_Send_String PROC
;;;259    }
;;;260    void USART_Send_String (USART_TypeDef* USARTx, volatile char *string){
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;261    	while(*string) USART_Send_Char(USARTx, *string++);
000006  e004              B        |L6.18|
                  |L6.8|
000008  f8141b01          LDRB     r1,[r4],#1
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       USART_Send_Char
                  |L6.18|
000012  7820              LDRB     r0,[r4,#0]
000014  2800              CMP      r0,#0
000016  d1f7              BNE      |L6.8|
;;;262    }
000018  bd70              POP      {r4-r6,pc}
;;;263    struct __FILE {
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;266    FILE __stdout;
;;;267    int fputc(int ch, FILE *f) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;268    	USART_Send_Char(USART2,ch);
000006  b2e1              UXTB     r1,r4
000008  4802              LDR      r0,|L7.20|
00000a  f7fffffe          BL       USART_Send_Char
;;;269    	return ch;
00000e  4620              MOV      r0,r4
;;;270    }
000010  bd70              POP      {r4-r6,pc}
;;;271    //void USART1_IRQHandler(void)
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40004400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Rx_data
                          %        60
                  data
                          %        40

                          AREA ||.data||, DATA, ALIGN=2

                  Rx_indx
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  __stdout
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "USER\\usart_f4.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usart_f4_c_8ad94339____REV16|
#line 138 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_usart_f4_c_8ad94339____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usart_f4_c_8ad94339____REVSH|
#line 153
|__asm___10_usart_f4_c_8ad94339____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_usart_f4_c_8ad94339____RRX|
#line 328
|__asm___10_usart_f4_c_8ad94339____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
