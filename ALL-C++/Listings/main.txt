; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I.\USER -I.\SCR -I.\Libraries\CMSIS\Include -I.\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I.\Libraries\STM32F4xx_StdPeriph_Driver\inc -D__UVISION_VERSION=535 -DSTM32F446xx -DUSE_STDPERIPH_DRIVER -DSTM32F446xx -DHSE_VALUE=8000000 --omf_browse=.\objects\main.crf SCR\main.cpp]
                          THUMB

                          AREA ||i.ADC_Config||, CODE, READONLY, ALIGN=2

                  ADC_Config PROC
;;;121    }
;;;122    void ADC_Config (void)
000000  b500              PUSH     {lr}
;;;123    {
000002  b09b              SUB      sp,sp,#0x6c
;;;124    	RCC_AHB1PeriphClockCmd (RCC_AHB1Periph_DMA2, ENABLE);
000004  2101              MOVS     r1,#1
000006  0588              LSLS     r0,r1,#22
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;125    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0208              LSLS     r0,r1,#8
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;126    
;;;127    	ADC_InitTypeDef ADC_InitStructure;
;;;128    	ADC_CommonInitTypeDef ADC_CommonInitStructure;
;;;129    	DMA_InitTypeDef  DMA_InitStructure;
;;;130    //	NVIC_InitTypeDef   NVIC_InitStructure;
;;;131    	
;;;132    	DMA_DeInit(DMA2_Stream0);
000014  4831              LDR      r0,|L1.220|
000016  f7fffffe          BL       DMA_DeInit
;;;133    	DMA_InitStructure.DMA_Channel = DMA_Channel_0;  
00001a  2000              MOVS     r0,#0
00001c  9002              STR      r0,[sp,#8]
;;;134      DMA_InitStructure.DMA_PeripheralBaseAddr =(uint32_t)(&(ADC1->DR)); //(uint32_t)0x4001204C;
00001e  4830              LDR      r0,|L1.224|
000020  9003              STR      r0,[sp,#0xc]
;;;135      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&value_adc;
000022  4830              LDR      r0,|L1.228|
000024  9004              STR      r0,[sp,#0x10]
;;;136      DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
000026  2000              MOVS     r0,#0
000028  9005              STR      r0,[sp,#0x14]
;;;137      DMA_InitStructure.DMA_BufferSize = 1;
00002a  2001              MOVS     r0,#1
00002c  9006              STR      r0,[sp,#0x18]
;;;138      DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00002e  2000              MOVS     r0,#0
000030  9007              STR      r0,[sp,#0x1c]
;;;139      DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000032  f44f6080          MOV      r0,#0x400
000036  9008              STR      r0,[sp,#0x20]
;;;140      DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
000038  0040              LSLS     r0,r0,#1
00003a  9009              STR      r0,[sp,#0x24]
;;;141      DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
00003c  0080              LSLS     r0,r0,#2
00003e  900a              STR      r0,[sp,#0x28]
;;;142      DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
000040  1140              ASRS     r0,r0,#5
000042  900b              STR      r0,[sp,#0x2c]
;;;143      DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000044  0240              LSLS     r0,r0,#9
000046  900c              STR      r0,[sp,#0x30]
;;;144      DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
000048  2000              MOVS     r0,#0
00004a  900d              STR      r0,[sp,#0x34]
;;;145      DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
00004c  2001              MOVS     r0,#1
00004e  900e              STR      r0,[sp,#0x38]
;;;146      DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
000050  2000              MOVS     r0,#0
000052  900f              STR      r0,[sp,#0x3c]
;;;147      DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
000054  9010              STR      r0,[sp,#0x40]
;;;148      DMA_Init(DMA2_Stream0, &DMA_InitStructure);
000056  a902              ADD      r1,sp,#8
000058  4820              LDR      r0,|L1.220|
00005a  f7fffffe          BL       DMA_Init
;;;149      DMA_Cmd(DMA2_Stream0, ENABLE);
00005e  2101              MOVS     r1,#1
000060  481e              LDR      r0,|L1.220|
000062  f7fffffe          BL       DMA_Cmd
;;;150    	
;;;151    	GPIO_Config(GPIOA, 
000066  2001              MOVS     r0,#1
000068  2100              MOVS     r1,#0
00006a  460b              MOV      r3,r1
00006c  2203              MOVS     r2,#3
00006e  e9cd1000          STRD     r1,r0,[sp,#0]
000072  2108              MOVS     r1,#8
000074  481c              LDR      r0,|L1.232|
000076  f7fffffe          BL       GPIO_Config
;;;152    							GPIO_Pin_3, 
;;;153    							GPIO_Mode_AN,
;;;154    							GPIO_OType_PP,
;;;155    							GPIO_PuPd_NOPULL,
;;;156    							GPIO_Speed_25MHz);
;;;157    	
;;;158    	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
00007a  2000              MOVS     r0,#0
00007c  9011              STR      r0,[sp,#0x44]
;;;159      ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
00007e  9012              STR      r0,[sp,#0x48]
;;;160      ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
000080  9013              STR      r0,[sp,#0x4c]
;;;161      ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_15Cycles;
000082  f44f6020          MOV      r0,#0xa00
000086  9014              STR      r0,[sp,#0x50]
;;;162      ADC_CommonInit(&ADC_CommonInitStructure);
000088  a811              ADD      r0,sp,#0x44
00008a  f7fffffe          BL       ADC_CommonInit
;;;163    	
;;;164    	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
00008e  2000              MOVS     r0,#0
000090  f88d0058          STRB     r0,[sp,#0x58]
;;;165    	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
000094  2001              MOVS     r0,#1
000096  f88d0059          STRB     r0,[sp,#0x59]
;;;166    	ADC_InitStructure.ADC_NbrOfConversion = 1;
00009a  f88d0068          STRB     r0,[sp,#0x68]
;;;167    	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConvEdge_None;
00009e  2000              MOVS     r0,#0
0000a0  9018              STR      r0,[sp,#0x60]
;;;168    	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
0000a2  9019              STR      r0,[sp,#0x64]
;;;169    	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
0000a4  9015              STR      r0,[sp,#0x54]
;;;170    	ADC_Init(ADC1, &ADC_InitStructure);
0000a6  a915              ADD      r1,sp,#0x54
0000a8  480d              LDR      r0,|L1.224|
0000aa  384c              SUBS     r0,r0,#0x4c
0000ac  f7fffffe          BL       ADC_Init
;;;171    
;;;172    //	NVIC_PriorityGroupConfig  (NVIC_PriorityGroup_0);
;;;173    //  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
;;;174    //  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03;
;;;175    //  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;176    //	NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
;;;177    //  NVIC_Init(&NVIC_InitStructure);
;;;178    	
;;;179    	ADC_Cmd(ADC1, ENABLE);
0000b0  2101              MOVS     r1,#1
0000b2  480b              LDR      r0,|L1.224|
0000b4  384c              SUBS     r0,r0,#0x4c
0000b6  f7fffffe          BL       ADC_Cmd
;;;180    	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
0000ba  2101              MOVS     r1,#1
0000bc  4808              LDR      r0,|L1.224|
0000be  384c              SUBS     r0,r0,#0x4c
0000c0  f7fffffe          BL       ADC_DMARequestAfterLastTransferCmd
;;;181      ADC_DMACmd(ADC1, ENABLE);
0000c4  2101              MOVS     r1,#1
0000c6  4806              LDR      r0,|L1.224|
0000c8  384c              SUBS     r0,r0,#0x4c
0000ca  f7fffffe          BL       ADC_DMACmd
;;;182    	ADC_SoftwareStartConv(ADC1);
0000ce  4804              LDR      r0,|L1.224|
0000d0  384c              SUBS     r0,r0,#0x4c
0000d2  f7fffffe          BL       ADC_SoftwareStartConv
;;;183    }
0000d6  b01b              ADD      sp,sp,#0x6c
0000d8  bd00              POP      {pc}
;;;184    
                          ENDP

0000da  0000              DCW      0x0000
                  |L1.220|
                          DCD      0x40026410
                  |L1.224|
                          DCD      0x4001204c
                  |L1.228|
                          DCD      value_adc
                  |L1.232|
                          DCD      0x40020000

                          AREA ||i.DMA1I2C_Config||, CODE, READONLY, ALIGN=2

                  DMA1I2C_Config PROC
;;;217    }
;;;218    void DMA1I2C_Config (void)
000000  b500              PUSH     {lr}
;;;219    {
000002  b08f              SUB      sp,sp,#0x3c
;;;220    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
000004  2101              MOVS     r1,#1
000006  0548              LSLS     r0,r1,#21
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;221    	DMA_InitTypeDef DMA_InitStructure;
;;;222      DMA_DeInit(DMA1_Stream6);
00000c  481d              LDR      r0,|L2.132|
00000e  f7fffffe          BL       DMA_DeInit
;;;223      DMA_Cmd(DMA1_Stream6, DISABLE);
000012  2100              MOVS     r1,#0
000014  481b              LDR      r0,|L2.132|
000016  f7fffffe          BL       DMA_Cmd
;;;224    	DMA_StructInit(&DMA_InitStructure);                                // Load defaults
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       DMA_StructInit
;;;225    	
;;;226    	DMA_InitStructure.DMA_Channel = DMA_Channel_1;
000020  f04f7000          MOV      r0,#0x2000000
000024  9000              STR      r0,[sp,#0]
;;;227    	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(I2C1->DR)); // I2C3 data register address
000026  4818              LDR      r0,|L2.136|
000028  9001              STR      r0,[sp,#4]
;;;228    	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) c;   // Display buffer address
00002a  4818              LDR      r0,|L2.140|
00002c  9002              STR      r0,[sp,#8]
;;;229    	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;             // DMA from mem to periph
00002e  2040              MOVS     r0,#0x40
000030  9003              STR      r0,[sp,#0xc]
;;;230    	DMA_InitStructure.DMA_BufferSize = 10;                            // Is set later in transmit function
000032  200a              MOVS     r0,#0xa
000034  9004              STR      r0,[sp,#0x10]
;;;231    	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;    // Do not increment peripheral address
000036  2000              MOVS     r0,#0
000038  9005              STR      r0,[sp,#0x14]
;;;232    	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;             // Do increment memory address
00003a  f44f6080          MOV      r0,#0x400
00003e  9006              STR      r0,[sp,#0x18]
;;;233    	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
000040  2000              MOVS     r0,#0
000042  9007              STR      r0,[sp,#0x1c]
;;;234    	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000044  9008              STR      r0,[sp,#0x20]
;;;235    	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;                       // DMA one shot, no circular.
000046  9009              STR      r0,[sp,#0x24]
;;;236    	DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;               // Tweak if interfering with other dma actions
000048  f44f3080          MOV      r0,#0x10000
00004c  900a              STR      r0,[sp,#0x28]
;;;237    	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
00004e  2000              MOVS     r0,#0
000050  900b              STR      r0,[sp,#0x2c]
;;;238    	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
000052  2001              MOVS     r0,#1
000054  900c              STR      r0,[sp,#0x30]
;;;239    	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
000056  2000              MOVS     r0,#0
000058  900d              STR      r0,[sp,#0x34]
;;;240    	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
00005a  900e              STR      r0,[sp,#0x38]
;;;241    	DMA_Init(DMA1_Stream6, &DMA_InitStructure);
00005c  4669              MOV      r1,sp
00005e  4809              LDR      r0,|L2.132|
000060  f7fffffe          BL       DMA_Init
;;;242    	DMA_Cmd(DMA1_Stream6, ENABLE);
000064  2101              MOVS     r1,#1
000066  4807              LDR      r0,|L2.132|
000068  f7fffffe          BL       DMA_Cmd
;;;243    	I2C_DMACmd  (I2C1, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  4806              LDR      r0,|L2.136|
000070  3810              SUBS     r0,r0,#0x10
000072  f7fffffe          BL       I2C_DMACmd
;;;244    	I2C_DMALastTransferCmd  (I2C1, ENABLE);
000076  2101              MOVS     r1,#1
000078  4803              LDR      r0,|L2.136|
00007a  3810              SUBS     r0,r0,#0x10
00007c  f7fffffe          BL       I2C_DMALastTransferCmd
;;;245    }
000080  b00f              ADD      sp,sp,#0x3c
000082  bd00              POP      {pc}
;;;246    void I2C1_Nvic(void)
                          ENDP

                  |L2.132|
                          DCD      0x400260a0
                  |L2.136|
                          DCD      0x40005410
                  |L2.140|
                          DCD      c

                          AREA ||i.EXTI15_10_IRQHandler||, CODE, READONLY, ALIGN=2

                  EXTI15_10_IRQHandler PROC
;;;205    }
;;;206    void EXTI15_10_IRQHandler (void)
000000  b510              PUSH     {r4,lr}
;;;207    {
;;;208    	if(EXTI_GetITStatus(EXTI_Line13))
000002  f44f5000          MOV      r0,#0x2000
000006  f7fffffe          BL       EXTI_GetITStatus
00000a  b190              CBZ      r0,|L3.50|
;;;209      {
;;;210    		LED3 = 1;
00000c  2001              MOVS     r0,#1
00000e  4909              LDR      r1,|L3.52|
000010  6008              STR      r0,[r1,#0]
;;;211    		delay_ms(100);
000012  ed9f0b09          VLDR     d0,|L3.56|
000016  f7fffffe          BL       delay_ms
;;;212    		LED3 = 0;
00001a  2000              MOVS     r0,#0
00001c  4908              LDR      r1,|L3.64|
00001e  f8c102b8          STR      r0,[r1,#0x2b8]
;;;213    		delay_ms(100);
000022  ed9f0b05          VLDR     d0,|L3.56|
000026  f7fffffe          BL       delay_ms
;;;214        /* Clear the EXTI line 13 pending bit */
;;;215        EXTI_ClearITPendingBit(EXTI_Line13);
00002a  f44f5000          MOV      r0,#0x2000
00002e  f7fffffe          BL       EXTI_ClearITPendingBit
                  |L3.50|
;;;216      }
;;;217    }
000032  bd10              POP      {r4,pc}
;;;218    void DMA1I2C_Config (void)
                          ENDP

                  |L3.52|
                          DCD      0x424082b8
                  |L3.56|
000038  00000000          DCFD     0x4059000000000000 ; 100
00003c  40590000
                  |L3.64|
                          DCD      0x42408000

                          AREA ||i.EXTILine13_Config||, CODE, READONLY, ALIGN=2

                  EXTILine13_Config PROC
;;;93     }
;;;94     void EXTILine13_Config(void)
000000  b500              PUSH     {lr}
;;;95     {
000002  b085              SUB      sp,sp,#0x14
;;;96       EXTI_InitTypeDef   EXTI_InitStructure;
;;;97       NVIC_InitTypeDef   NVIC_InitStructure;
;;;98       /* Enable SYSCFG clock */
;;;99       RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
000004  2101              MOVS     r1,#1
000006  0388              LSLS     r0,r1,#14
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;100    
;;;101      GPIO_Config(GPIOC, 
00000c  2001              MOVS     r0,#1
00000e  2100              MOVS     r1,#0
000010  460b              MOV      r3,r1
000012  460a              MOV      r2,r1
000014  e9cd1000          STRD     r1,r0,[sp,#0]
000018  0341              LSLS     r1,r0,#13
00001a  4813              LDR      r0,|L4.104|
00001c  f7fffffe          BL       GPIO_Config
;;;102    							GPIO_Pin_13, 
;;;103    							GPIO_Mode_IN,
;;;104    							GPIO_OType_PP,
;;;105    							GPIO_PuPd_NOPULL,
;;;106    							GPIO_Speed_25MHz);
;;;107    
;;;108      SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
000020  210d              MOVS     r1,#0xd
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       SYSCFG_EXTILineConfig
;;;109    
;;;110      EXTI_InitStructure.EXTI_Line = EXTI_Line13;
000028  f44f5000          MOV      r0,#0x2000
00002c  9003              STR      r0,[sp,#0xc]
;;;111      EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
00002e  2000              MOVS     r0,#0
000030  f88d0010          STRB     r0,[sp,#0x10]
;;;112      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
000034  200c              MOVS     r0,#0xc
000036  f88d0011          STRB     r0,[sp,#0x11]
;;;113      EXTI_InitStructure.EXTI_LineCmd = ENABLE;
00003a  2001              MOVS     r0,#1
00003c  f88d0012          STRB     r0,[sp,#0x12]
;;;114      EXTI_Init(&EXTI_InitStructure);
000040  a803              ADD      r0,sp,#0xc
000042  f7fffffe          BL       EXTI_Init
;;;115    
;;;116      NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
000046  2028              MOVS     r0,#0x28
000048  f88d0008          STRB     r0,[sp,#8]
;;;117      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x04;
00004c  2004              MOVS     r0,#4
00004e  f88d0009          STRB     r0,[sp,#9]
;;;118      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x04;
000052  f88d000a          STRB     r0,[sp,#0xa]
;;;119      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000056  2001              MOVS     r0,#1
000058  f88d000b          STRB     r0,[sp,#0xb]
;;;120      NVIC_Init(&NVIC_InitStructure);
00005c  a802              ADD      r0,sp,#8
00005e  f7fffffe          BL       NVIC_Init
;;;121    }
000062  b005              ADD      sp,sp,#0x14
000064  bd00              POP      {pc}
;;;122    void ADC_Config (void)
                          ENDP

000066  0000              DCW      0x0000
                  |L4.104|
                          DCD      0x40020800

                          AREA ||i.I2C1_ER_IRQHandler||, CODE, READONLY, ALIGN=2

                  I2C1_ER_IRQHandler PROC
;;;258    }
;;;259    void I2C1_ER_IRQHandler (void)
000000  b510              PUSH     {r4,lr}
;;;260    {
;;;261    	if(I2C_GetITStatus  (I2C1, I2C_IT_BERR) == RESET)
000002  f04f2101          MOV      r1,#0x1000100
000006  4806              LDR      r0,|L5.32|
000008  f7fffffe          BL       I2C_GetITStatus
00000c  b938              CBNZ     r0,|L5.30|
;;;262    	{
;;;263    		I2C_Stop(I2C1,ENABLE);
00000e  2101              MOVS     r1,#1
000010  4803              LDR      r0,|L5.32|
000012  f7fffffe          BL       I2C_Stop
;;;264    		I2C_ClearITPendingBit  (I2C1, I2C_IT_PECERR);
000016  4903              LDR      r1,|L5.36|
000018  4801              LDR      r0,|L5.32|
00001a  f7fffffe          BL       I2C_ClearITPendingBit
                  |L5.30|
;;;265    	}
;;;266    }
00001e  bd10              POP      {r4,pc}
;;;267    #ifdef __cplusplus
                          ENDP

                  |L5.32|
                          DCD      0x40005400
                  |L5.36|
                          DCD      0x01001000

                          AREA ||i.I2C1_Nvic||, CODE, READONLY, ALIGN=2

                  I2C1_Nvic PROC
;;;245    }
;;;246    void I2C1_Nvic(void)
000000  b508              PUSH     {r3,lr}
;;;247    {
;;;248    	
;;;249    	NVIC_InitTypeDef NVIC_InitStructure;
;;;250    	
;;;251    	NVIC_InitStructure.NVIC_IRQChannel = I2C1_ER_IRQn;
000002  2020              MOVS     r0,#0x20
000004  f88d0000          STRB     r0,[sp,#0]
;;;252    	NVIC_PriorityGroupConfig  (NVIC_PriorityGroup_4);
000008  f44f7040          MOV      r0,#0x300
00000c  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;253      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x03;
000010  2003              MOVS     r0,#3
000012  f88d0001          STRB     r0,[sp,#1]
;;;254      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03;
000016  f88d0002          STRB     r0,[sp,#2]
;;;255      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00001a  2001              MOVS     r0,#1
00001c  f88d0003          STRB     r0,[sp,#3]
;;;256      NVIC_Init(&NVIC_InitStructure);
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       NVIC_Init
;;;257    	I2C_ITConfig  (I2C1, I2C_IT_ERR, ENABLE);
000026  2201              MOVS     r2,#1
000028  0211              LSLS     r1,r2,#8
00002a  4802              LDR      r0,|L6.52|
00002c  f7fffffe          BL       I2C_ITConfig
;;;258    }
000030  bd08              POP      {r3,pc}
;;;259    void I2C1_ER_IRQHandler (void)
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      0x40005400

                          AREA ||i.IWDG_Config||, CODE, READONLY, ALIGN=1

                  IWDG_Config PROC
;;;184    
;;;185    void IWDG_Config(void)
000000  b510              PUSH     {r4,lr}
;;;186    {
;;;187    	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);// mo khoa timer 12bit
000002  f2455055          MOV      r0,#0x5555
000006  f7fffffe          BL       IWDG_WriteAccessCmd
;;;188      IWDG_SetPrescaler(IWDG_Prescaler_256);
00000a  2006              MOVS     r0,#6
00000c  f7fffffe          BL       IWDG_SetPrescaler
;;;189      /* 
;;;190    			t_out = (IWDG_Prescaler_256 * IWDG_SetReload(312))/ f_lsi;
;;;191    						= (256 *312) / 32768 = 2.43 s
;;;192      */   			
;;;193    	IWDG_SetReload(400);
000010  f44f70c8          MOV      r0,#0x190
000014  f7fffffe          BL       IWDG_SetReload
;;;194      /* Reload IWDG counter */
;;;195      IWDG_ReloadCounter();
000018  f7fffffe          BL       IWDG_ReloadCounter
;;;196    
;;;197      IWDG_Enable();
00001c  f7fffffe          BL       IWDG_Enable
;;;198    }
000020  bd10              POP      {r4,pc}
;;;199    uint16_t Read_ADC1(u8 channel)
                          ENDP


                          AREA ||i.Read_ADC1||, CODE, READONLY, ALIGN=2

                  Read_ADC1 PROC
;;;198    }
;;;199    uint16_t Read_ADC1(u8 channel)
000000  b510              PUSH     {r4,lr}
;;;200    {
000002  4604              MOV      r4,r0
;;;201    	ADC_RegularChannelConfig(ADC1, channel, 1, ADC_SampleTime_480Cycles);
000004  2307              MOVS     r3,#7
000006  2201              MOVS     r2,#1
000008  4621              MOV      r1,r4
00000a  4808              LDR      r0,|L8.44|
00000c  f7fffffe          BL       ADC_RegularChannelConfig
;;;202    	ADC_SoftwareStartConv(ADC1);
000010  4806              LDR      r0,|L8.44|
000012  f7fffffe          BL       ADC_SoftwareStartConv
;;;203    	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET);
000016  bf00              NOP      
                  |L8.24|
000018  2102              MOVS     r1,#2
00001a  4804              LDR      r0,|L8.44|
00001c  f7fffffe          BL       ADC_GetFlagStatus
000020  2801              CMP      r0,#1
000022  d0f9              BEQ      |L8.24|
;;;204    	return ADC_GetConversionValue(ADC1);
000024  4801              LDR      r0,|L8.44|
000026  f7fffffe          BL       ADC_GetConversionValue
;;;205    }
00002a  bd10              POP      {r4,pc}
;;;206    void EXTI15_10_IRQHandler (void)
                          ENDP

                  |L8.44|
                          DCD      0x40012000

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;28     char c[20];
;;;29     int main() {
000000  b51f              PUSH     {r0-r4,lr}
;;;30     	GPIO_Config(GPIOB, 
000002  2001              MOVS     r0,#1
000004  2100              MOVS     r1,#0
000006  460b              MOV      r3,r1
000008  4602              MOV      r2,r0
00000a  e9cd1000          STRD     r1,r0,[sp,#0]
00000e  f2440181          MOV      r1,#0x4081
000012  484a              LDR      r0,|L9.316|
000014  f7fffffe          BL       GPIO_Config
;;;31     							GPIO_Pin_0 |  GPIO_Pin_7 |  GPIO_Pin_14, 
;;;32     							GPIO_Mode_OUT,
;;;33     							GPIO_OType_PP,
;;;34     							GPIO_PuPd_NOPULL,
;;;35     							GPIO_Speed_25MHz);
;;;36     	GPIO_Config(GPIOE, 
000018  2001              MOVS     r0,#1
00001a  2100              MOVS     r1,#0
00001c  460b              MOV      r3,r1
00001e  460a              MOV      r2,r1
000020  e9cd1000          STRD     r1,r0,[sp,#0]
000024  4601              MOV      r1,r0
000026  4846              LDR      r0,|L9.320|
000028  f7fffffe          BL       GPIO_Config
;;;37     							GPIO_Pin_0, 
;;;38     							GPIO_Mode_IN,
;;;39     							GPIO_OType_PP,
;;;40     							GPIO_PuPd_NOPULL,
;;;41     							GPIO_Speed_25MHz);
;;;42     	SysTick_Configuration();
00002c  f7fffffe          BL       SysTick_Configuration
;;;43     	USART_Initstruct(USART2,
000030  2000              MOVS     r0,#0
000032  230c              MOVS     r3,#0xc
000034  e9cd3000          STRD     r3,r0,[sp,#0]
000038  9002              STR      r0,[sp,#8]
00003a  4603              MOV      r3,r0
00003c  f44f5216          MOV      r2,#0x2580
000040  21a3              MOVS     r1,#0xa3
000042  9003              STR      r0,[sp,#0xc]
000044  483f              LDR      r0,|L9.324|
000046  f7fffffe          BL       USART_Initstruct
;;;44     									 USART2_Pin2,	
;;;45     									 USART_Buadrate_9600, 
;;;46     								 	 USART_HardwareFlowControl_None, 
;;;47     								 	 USART_Mode_Rx | USART_Mode_Tx, 
;;;48     									 USART_Parity_No, 
;;;49     									 USART_StopBits_1, 
;;;50     									 USART_WordLength_8b);
;;;51     	SSD1306_Init();
00004a  f7fffffe          BL       SSD1306_Init
;;;52     	DMA1I2C_Config();
00004e  f7fffffe          BL       DMA1I2C_Config
;;;53     	I2C1_Nvic();
000052  f7fffffe          BL       I2C1_Nvic
;;;54     	EXTILine13_Config();
000056  f7fffffe          BL       EXTILine13_Config
;;;55     	ADC_Config();
00005a  f7fffffe          BL       ADC_Config
;;;56     	IWDG_Config();
00005e  f7fffffe          BL       IWDG_Config
;;;57     							// cot, hang
;;;58     	SSD1306_GotoXY (0,0);
000062  2100              MOVS     r1,#0
000064  4608              MOV      r0,r1
000066  f7fffffe          BL       SSD1306_GotoXY
;;;59     	SSD1306_Puts ("HELLO STM32F446ZE ", &Font_7x10, SSD1306_COLOR_WHITE);
00006a  2201              MOVS     r2,#1
00006c  4936              LDR      r1,|L9.328|
00006e  a037              ADR      r0,|L9.332|
000070  f7fffffe          BL       SSD1306_Puts
;;;60     	SSD1306_GotoXY (5, 30);
000074  211e              MOVS     r1,#0x1e
000076  2005              MOVS     r0,#5
000078  f7fffffe          BL       SSD1306_GotoXY
;;;61     	SSD1306_Puts ("HELLO WORLD", &Font_11x18, SSD1306_COLOR_WHITE);
00007c  2201              MOVS     r2,#1
00007e  4938              LDR      r1,|L9.352|
000080  a038              ADR      r0,|L9.356|
000082  f7fffffe          BL       SSD1306_Puts
;;;62     	SSD1306_UpdateScreen();
000086  f7fffffe          BL       SSD1306_UpdateScreen
;;;63     	
;;;64     	delay_ms(2000);
00008a  ed9f0b39          VLDR     d0,|L9.368|
00008e  f7fffffe          BL       delay_ms
;;;65     	SSD1306_Clear();
000092  f7fffffe          BL       SSD1306_Clear
;;;66     	SSD1306_GotoXY (0,0);
000096  2100              MOVS     r1,#0
000098  4608              MOV      r0,r1
00009a  f7fffffe          BL       SSD1306_GotoXY
;;;67     	SSD1306_Puts ("HELLO STM32F446ZE", &Font_7x10, SSD1306_COLOR_WHITE);
00009e  2201              MOVS     r2,#1
0000a0  4929              LDR      r1,|L9.328|
0000a2  a035              ADR      r0,|L9.376|
0000a4  f7fffffe          BL       SSD1306_Puts
;;;68     	SSD1306_GotoXY (0,10);
0000a8  210a              MOVS     r1,#0xa
0000aa  2000              MOVS     r0,#0
0000ac  f7fffffe          BL       SSD1306_GotoXY
;;;69     	SSD1306_Puts (":) => :) => :)", &Font_7x10, SSD1306_COLOR_WHITE);
0000b0  2201              MOVS     r2,#1
0000b2  4925              LDR      r1,|L9.328|
0000b4  a035              ADR      r0,|L9.396|
0000b6  f7fffffe          BL       SSD1306_Puts
;;;70     	SSD1306_GotoXY (0, 20);
0000ba  2114              MOVS     r1,#0x14
0000bc  2000              MOVS     r0,#0
0000be  f7fffffe          BL       SSD1306_GotoXY
;;;71     	SSD1306_Puts ("LED1:OFF", &Font_7x10, SSD1306_COLOR_WHITE);
0000c2  2201              MOVS     r2,#1
0000c4  4920              LDR      r1,|L9.328|
0000c6  a035              ADR      r0,|L9.412|
0000c8  f7fffffe          BL       SSD1306_Puts
;;;72     	SSD1306_GotoXY (0, 30);
0000cc  211e              MOVS     r1,#0x1e
0000ce  2000              MOVS     r0,#0
0000d0  f7fffffe          BL       SSD1306_GotoXY
;;;73     	SSD1306_Puts ("LED2:OFF", &Font_7x10, SSD1306_COLOR_WHITE);
0000d4  2201              MOVS     r2,#1
0000d6  491c              LDR      r1,|L9.328|
0000d8  a033              ADR      r0,|L9.424|
0000da  f7fffffe          BL       SSD1306_Puts
;;;74     	SSD1306_GotoXY (0, 40);
0000de  2128              MOVS     r1,#0x28
0000e0  2000              MOVS     r0,#0
0000e2  f7fffffe          BL       SSD1306_GotoXY
;;;75     	SSD1306_Puts ("LED3:OFF", &Font_7x10, SSD1306_COLOR_WHITE);
0000e6  2201              MOVS     r2,#1
0000e8  4917              LDR      r1,|L9.328|
0000ea  a032              ADR      r0,|L9.436|
0000ec  f7fffffe          BL       SSD1306_Puts
;;;76     	SSD1306_GotoXY (60, 20);
0000f0  2114              MOVS     r1,#0x14
0000f2  203c              MOVS     r0,#0x3c
0000f4  f7fffffe          BL       SSD1306_GotoXY
;;;77     	SSD1306_Puts ("LED4:OFF", &Font_7x10, SSD1306_COLOR_WHITE);
0000f8  2201              MOVS     r2,#1
0000fa  4913              LDR      r1,|L9.328|
0000fc  a030              ADR      r0,|L9.448|
0000fe  f7fffffe          BL       SSD1306_Puts
;;;78     	SSD1306_GotoXY (60, 30);
000102  211e              MOVS     r1,#0x1e
000104  203c              MOVS     r0,#0x3c
000106  f7fffffe          BL       SSD1306_GotoXY
;;;79     	SSD1306_Puts ("LED5:OFF", &Font_7x10, SSD1306_COLOR_WHITE);
00010a  2201              MOVS     r2,#1
00010c  490e              LDR      r1,|L9.328|
00010e  a02f              ADR      r0,|L9.460|
000110  f7fffffe          BL       SSD1306_Puts
;;;80     	SSD1306_GotoXY (60, 40);
000114  2128              MOVS     r1,#0x28
000116  203c              MOVS     r0,#0x3c
000118  f7fffffe          BL       SSD1306_GotoXY
;;;81     	SSD1306_Puts ("LED6:OFF", &Font_7x10, SSD1306_COLOR_WHITE);
00011c  2201              MOVS     r2,#1
00011e  490a              LDR      r1,|L9.328|
000120  a02d              ADR      r0,|L9.472|
000122  f7fffffe          BL       SSD1306_Puts
;;;82     	SSD1306_UpdateScreen();	
000126  f7fffffe          BL       SSD1306_UpdateScreen
;;;83     	while(1){
00012a  e005              B        |L9.312|
                  |L9.300|
;;;84     //		value_adc = Read_ADC1(ADC_Channel_3);
;;;85     //		sprintf(c,"Val_ADC:%d     ",value_adc);
;;;86     //		SSD1306_GotoXY (0, 50);
;;;87     //		SSD1306_Puts (c, &Font_7x10, SSD1306_COLOR_WHITE);
;;;88     //		SSD1306_UpdateScreen();
;;;89     
;;;90     		delay_ms(100);
00012c  ed9f0b2d          VLDR     d0,|L9.484|
000130  f7fffffe          BL       delay_ms
;;;91     		IWDG_ReloadCounter(); 
000134  f7fffffe          BL       IWDG_ReloadCounter
                  |L9.312|
000138  e7f8              B        |L9.300|
;;;92      }
;;;93     }
;;;94     void EXTILine13_Config(void)
                          ENDP

00013a  0000              DCW      0x0000
                  |L9.316|
                          DCD      0x40020400
                  |L9.320|
                          DCD      0x40021000
                  |L9.324|
                          DCD      0x40004400
                  |L9.328|
                          DCD      Font_7x10
                  |L9.332|
00014c  48454c4c          DCB      "HELLO STM32F446ZE ",0
000150  4f205354
000154  4d333246
000158  3434365a
00015c  452000  
00015f  00                DCB      0
                  |L9.352|
                          DCD      Font_11x18
                  |L9.356|
000164  48454c4c          DCB      "HELLO WORLD",0
000168  4f20574f
00016c  524c4400
                  |L9.368|
000170  00000000          DCFD     0x409f400000000000 ; 2000
000174  409f4000
                  |L9.376|
000178  48454c4c          DCB      "HELLO STM32F446ZE",0
00017c  4f205354
000180  4d333246
000184  3434365a
000188  4500    
00018a  00                DCB      0
00018b  00                DCB      0
                  |L9.396|
00018c  3a29203d          DCB      ":) => :) => :)",0
000190  3e203a29
000194  203d3e20
000198  3a2900  
00019b  00                DCB      0
                  |L9.412|
00019c  4c454431          DCB      "LED1:OFF",0
0001a0  3a4f4646
0001a4  00      
0001a5  00                DCB      0
0001a6  00                DCB      0
0001a7  00                DCB      0
                  |L9.424|
0001a8  4c454432          DCB      "LED2:OFF",0
0001ac  3a4f4646
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L9.436|
0001b4  4c454433          DCB      "LED3:OFF",0
0001b8  3a4f4646
0001bc  00      
0001bd  00                DCB      0
0001be  00                DCB      0
0001bf  00                DCB      0
                  |L9.448|
0001c0  4c454434          DCB      "LED4:OFF",0
0001c4  3a4f4646
0001c8  00      
0001c9  00                DCB      0
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L9.460|
0001cc  4c454435          DCB      "LED5:OFF",0
0001d0  3a4f4646
0001d4  00      
0001d5  00                DCB      0
0001d6  00                DCB      0
0001d7  00                DCB      0
                  |L9.472|
0001d8  4c454436          DCB      "LED6:OFF",0
0001dc  3a4f4646
0001e0  00      
0001e1  00                DCB      0
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L9.484|
0001e4  00000000          DCFD     0x4059000000000000 ; 100
0001e8  40590000

                          AREA ||.ARM.exidx||, LINKORDER=||i.IWDG_Config||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i.IWDG_Config||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i.ADC_Config||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.ADC_Config||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i.EXTILine13_Config||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.EXTILine13_Config||
                          DCD      0x00000001

                          AREA ||area_number.13||, LINKORDER=||i.I2C1_Nvic||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.I2C1_Nvic||
                          DCD      0x00000001

                          AREA ||area_number.14||, LINKORDER=||i.DMA1I2C_Config||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.DMA1I2C_Config||
                          DCD      0x00000001

                          AREA ||area_number.15||, LINKORDER=||i.main||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.main||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i.Read_ADC1||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.Read_ADC1||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i.EXTI15_10_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.EXTI15_10_IRQHandler||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i.I2C1_ER_IRQHandler||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.I2C1_ER_IRQHandler||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Rx_data
                          %        59
                  c
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  Rx_indx
000000  0000              DCB      0x00,0x00
                  value_adc
000002  0000              DCB      0x00,0x00
                  SSD1306_Buffer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "SCR\\main.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_main___Z7__REV16j|
#line 138 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_main_cpp_main___Z7__REV16j| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_main___Z7__REVSHi|
#line 153
|__asm___8_main_cpp_main___Z7__REVSHi| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_main___Z5__RRXj|
#line 328
|__asm___8_main_cpp_main___Z5__RRXj| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
