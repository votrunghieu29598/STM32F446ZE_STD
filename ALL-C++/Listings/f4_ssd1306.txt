; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\f4_ssd1306.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\f4_ssd1306.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I.\USER -I.\SCR -I.\Libraries\CMSIS\Include -I.\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I.\Libraries\STM32F4xx_StdPeriph_Driver\inc -D__UVISION_VERSION=535 -DSTM32F446xx -DUSE_STDPERIPH_DRIVER -DSTM32F446xx -DHSE_VALUE=8000000 --omf_browse=.\objects\f4_ssd1306.crf USER\f4_ssd1306.c]
                          THUMB

                          AREA ||i.SSD1306_Clear||, CODE, READONLY, ALIGN=1

                  SSD1306_Clear PROC
;;;595    
;;;596    void SSD1306_Clear (void)
000000  b510              PUSH     {r4,lr}
;;;597    {
;;;598    	SSD1306_Fill (SSD1306_COLOR_BLACK);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SSD1306_Fill
;;;599      SSD1306_UpdateScreen();
000008  f7fffffe          BL       SSD1306_UpdateScreen
;;;600    }
00000c  bd10              POP      {r4,pc}
;;;601    void SSD1306_ON(void) 
                          ENDP


                          AREA ||i.SSD1306_DrawBitmap||, CODE, READONLY, ALIGN=1

                  SSD1306_DrawBitmap PROC
;;;133    
;;;134    void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, SSD1306_COLOR_t color)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;135    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;136    
;;;137        int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
000010  1df0              ADDS     r0,r6,#7
000012  17c1              ASRS     r1,r0,#31
000014  eb007151          ADD      r1,r0,r1,LSR #29
000018  10c9              ASRS     r1,r1,#3
00001a  b209              SXTH     r1,r1
00001c  9100              STR      r1,[sp,#0]
;;;138        uint8_t byte = 0;
00001e  f04f0a00          MOV      r10,#0
;;;139    
;;;140        for(int16_t j=0; j<h; j++, y++)
000022  2700              MOVS     r7,#0
000024  e025              B        |L2.114|
                  |L2.38|
;;;141        {
;;;142            for(int16_t i=0; i<w; i++)
000026  2400              MOVS     r4,#0
000028  e01d              B        |L2.102|
                  |L2.42|
;;;143            {
;;;144                if(i & 7)
00002a  f0040007          AND      r0,r4,#7
00002e  b120              CBZ      r0,|L2.58|
;;;145                {
;;;146                   byte <<= 1;
000030  ea4f604a          LSL      r0,r10,#25
000034  ea4f6a10          LSR      r10,r0,#24
000038  e009              B        |L2.78|
                  |L2.58|
;;;147                }
;;;148                else
;;;149                {
;;;150                   byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
00003a  4620              MOV      r0,r4
00003c  17e1              ASRS     r1,r4,#31
00003e  eb047151          ADD      r1,r4,r1,LSR #29
000042  10ca              ASRS     r2,r1,#3
000044  9900              LDR      r1,[sp,#0]
000046  fb072101          MLA      r1,r7,r1,r2
00004a  f819a001          LDRB     r10,[r9,r1]
                  |L2.78|
;;;151                }
;;;152                if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
00004e  f00a0080          AND      r0,r10,#0x80
000052  b130              CBZ      r0,|L2.98|
000054  b2a9              UXTH     r1,r5
000056  eb080204          ADD      r2,r8,r4
00005a  b290              UXTH     r0,r2
00005c  9a0b              LDR      r2,[sp,#0x2c]
00005e  f7fffffe          BL       SSD1306_DrawPixel
                  |L2.98|
000062  1c60              ADDS     r0,r4,#1              ;142
000064  b204              SXTH     r4,r0                 ;142
                  |L2.102|
000066  42b4              CMP      r4,r6                 ;142
000068  dbdf              BLT      |L2.42|
00006a  1c78              ADDS     r0,r7,#1              ;140
00006c  b207              SXTH     r7,r0                 ;140
00006e  1c68              ADDS     r0,r5,#1              ;140
000070  b205              SXTH     r5,r0                 ;140
                  |L2.114|
000072  455f              CMP      r7,r11                ;140
000074  dbd7              BLT      |L2.38|
;;;153            }
;;;154        }
;;;155    }
000076  e8bd8ff8          POP      {r3-r11,pc}
;;;156    uint8_t SSD1306_Init(void) {
                          ENDP


                          AREA ||i.SSD1306_DrawCircle||, CODE, READONLY, ALIGN=1

                  SSD1306_DrawCircle PROC
;;;528    
;;;529    void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
;;;530    	int16_t f = 1 - r;
00000a  f1c80001          RSB      r0,r8,#1
00000e  fa0ff980          SXTH     r9,r0
;;;531    	int16_t ddF_x = 1;
000012  f04f0a01          MOV      r10,#1
;;;532    	int16_t ddF_y = -2 * r;
000016  ea4f0048          LSL      r0,r8,#1
00001a  4240              RSBS     r0,r0,#0
00001c  fa0ffb80          SXTH     r11,r0
;;;533    	int16_t x = 0;
000020  2700              MOVS     r7,#0
;;;534    	int16_t y = r;
000022  4644              MOV      r4,r8
;;;535    
;;;536        SSD1306_DrawPixel(x0, y0 + r, c);
000024  eb060208          ADD      r2,r6,r8
000028  b291              UXTH     r1,r2
00002a  b2a8              UXTH     r0,r5
00002c  9a03              LDR      r2,[sp,#0xc]
00002e  f7fffffe          BL       SSD1306_DrawPixel
;;;537        SSD1306_DrawPixel(x0, y0 - r, c);
000032  eba60208          SUB      r2,r6,r8
000036  b291              UXTH     r1,r2
000038  b2a8              UXTH     r0,r5
00003a  9a03              LDR      r2,[sp,#0xc]
00003c  f7fffffe          BL       SSD1306_DrawPixel
;;;538        SSD1306_DrawPixel(x0 + r, y0, c);
000040  b2b1              UXTH     r1,r6
000042  eb050208          ADD      r2,r5,r8
000046  b290              UXTH     r0,r2
000048  9a03              LDR      r2,[sp,#0xc]
00004a  f7fffffe          BL       SSD1306_DrawPixel
;;;539        SSD1306_DrawPixel(x0 - r, y0, c);
00004e  b2b1              UXTH     r1,r6
000050  eba50208          SUB      r2,r5,r8
000054  b290              UXTH     r0,r2
000056  9a03              LDR      r2,[sp,#0xc]
000058  f7fffffe          BL       SSD1306_DrawPixel
;;;540    
;;;541        while (x < y) {
00005c  e04e              B        |L3.252|
                  |L3.94|
;;;542            if (f >= 0) {
00005e  f1b90f00          CMP      r9,#0
000062  db09              BLT      |L3.120|
;;;543                y--;
000064  1e60              SUBS     r0,r4,#1
000066  b204              SXTH     r4,r0
;;;544                ddF_y += 2;
000068  f10b0002          ADD      r0,r11,#2
00006c  fa0ffb80          SXTH     r11,r0
;;;545                f += ddF_y;
000070  eb09000b          ADD      r0,r9,r11
000074  fa0ff980          SXTH     r9,r0
                  |L3.120|
;;;546            }
;;;547            x++;
000078  1c78              ADDS     r0,r7,#1
00007a  b207              SXTH     r7,r0
;;;548            ddF_x += 2;
00007c  f10a0002          ADD      r0,r10,#2
000080  fa0ffa80          SXTH     r10,r0
;;;549            f += ddF_x;
000084  eb09000a          ADD      r0,r9,r10
000088  fa0ff980          SXTH     r9,r0
;;;550    
;;;551            SSD1306_DrawPixel(x0 + x, y0 + y, c);
00008c  1932              ADDS     r2,r6,r4
00008e  b291              UXTH     r1,r2
000090  19ea              ADDS     r2,r5,r7
000092  b290              UXTH     r0,r2
000094  9a03              LDR      r2,[sp,#0xc]
000096  f7fffffe          BL       SSD1306_DrawPixel
;;;552            SSD1306_DrawPixel(x0 - x, y0 + y, c);
00009a  1932              ADDS     r2,r6,r4
00009c  b291              UXTH     r1,r2
00009e  1bea              SUBS     r2,r5,r7
0000a0  b290              UXTH     r0,r2
0000a2  9a03              LDR      r2,[sp,#0xc]
0000a4  f7fffffe          BL       SSD1306_DrawPixel
;;;553            SSD1306_DrawPixel(x0 + x, y0 - y, c);
0000a8  1b32              SUBS     r2,r6,r4
0000aa  b291              UXTH     r1,r2
0000ac  19ea              ADDS     r2,r5,r7
0000ae  b290              UXTH     r0,r2
0000b0  9a03              LDR      r2,[sp,#0xc]
0000b2  f7fffffe          BL       SSD1306_DrawPixel
;;;554            SSD1306_DrawPixel(x0 - x, y0 - y, c);
0000b6  1b32              SUBS     r2,r6,r4
0000b8  b291              UXTH     r1,r2
0000ba  1bea              SUBS     r2,r5,r7
0000bc  b290              UXTH     r0,r2
0000be  9a03              LDR      r2,[sp,#0xc]
0000c0  f7fffffe          BL       SSD1306_DrawPixel
;;;555    
;;;556            SSD1306_DrawPixel(x0 + y, y0 + x, c);
0000c4  19f2              ADDS     r2,r6,r7
0000c6  b291              UXTH     r1,r2
0000c8  192a              ADDS     r2,r5,r4
0000ca  b290              UXTH     r0,r2
0000cc  9a03              LDR      r2,[sp,#0xc]
0000ce  f7fffffe          BL       SSD1306_DrawPixel
;;;557            SSD1306_DrawPixel(x0 - y, y0 + x, c);
0000d2  19f2              ADDS     r2,r6,r7
0000d4  b291              UXTH     r1,r2
0000d6  1b2a              SUBS     r2,r5,r4
0000d8  b290              UXTH     r0,r2
0000da  9a03              LDR      r2,[sp,#0xc]
0000dc  f7fffffe          BL       SSD1306_DrawPixel
;;;558            SSD1306_DrawPixel(x0 + y, y0 - x, c);
0000e0  1bf2              SUBS     r2,r6,r7
0000e2  b291              UXTH     r1,r2
0000e4  192a              ADDS     r2,r5,r4
0000e6  b290              UXTH     r0,r2
0000e8  9a03              LDR      r2,[sp,#0xc]
0000ea  f7fffffe          BL       SSD1306_DrawPixel
;;;559            SSD1306_DrawPixel(x0 - y, y0 - x, c);
0000ee  1bf2              SUBS     r2,r6,r7
0000f0  b291              UXTH     r1,r2
0000f2  1b2a              SUBS     r2,r5,r4
0000f4  b290              UXTH     r0,r2
0000f6  9a03              LDR      r2,[sp,#0xc]
0000f8  f7fffffe          BL       SSD1306_DrawPixel
                  |L3.252|
0000fc  42a7              CMP      r7,r4                 ;541
0000fe  dbae              BLT      |L3.94|
;;;560        }
;;;561    }
000100  e8bd8fff          POP      {r0-r11,pc}
;;;562    
                          ENDP


                          AREA ||i.SSD1306_DrawFilledCircle||, CODE, READONLY, ALIGN=1

                  SSD1306_DrawFilledCircle PROC
;;;562    
;;;563    void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
000000  e92d4ffc          PUSH     {r2-r11,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4699              MOV      r9,r3
;;;564    	int16_t f = 1 - r;
00000c  f1c70001          RSB      r0,r7,#1
000010  fa0ffa80          SXTH     r10,r0
;;;565    	int16_t ddF_x = 1;
000014  f04f0b01          MOV      r11,#1
;;;566    	int16_t ddF_y = -2 * r;
000018  0078              LSLS     r0,r7,#1
00001a  4240              RSBS     r0,r0,#0
00001c  b200              SXTH     r0,r0
00001e  9001              STR      r0,[sp,#4]
;;;567    	int16_t x = 0;
000020  f04f0800          MOV      r8,#0
;;;568    	int16_t y = r;
000024  463c              MOV      r4,r7
;;;569    
;;;570        SSD1306_DrawPixel(x0, y0 + r, c);
000026  19f2              ADDS     r2,r6,r7
000028  b291              UXTH     r1,r2
00002a  b2a8              UXTH     r0,r5
00002c  464a              MOV      r2,r9
00002e  f7fffffe          BL       SSD1306_DrawPixel
;;;571        SSD1306_DrawPixel(x0, y0 - r, c);
000032  1bf2              SUBS     r2,r6,r7
000034  b291              UXTH     r1,r2
000036  b2a8              UXTH     r0,r5
000038  464a              MOV      r2,r9
00003a  f7fffffe          BL       SSD1306_DrawPixel
;;;572        SSD1306_DrawPixel(x0 + r, y0, c);
00003e  b2b1              UXTH     r1,r6
000040  19ea              ADDS     r2,r5,r7
000042  b290              UXTH     r0,r2
000044  464a              MOV      r2,r9
000046  f7fffffe          BL       SSD1306_DrawPixel
;;;573        SSD1306_DrawPixel(x0 - r, y0, c);
00004a  b2b1              UXTH     r1,r6
00004c  1bea              SUBS     r2,r5,r7
00004e  b290              UXTH     r0,r2
000050  464a              MOV      r2,r9
000052  f7fffffe          BL       SSD1306_DrawPixel
;;;574        SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
000056  b2b3              UXTH     r3,r6
000058  eb050c07          ADD      r12,r5,r7
00005c  fa1ff28c          UXTH     r2,r12
000060  b2b1              UXTH     r1,r6
000062  eba50c07          SUB      r12,r5,r7
000066  fa1ff08c          UXTH     r0,r12
00006a  f8cd9000          STR      r9,[sp,#0]
00006e  f7fffffe          BL       SSD1306_DrawLine
;;;575    
;;;576        while (x < y) {
000072  e068              B        |L4.326|
                  |L4.116|
;;;577            if (f >= 0) {
000074  f1ba0f00          CMP      r10,#0
000078  db09              BLT      |L4.142|
;;;578                y--;
00007a  1e60              SUBS     r0,r4,#1
00007c  b204              SXTH     r4,r0
;;;579                ddF_y += 2;
00007e  9801              LDR      r0,[sp,#4]
000080  1c80              ADDS     r0,r0,#2
000082  b200              SXTH     r0,r0
000084  9001              STR      r0,[sp,#4]
;;;580                f += ddF_y;
000086  9801              LDR      r0,[sp,#4]
000088  4450              ADD      r0,r0,r10
00008a  fa0ffa80          SXTH     r10,r0
                  |L4.142|
;;;581            }
;;;582            x++;
00008e  f1080001          ADD      r0,r8,#1
000092  fa0ff880          SXTH     r8,r0
;;;583            ddF_x += 2;
000096  f10b0002          ADD      r0,r11,#2
00009a  fa0ffb80          SXTH     r11,r0
;;;584            f += ddF_x;
00009e  eb0a000b          ADD      r0,r10,r11
0000a2  fa0ffa80          SXTH     r10,r0
;;;585    
;;;586            SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
0000a6  eb060c04          ADD      r12,r6,r4
0000aa  fa1ff38c          UXTH     r3,r12
0000ae  eb050c08          ADD      r12,r5,r8
0000b2  fa1ff28c          UXTH     r2,r12
0000b6  eb060c04          ADD      r12,r6,r4
0000ba  fa1ff18c          UXTH     r1,r12
0000be  eba50c08          SUB      r12,r5,r8
0000c2  fa1ff08c          UXTH     r0,r12
0000c6  f8cd9000          STR      r9,[sp,#0]
0000ca  f7fffffe          BL       SSD1306_DrawLine
;;;587            SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
0000ce  eba60c04          SUB      r12,r6,r4
0000d2  fa1ff38c          UXTH     r3,r12
0000d6  eba50c08          SUB      r12,r5,r8
0000da  fa1ff28c          UXTH     r2,r12
0000de  eba60c04          SUB      r12,r6,r4
0000e2  fa1ff18c          UXTH     r1,r12
0000e6  eb050c08          ADD      r12,r5,r8
0000ea  fa1ff08c          UXTH     r0,r12
0000ee  f8cd9000          STR      r9,[sp,#0]
0000f2  f7fffffe          BL       SSD1306_DrawLine
;;;588    
;;;589            SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
0000f6  eb060c08          ADD      r12,r6,r8
0000fa  fa1ff38c          UXTH     r3,r12
0000fe  eba50c04          SUB      r12,r5,r4
000102  fa1ff28c          UXTH     r2,r12
000106  eb060c08          ADD      r12,r6,r8
00010a  fa1ff18c          UXTH     r1,r12
00010e  eb050c04          ADD      r12,r5,r4
000112  fa1ff08c          UXTH     r0,r12
000116  f8cd9000          STR      r9,[sp,#0]
00011a  f7fffffe          BL       SSD1306_DrawLine
;;;590            SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
00011e  eba60c08          SUB      r12,r6,r8
000122  fa1ff38c          UXTH     r3,r12
000126  eba50c04          SUB      r12,r5,r4
00012a  fa1ff28c          UXTH     r2,r12
00012e  eba60c08          SUB      r12,r6,r8
000132  fa1ff18c          UXTH     r1,r12
000136  eb050c04          ADD      r12,r5,r4
00013a  fa1ff08c          UXTH     r0,r12
00013e  f8cd9000          STR      r9,[sp,#0]
000142  f7fffffe          BL       SSD1306_DrawLine
                  |L4.326|
000146  45a0              CMP      r8,r4                 ;576
000148  db94              BLT      |L4.116|
;;;591        }
;;;592    }
00014a  e8bd8ffc          POP      {r2-r11,pc}
;;;593     
                          ENDP


                          AREA ||i.SSD1306_DrawFilledRectangle||, CODE, READONLY, ALIGN=1

                  SSD1306_DrawFilledRectangle PROC
;;;437    
;;;438    void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
000000  e92d43f8          PUSH     {r3-r9,lr}
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;439    	uint8_t i;
;;;440    	
;;;441    	/* Check input parameters */
;;;442    	if (
000010  2d80              CMP      r5,#0x80
000012  da01              BGE      |L5.24|
;;;443    		x >= SSD1306_WIDTH ||
;;;444    		y >= SSD1306_HEIGHT
000014  2c40              CMP      r4,#0x40
000016  db01              BLT      |L5.28|
                  |L5.24|
;;;445    	) {
;;;446    		/* Return error */
;;;447    		return;
;;;448    	}
;;;449    	
;;;450    	/* Check width and height */
;;;451    	if ((x + w) >= SSD1306_WIDTH) {
;;;452    		w = SSD1306_WIDTH - x;
;;;453    	}
;;;454    	if ((y + h) >= SSD1306_HEIGHT) {
;;;455    		h = SSD1306_HEIGHT - y;
;;;456    	}
;;;457    	
;;;458    	/* Draw lines */
;;;459    	for (i = 0; i <= h; i++) {
;;;460    		/* Draw lines */
;;;461    		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
;;;462    	}
;;;463    }
000018  e8bd83f8          POP      {r3-r9,pc}
                  |L5.28|
00001c  19e8              ADDS     r0,r5,r7              ;451
00001e  2880              CMP      r0,#0x80              ;451
000020  db02              BLT      |L5.40|
000022  f1c50080          RSB      r0,r5,#0x80           ;452
000026  b287              UXTH     r7,r0                 ;452
                  |L5.40|
000028  eb040008          ADD      r0,r4,r8              ;454
00002c  2840              CMP      r0,#0x40              ;454
00002e  db03              BLT      |L5.56|
000030  f1c40040          RSB      r0,r4,#0x40           ;455
000034  fa1ff880          UXTH     r8,r0                 ;455
                  |L5.56|
000038  2600              MOVS     r6,#0                 ;459
00003a  e00c              B        |L5.86|
                  |L5.60|
00003c  19a0              ADDS     r0,r4,r6              ;461
00003e  b283              UXTH     r3,r0                 ;461
000040  19e8              ADDS     r0,r5,r7              ;461
000042  b282              UXTH     r2,r0                 ;461
000044  19a0              ADDS     r0,r4,r6              ;461
000046  b281              UXTH     r1,r0                 ;461
000048  4628              MOV      r0,r5                 ;461
00004a  f8cd9000          STR      r9,[sp,#0]            ;461
00004e  f7fffffe          BL       SSD1306_DrawLine
000052  1c70              ADDS     r0,r6,#1              ;459
000054  b2c6              UXTB     r6,r0                 ;459
                  |L5.86|
000056  4546              CMP      r6,r8                 ;459
000058  ddf0              BLE      |L5.60|
00005a  bf00              NOP      
00005c  e7dc              B        |L5.24|
;;;464    
                          ENDP


                          AREA ||i.SSD1306_DrawFilledTriangle||, CODE, READONLY, ALIGN=1

                  SSD1306_DrawFilledTriangle PROC
;;;472    
;;;473    void SSD1306_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08a              SUB      sp,sp,#0x28
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
;;;474    	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
00000e  2700              MOVS     r7,#0
000010  46b8              MOV      r8,r7
000012  46bb              MOV      r11,r7
000014  2000              MOVS     r0,#0
000016  9009              STR      r0,[sp,#0x24]
000018  9008              STR      r0,[sp,#0x20]
00001a  9007              STR      r0,[sp,#0x1c]
;;;475    	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
00001c  9006              STR      r0,[sp,#0x18]
00001e  9005              STR      r0,[sp,#0x14]
000020  2400              MOVS     r4,#0
000022  9004              STR      r0,[sp,#0x10]
000024  9003              STR      r0,[sp,#0xc]
000026  9002              STR      r0,[sp,#8]
;;;476    	curpixel = 0;
000028  9001              STR      r0,[sp,#4]
;;;477    	
;;;478    	deltax = ABS(x2 - x1);
00002a  eba90005          SUB      r0,r9,r5
00002e  2800              CMP      r0,#0
000030  dd02              BLE      |L6.56|
000032  eba90005          SUB      r0,r9,r5
000036  e001              B        |L6.60|
                  |L6.56|
000038  eba50009          SUB      r0,r5,r9
                  |L6.60|
00003c  b207              SXTH     r7,r0
;;;479    	deltay = ABS(y2 - y1);
00003e  ebaa0006          SUB      r0,r10,r6
000042  2800              CMP      r0,#0
000044  dd02              BLE      |L6.76|
000046  ebaa0006          SUB      r0,r10,r6
00004a  e001              B        |L6.80|
                  |L6.76|
00004c  eba6000a          SUB      r0,r6,r10
                  |L6.80|
000050  fa0ff880          SXTH     r8,r0
;;;480    	x = x1;
000054  fa0ffb85          SXTH     r11,r5
;;;481    	y = y1;
000058  b230              SXTH     r0,r6
00005a  9009              STR      r0,[sp,#0x24]
;;;482    
;;;483    	if (x2 >= x1) {
00005c  45a9              CMP      r9,r5
00005e  db03              BLT      |L6.104|
;;;484    		xinc1 = 1;
000060  2001              MOVS     r0,#1
000062  9008              STR      r0,[sp,#0x20]
;;;485    		xinc2 = 1;
000064  9007              STR      r0,[sp,#0x1c]
000066  e003              B        |L6.112|
                  |L6.104|
;;;486    	} else {
;;;487    		xinc1 = -1;
000068  f04f30ff          MOV      r0,#0xffffffff
00006c  9008              STR      r0,[sp,#0x20]
;;;488    		xinc2 = -1;
00006e  9007              STR      r0,[sp,#0x1c]
                  |L6.112|
;;;489    	}
;;;490    
;;;491    	if (y2 >= y1) {
000070  45b2              CMP      r10,r6
000072  db03              BLT      |L6.124|
;;;492    		yinc1 = 1;
000074  2001              MOVS     r0,#1
000076  9006              STR      r0,[sp,#0x18]
;;;493    		yinc2 = 1;
000078  9005              STR      r0,[sp,#0x14]
00007a  e003              B        |L6.132|
                  |L6.124|
;;;494    	} else {
;;;495    		yinc1 = -1;
00007c  f04f30ff          MOV      r0,#0xffffffff
000080  9006              STR      r0,[sp,#0x18]
;;;496    		yinc2 = -1;
000082  9005              STR      r0,[sp,#0x14]
                  |L6.132|
;;;497    	}
;;;498    
;;;499    	if (deltax >= deltay){
000084  4547              CMP      r7,r8
000086  db0d              BLT      |L6.164|
;;;500    		xinc1 = 0;
000088  2000              MOVS     r0,#0
00008a  9008              STR      r0,[sp,#0x20]
;;;501    		yinc2 = 0;
00008c  9005              STR      r0,[sp,#0x14]
;;;502    		den = deltax;
00008e  463c              MOV      r4,r7
;;;503    		num = deltax / 2;
000090  4638              MOV      r0,r7
000092  eb0771d0          ADD      r1,r7,r0,LSR #31
000096  1049              ASRS     r1,r1,#1
000098  b209              SXTH     r1,r1
00009a  9104              STR      r1,[sp,#0x10]
;;;504    		numadd = deltay;
00009c  f8cd800c          STR      r8,[sp,#0xc]
;;;505    		numpixels = deltax;
0000a0  9702              STR      r7,[sp,#8]
0000a2  e00c              B        |L6.190|
                  |L6.164|
;;;506    	} else {
;;;507    		xinc2 = 0;
0000a4  2000              MOVS     r0,#0
0000a6  9007              STR      r0,[sp,#0x1c]
;;;508    		yinc1 = 0;
0000a8  9006              STR      r0,[sp,#0x18]
;;;509    		den = deltay;
0000aa  4644              MOV      r4,r8
;;;510    		num = deltay / 2;
0000ac  4640              MOV      r0,r8
0000ae  eb0871d0          ADD      r1,r8,r0,LSR #31
0000b2  1049              ASRS     r1,r1,#1
0000b4  b209              SXTH     r1,r1
0000b6  9104              STR      r1,[sp,#0x10]
;;;511    		numadd = deltax;
0000b8  9703              STR      r7,[sp,#0xc]
;;;512    		numpixels = deltay;
0000ba  f8cd8008          STR      r8,[sp,#8]
                  |L6.190|
;;;513    	}
;;;514    
;;;515    	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
0000be  2000              MOVS     r0,#0
0000c0  9001              STR      r0,[sp,#4]
0000c2  e02b              B        |L6.284|
                  |L6.196|
;;;516    		SSD1306_DrawLine(x, y, x3, y3, color);
0000c4  9815              LDR      r0,[sp,#0x54]
0000c6  9000              STR      r0,[sp,#0]
0000c8  9a09              LDR      r2,[sp,#0x24]
0000ca  b291              UXTH     r1,r2
0000cc  fa1ff08b          UXTH     r0,r11
0000d0  e9dd2313          LDRD     r2,r3,[sp,#0x4c]
0000d4  f7fffffe          BL       SSD1306_DrawLine
;;;517    
;;;518    		num += numadd;
0000d8  e9dd1003          LDRD     r1,r0,[sp,#0xc]
0000dc  4408              ADD      r0,r0,r1
0000de  b200              SXTH     r0,r0
0000e0  9004              STR      r0,[sp,#0x10]
;;;519    		if (num >= den) {
0000e2  9804              LDR      r0,[sp,#0x10]
0000e4  42a0              CMP      r0,r4
0000e6  db0c              BLT      |L6.258|
;;;520    			num -= den;
0000e8  9804              LDR      r0,[sp,#0x10]
0000ea  1b00              SUBS     r0,r0,r4
0000ec  b200              SXTH     r0,r0
0000ee  9004              STR      r0,[sp,#0x10]
;;;521    			x += xinc1;
0000f0  9808              LDR      r0,[sp,#0x20]
0000f2  4458              ADD      r0,r0,r11
0000f4  fa0ffb80          SXTH     r11,r0
;;;522    			y += yinc1;
0000f8  9906              LDR      r1,[sp,#0x18]
0000fa  9809              LDR      r0,[sp,#0x24]
0000fc  4408              ADD      r0,r0,r1
0000fe  b200              SXTH     r0,r0
000100  9009              STR      r0,[sp,#0x24]
                  |L6.258|
;;;523    		}
;;;524    		x += xinc2;
000102  9807              LDR      r0,[sp,#0x1c]
000104  4458              ADD      r0,r0,r11
000106  fa0ffb80          SXTH     r11,r0
;;;525    		y += yinc2;
00010a  9905              LDR      r1,[sp,#0x14]
00010c  9809              LDR      r0,[sp,#0x24]
00010e  4408              ADD      r0,r0,r1
000110  b200              SXTH     r0,r0
000112  9009              STR      r0,[sp,#0x24]
000114  9801              LDR      r0,[sp,#4]            ;515
000116  1c40              ADDS     r0,r0,#1              ;515
000118  b200              SXTH     r0,r0                 ;515
00011a  9001              STR      r0,[sp,#4]            ;515
                  |L6.284|
00011c  e9dd0101          LDRD     r0,r1,[sp,#4]         ;515
000120  4288              CMP      r0,r1                 ;515
000122  ddcf              BLE      |L6.196|
;;;526    	}
;;;527    }
000124  b00a              ADD      sp,sp,#0x28
000126  e8bd8ff0          POP      {r4-r11,pc}
;;;528    
                          ENDP


                          AREA ||i.SSD1306_DrawLine||, CODE, READONLY, ALIGN=1

                  SSD1306_DrawLine PROC
;;;328    
;;;329    void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;330    	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
;;;331    	
;;;332    	/* Check for overflow */
;;;333    	if (x0 >= SSD1306_WIDTH) {
00000c  2c80              CMP      r4,#0x80
00000e  db00              BLT      |L7.18|
;;;334    		x0 = SSD1306_WIDTH - 1;
000010  247f              MOVS     r4,#0x7f
                  |L7.18|
;;;335    	}
;;;336    	if (x1 >= SSD1306_WIDTH) {
000012  2e80              CMP      r6,#0x80
000014  db00              BLT      |L7.24|
;;;337    		x1 = SSD1306_WIDTH - 1;
000016  267f              MOVS     r6,#0x7f
                  |L7.24|
;;;338    	}
;;;339    	if (y0 >= SSD1306_HEIGHT) {
000018  2d40              CMP      r5,#0x40
00001a  db00              BLT      |L7.30|
;;;340    		y0 = SSD1306_HEIGHT - 1;
00001c  253f              MOVS     r5,#0x3f
                  |L7.30|
;;;341    	}
;;;342    	if (y1 >= SSD1306_HEIGHT) {
00001e  2f40              CMP      r7,#0x40
000020  db00              BLT      |L7.36|
;;;343    		y1 = SSD1306_HEIGHT - 1;
000022  273f              MOVS     r7,#0x3f
                  |L7.36|
;;;344    	}
;;;345    	
;;;346    	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
000024  42b4              CMP      r4,r6
000026  da01              BGE      |L7.44|
000028  1b30              SUBS     r0,r6,r4
00002a  e000              B        |L7.46|
                  |L7.44|
00002c  1ba0              SUBS     r0,r4,r6
                  |L7.46|
00002e  fa0ffb80          SXTH     r11,r0
;;;347    	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
000032  42bd              CMP      r5,r7
000034  da01              BGE      |L7.58|
000036  1b78              SUBS     r0,r7,r5
000038  e000              B        |L7.60|
                  |L7.58|
00003a  1be8              SUBS     r0,r5,r7
                  |L7.60|
00003c  fa0ff980          SXTH     r9,r0
;;;348    	sx = (x0 < x1) ? 1 : -1; 
000040  42b4              CMP      r4,r6
000042  da01              BGE      |L7.72|
000044  2001              MOVS     r0,#1
000046  e001              B        |L7.76|
                  |L7.72|
000048  f04f30ff          MOV      r0,#0xffffffff
                  |L7.76|
00004c  9003              STR      r0,[sp,#0xc]
;;;349    	sy = (y0 < y1) ? 1 : -1; 
00004e  42bd              CMP      r5,r7
000050  da01              BGE      |L7.86|
000052  2001              MOVS     r0,#1
000054  e001              B        |L7.90|
                  |L7.86|
000056  f04f30ff          MOV      r0,#0xffffffff
                  |L7.90|
00005a  9002              STR      r0,[sp,#8]
;;;350    	err = ((dx > dy) ? dx : -dy) / 2; 
00005c  45cb              CMP      r11,r9
00005e  dd01              BLE      |L7.100|
000060  4659              MOV      r1,r11
000062  e001              B        |L7.104|
                  |L7.100|
000064  f1c90100          RSB      r1,r9,#0
                  |L7.104|
000068  4608              MOV      r0,r1
00006a  eb0171d0          ADD      r1,r1,r0,LSR #31
00006e  1049              ASRS     r1,r1,#1
000070  b209              SXTH     r1,r1
000072  9101              STR      r1,[sp,#4]
;;;351    
;;;352    	if (dx == 0) {
000074  f1bb0f00          CMP      r11,#0
000078  d11e              BNE      |L7.184|
;;;353    		if (y1 < y0) {
00007a  42af              CMP      r7,r5
00007c  da04              BGE      |L7.136|
;;;354    			tmp = y1;
00007e  fa0ffa87          SXTH     r10,r7
;;;355    			y1 = y0;
000082  462f              MOV      r7,r5
;;;356    			y0 = tmp;
000084  fa1ff58a          UXTH     r5,r10
                  |L7.136|
;;;357    		}
;;;358    		
;;;359    		if (x1 < x0) {
000088  42a6              CMP      r6,r4
00008a  da04              BGE      |L7.150|
;;;360    			tmp = x1;
00008c  fa0ffa86          SXTH     r10,r6
;;;361    			x1 = x0;
000090  4626              MOV      r6,r4
;;;362    			x0 = tmp;
000092  fa1ff48a          UXTH     r4,r10
                  |L7.150|
;;;363    		}
;;;364    		
;;;365    		/* Vertical line */
;;;366    		for (i = y0; i <= y1; i++) {
000096  fa0ff885          SXTH     r8,r5
00009a  e009              B        |L7.176|
                  |L7.156|
;;;367    			SSD1306_DrawPixel(x0, i, c);
00009c  fa1ff188          UXTH     r1,r8
0000a0  4620              MOV      r0,r4
0000a2  9a0d              LDR      r2,[sp,#0x34]
0000a4  f7fffffe          BL       SSD1306_DrawPixel
0000a8  f1080001          ADD      r0,r8,#1              ;366
0000ac  fa0ff880          SXTH     r8,r0                 ;366
                  |L7.176|
0000b0  45b8              CMP      r8,r7                 ;366
0000b2  ddf3              BLE      |L7.156|
                  |L7.180|
;;;368    		}
;;;369    		
;;;370    		/* Return from function */
;;;371    		return;
;;;372    	}
;;;373    	
;;;374    	if (dy == 0) {
;;;375    		if (y1 < y0) {
;;;376    			tmp = y1;
;;;377    			y1 = y0;
;;;378    			y0 = tmp;
;;;379    		}
;;;380    		
;;;381    		if (x1 < x0) {
;;;382    			tmp = x1;
;;;383    			x1 = x0;
;;;384    			x0 = tmp;
;;;385    		}
;;;386    		
;;;387    		/* Horizontal line */
;;;388    		for (i = x0; i <= x1; i++) {
;;;389    			SSD1306_DrawPixel(i, y0, c);
;;;390    		}
;;;391    		
;;;392    		/* Return from function */
;;;393    		return;
;;;394    	}
;;;395    	
;;;396    	while (1) {
;;;397    		SSD1306_DrawPixel(x0, y0, c);
;;;398    		if (x0 == x1 && y0 == y1) {
;;;399    			break;
;;;400    		}
;;;401    		e2 = err; 
;;;402    		if (e2 > -dx) {
;;;403    			err -= dy;
;;;404    			x0 += sx;
;;;405    		} 
;;;406    		if (e2 < dy) {
;;;407    			err += dx;
;;;408    			y0 += sy;
;;;409    		} 
;;;410    	}
;;;411    }
0000b4  e8bd8fff          POP      {r0-r11,pc}
                  |L7.184|
0000b8  f1b90f00          CMP      r9,#0                 ;374
0000bc  d11d              BNE      |L7.250|
0000be  42af              CMP      r7,r5                 ;375
0000c0  da04              BGE      |L7.204|
0000c2  fa0ffa87          SXTH     r10,r7                ;376
0000c6  462f              MOV      r7,r5                 ;377
0000c8  fa1ff58a          UXTH     r5,r10                ;378
                  |L7.204|
0000cc  42a6              CMP      r6,r4                 ;381
0000ce  da04              BGE      |L7.218|
0000d0  fa0ffa86          SXTH     r10,r6                ;382
0000d4  4626              MOV      r6,r4                 ;383
0000d6  fa1ff48a          UXTH     r4,r10                ;384
                  |L7.218|
0000da  fa0ff884          SXTH     r8,r4                 ;388
0000de  e009              B        |L7.244|
                  |L7.224|
0000e0  fa1ff088          UXTH     r0,r8                 ;389
0000e4  4629              MOV      r1,r5                 ;389
0000e6  9a0d              LDR      r2,[sp,#0x34]         ;389
0000e8  f7fffffe          BL       SSD1306_DrawPixel
0000ec  f1080001          ADD      r0,r8,#1              ;388
0000f0  fa0ff880          SXTH     r8,r0                 ;388
                  |L7.244|
0000f4  45b0              CMP      r8,r6                 ;388
0000f6  ddf3              BLE      |L7.224|
0000f8  e7dc              B        |L7.180|
                  |L7.250|
0000fa  e022              B        |L7.322|
                  |L7.252|
0000fc  4629              MOV      r1,r5                 ;397
0000fe  4620              MOV      r0,r4                 ;397
000100  9a0d              LDR      r2,[sp,#0x34]         ;397
000102  f7fffffe          BL       SSD1306_DrawPixel
000106  42b4              CMP      r4,r6                 ;398
000108  d102              BNE      |L7.272|
00010a  42bd              CMP      r5,r7                 ;398
00010c  d100              BNE      |L7.272|
00010e  e019              B        |L7.324|
                  |L7.272|
000110  9801              LDR      r0,[sp,#4]            ;401
000112  9000              STR      r0,[sp,#0]            ;401
000114  f1cb0100          RSB      r1,r11,#0             ;402
000118  9800              LDR      r0,[sp,#0]            ;402
00011a  4288              CMP      r0,r1                 ;402
00011c  dd07              BLE      |L7.302|
00011e  9801              LDR      r0,[sp,#4]            ;403
000120  eba00009          SUB      r0,r0,r9              ;403
000124  b200              SXTH     r0,r0                 ;403
000126  9001              STR      r0,[sp,#4]            ;403
000128  9803              LDR      r0,[sp,#0xc]          ;404
00012a  4420              ADD      r0,r0,r4              ;404
00012c  b284              UXTH     r4,r0                 ;404
                  |L7.302|
00012e  9800              LDR      r0,[sp,#0]            ;406
000130  4548              CMP      r0,r9                 ;406
000132  da06              BGE      |L7.322|
000134  9801              LDR      r0,[sp,#4]            ;407
000136  4458              ADD      r0,r0,r11             ;407
000138  b200              SXTH     r0,r0                 ;407
00013a  9001              STR      r0,[sp,#4]            ;407
00013c  9802              LDR      r0,[sp,#8]            ;408
00013e  4428              ADD      r0,r0,r5              ;408
000140  b285              UXTH     r5,r0                 ;408
                  |L7.322|
000142  e7db              B        |L7.252|
                  |L7.324|
000144  bf00              NOP                            ;399
000146  bf00              NOP      
000148  e7b4              B        |L7.180|
;;;412    
                          ENDP


                          AREA ||i.SSD1306_DrawPixel||, CODE, READONLY, ALIGN=2

                  SSD1306_DrawPixel PROC
;;;251    
;;;252    void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;253    	if (
000006  2b80              CMP      r3,#0x80
000008  da01              BGE      |L8.14|
;;;254    		x >= SSD1306_WIDTH ||
;;;255    		y >= SSD1306_HEIGHT
00000a  2940              CMP      r1,#0x40
00000c  db00              BLT      |L8.16|
                  |L8.14|
;;;256    	) {
;;;257    		/* Error */
;;;258    		return;
;;;259    	}
;;;260    	
;;;261    	/* Check if pixels are inverted */
;;;262    	if (SSD1306.Inverted) {
;;;263    		color = (SSD1306_COLOR_t)!color;
;;;264    	}
;;;265    	
;;;266    	/* Set color */
;;;267    	if (color == SSD1306_COLOR_WHITE) {
;;;268    		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
;;;269    	} else {
;;;270    		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
;;;271    	}
;;;272    }
00000e  bdf0              POP      {r4-r7,pc}
                  |L8.16|
000010  4821              LDR      r0,|L8.152|
000012  7900              LDRB     r0,[r0,#4]            ;262  ; SSD1306
000014  b120              CBZ      r0,|L8.32|
000016  b90c              CBNZ     r4,|L8.28|
000018  2001              MOVS     r0,#1                 ;263
00001a  e000              B        |L8.30|
                  |L8.28|
00001c  2000              MOVS     r0,#0                 ;263
                  |L8.30|
00001e  4604              MOV      r4,r0                 ;263
                  |L8.32|
000020  2c01              CMP      r4,#1                 ;267
000022  d11c              BNE      |L8.94|
000024  17cd              ASRS     r5,r1,#31             ;268
000026  eb017555          ADD      r5,r1,r5,LSR #29      ;268
00002a  10ed              ASRS     r5,r5,#3              ;268
00002c  eb0315c5          ADD      r5,r3,r5,LSL #7       ;268
000030  4e1a              LDR      r6,|L8.156|
000032  5d75              LDRB     r5,[r6,r5]            ;268
000034  460a              MOV      r2,r1                 ;268
000036  17ce              ASRS     r6,r1,#31             ;268
000038  eb017656          ADD      r6,r1,r6,LSR #29      ;268
00003c  10f6              ASRS     r6,r6,#3              ;268
00003e  eba107c6          SUB      r7,r1,r6,LSL #3       ;268
000042  2601              MOVS     r6,#1                 ;268
000044  40be              LSLS     r6,r6,r7              ;268
000046  4335              ORRS     r5,r5,r6              ;268
000048  b2ee              UXTB     r6,r5                 ;268
00004a  4608              MOV      r0,r1                 ;268
00004c  17cd              ASRS     r5,r1,#31             ;268
00004e  eb017555          ADD      r5,r1,r5,LSR #29      ;268
000052  10ed              ASRS     r5,r5,#3              ;268
000054  eb0315c5          ADD      r5,r3,r5,LSL #7       ;268
000058  4f10              LDR      r7,|L8.156|
00005a  557e              STRB     r6,[r7,r5]            ;268
00005c  e01a              B        |L8.148|
                  |L8.94|
00005e  17cd              ASRS     r5,r1,#31             ;270
000060  eb017555          ADD      r5,r1,r5,LSR #29      ;270
000064  10ed              ASRS     r5,r5,#3              ;270
000066  eb0315c5          ADD      r5,r3,r5,LSL #7       ;270
00006a  4e0c              LDR      r6,|L8.156|
00006c  5d75              LDRB     r5,[r6,r5]            ;270
00006e  460a              MOV      r2,r1                 ;270
000070  17ce              ASRS     r6,r1,#31             ;270
000072  eb017656          ADD      r6,r1,r6,LSR #29      ;270
000076  10f6              ASRS     r6,r6,#3              ;270
000078  eba107c6          SUB      r7,r1,r6,LSL #3       ;270
00007c  2601              MOVS     r6,#1                 ;270
00007e  40be              LSLS     r6,r6,r7              ;270
000080  43b5              BICS     r5,r5,r6              ;270
000082  4608              MOV      r0,r1                 ;270
000084  17ce              ASRS     r6,r1,#31             ;270
000086  eb017656          ADD      r6,r1,r6,LSR #29      ;270
00008a  10f6              ASRS     r6,r6,#3              ;270
00008c  eb0316c6          ADD      r6,r3,r6,LSL #7       ;270
000090  4f02              LDR      r7,|L8.156|
000092  55bd              STRB     r5,[r7,r6]            ;270
                  |L8.148|
000094  bf00              NOP      
000096  e7ba              B        |L8.14|
;;;273    
                          ENDP

                  |L8.152|
                          DCD      SSD1306
                  |L8.156|
                          DCD      SSD1306_Buffer

                          AREA ||i.SSD1306_DrawRectangle||, CODE, READONLY, ALIGN=1

                  SSD1306_DrawRectangle PROC
;;;412    
;;;413    void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
000000  e92d41f8          PUSH     {r3-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd801c          LDR      r8,[sp,#0x1c]
;;;414    	/* Check input parameters */
;;;415    	if (
000010  2c80              CMP      r4,#0x80
000012  da01              BGE      |L9.24|
;;;416    		x >= SSD1306_WIDTH ||
;;;417    		y >= SSD1306_HEIGHT
000014  2d40              CMP      r5,#0x40
000016  db01              BLT      |L9.28|
                  |L9.24|
;;;418    	) {
;;;419    		/* Return error */
;;;420    		return;
;;;421    	}
;;;422    	
;;;423    	/* Check width and height */
;;;424    	if ((x + w) >= SSD1306_WIDTH) {
;;;425    		w = SSD1306_WIDTH - x;
;;;426    	}
;;;427    	if ((y + h) >= SSD1306_HEIGHT) {
;;;428    		h = SSD1306_HEIGHT - y;
;;;429    	}
;;;430    	
;;;431    	/* Draw 4 lines */
;;;432    	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
;;;433    	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
;;;434    	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
;;;435    	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
;;;436    }
000018  e8bd81f8          POP      {r3-r8,pc}
                  |L9.28|
00001c  19a0              ADDS     r0,r4,r6              ;424
00001e  2880              CMP      r0,#0x80              ;424
000020  db02              BLT      |L9.40|
000022  f1c40080          RSB      r0,r4,#0x80           ;425
000026  b286              UXTH     r6,r0                 ;425
                  |L9.40|
000028  19e8              ADDS     r0,r5,r7              ;427
00002a  2840              CMP      r0,#0x40              ;427
00002c  db02              BLT      |L9.52|
00002e  f1c50040          RSB      r0,r5,#0x40           ;428
000032  b287              UXTH     r7,r0                 ;428
                  |L9.52|
000034  19a0              ADDS     r0,r4,r6              ;432
000036  b282              UXTH     r2,r0                 ;432
000038  462b              MOV      r3,r5                 ;432
00003a  4629              MOV      r1,r5                 ;432
00003c  4620              MOV      r0,r4                 ;432
00003e  f8cd8000          STR      r8,[sp,#0]            ;432
000042  f7fffffe          BL       SSD1306_DrawLine
000046  19e8              ADDS     r0,r5,r7              ;433
000048  b283              UXTH     r3,r0                 ;433
00004a  19a0              ADDS     r0,r4,r6              ;433
00004c  b282              UXTH     r2,r0                 ;433
00004e  19e8              ADDS     r0,r5,r7              ;433
000050  b281              UXTH     r1,r0                 ;433
000052  4620              MOV      r0,r4                 ;433
000054  f8cd8000          STR      r8,[sp,#0]            ;433
000058  f7fffffe          BL       SSD1306_DrawLine
00005c  19e8              ADDS     r0,r5,r7              ;434
00005e  b283              UXTH     r3,r0                 ;434
000060  4622              MOV      r2,r4                 ;434
000062  4629              MOV      r1,r5                 ;434
000064  4620              MOV      r0,r4                 ;434
000066  f8cd8000          STR      r8,[sp,#0]            ;434
00006a  f7fffffe          BL       SSD1306_DrawLine
00006e  19e9              ADDS     r1,r5,r7              ;435
000070  b28b              UXTH     r3,r1                 ;435
000072  19a1              ADDS     r1,r4,r6              ;435
000074  b28a              UXTH     r2,r1                 ;435
000076  19a1              ADDS     r1,r4,r6              ;435
000078  b288              UXTH     r0,r1                 ;435
00007a  4629              MOV      r1,r5                 ;435
00007c  f8cd8000          STR      r8,[sp,#0]            ;435
000080  f7fffffe          BL       SSD1306_DrawLine
000084  bf00              NOP      
000086  e7c7              B        |L9.24|
;;;437    
                          ENDP


                          AREA ||i.SSD1306_DrawTriangle||, CODE, READONLY, ALIGN=1

                  SSD1306_DrawTriangle PROC
;;;464    
;;;465    void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
000000  e92d47f8          PUSH     {r3-r10,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dd9a09          LDRD     r9,r10,[sp,#0x24]
000010  9c0b              LDR      r4,[sp,#0x2c]
;;;466    	/* Draw lines */
;;;467    	SSD1306_DrawLine(x1, y1, x2, y2, color);
000012  4643              MOV      r3,r8
000014  463a              MOV      r2,r7
000016  4631              MOV      r1,r6
000018  4628              MOV      r0,r5
00001a  9400              STR      r4,[sp,#0]
00001c  f7fffffe          BL       SSD1306_DrawLine
;;;468    	SSD1306_DrawLine(x2, y2, x3, y3, color);
000020  4653              MOV      r3,r10
000022  464a              MOV      r2,r9
000024  4641              MOV      r1,r8
000026  4638              MOV      r0,r7
000028  9400              STR      r4,[sp,#0]
00002a  f7fffffe          BL       SSD1306_DrawLine
;;;469    	SSD1306_DrawLine(x3, y3, x1, y1, color);
00002e  4633              MOV      r3,r6
000030  462a              MOV      r2,r5
000032  4651              MOV      r1,r10
000034  4648              MOV      r0,r9
000036  9400              STR      r4,[sp,#0]
000038  f7fffffe          BL       SSD1306_DrawLine
;;;470    }
00003c  e8bd87f8          POP      {r3-r10,pc}
;;;471    
                          ENDP


                          AREA ||i.SSD1306_Fill||, CODE, READONLY, ALIGN=2

                  SSD1306_Fill PROC
;;;246    
;;;247    void SSD1306_Fill(SSD1306_COLOR_t color) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;248    	/* Set memory */
;;;249    	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
000004  b90c              CBNZ     r4,|L11.10|
000006  2000              MOVS     r0,#0
000008  e000              B        |L11.12|
                  |L11.10|
00000a  20ff              MOVS     r0,#0xff
                  |L11.12|
00000c  4602              MOV      r2,r0
00000e  f44f6180          MOV      r1,#0x400
000012  4802              LDR      r0,|L11.28|
000014  f7fffffe          BL       __aeabi_memset
;;;250    }
000018  bd10              POP      {r4,pc}
;;;251    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      SSD1306_Buffer

                          AREA ||i.SSD1306_GotoXY||, CODE, READONLY, ALIGN=2

                  SSD1306_GotoXY PROC
;;;273    
;;;274    void SSD1306_GotoXY(uint16_t x, uint16_t y) {
000000  4a01              LDR      r2,|L12.8|
;;;275    	/* Set write pointers */
;;;276    	SSD1306.CurrentX = x;
000002  8010              STRH     r0,[r2,#0]
;;;277    	SSD1306.CurrentY = y;
000004  8051              STRH     r1,[r2,#2]
;;;278    }
000006  4770              BX       lr
;;;279    
                          ENDP

                  |L12.8|
                          DCD      SSD1306

                          AREA ||i.SSD1306_Init||, CODE, READONLY, ALIGN=2

                  SSD1306_Init PROC
;;;155    }
;;;156    uint8_t SSD1306_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;157    
;;;158    	/* Init I2C */
;;;159    	ssd1306_I2C_Init();
000002  f7fffffe          BL       ssd1306_I2C_Init
;;;160    	
;;;161    	/* Check if LCD connected to I2C */
;;;162    //	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
;;;163    //		/* Return false */
;;;164    //		return 0;
;;;165    //	}
;;;166    	I2C_Check_Connected(I2C1, SSD1306_I2C_ADDR, "SSD1306");
000006  a254              ADR      r2,|L13.344|
000008  2178              MOVS     r1,#0x78
00000a  4855              LDR      r0,|L13.352|
00000c  f7fffffe          BL       I2C_Check_Connected
;;;167    	/* A little delay */
;;;168    	uint32_t p = 2500;
000010  f64014c4          MOV      r4,#0x9c4
;;;169    	while(p>0)
000014  e000              B        |L13.24|
                  |L13.22|
;;;170    		p--;
000016  1e64              SUBS     r4,r4,#1
                  |L13.24|
000018  2c00              CMP      r4,#0                 ;169
00001a  d1fc              BNE      |L13.22|
;;;171    	
;;;172    	/* Init LCD */
;;;173    	SSD1306_WRITECOMMAND(0xAE); //display off
00001c  22ae              MOVS     r2,#0xae
00001e  2100              MOVS     r1,#0
000020  2078              MOVS     r0,#0x78
000022  f7fffffe          BL       ssd1306_I2C_Write
;;;174    	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
000026  2220              MOVS     r2,#0x20
000028  2100              MOVS     r1,#0
00002a  2078              MOVS     r0,#0x78
00002c  f7fffffe          BL       ssd1306_I2C_Write
;;;175    	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
000030  2210              MOVS     r2,#0x10
000032  2100              MOVS     r1,#0
000034  2078              MOVS     r0,#0x78
000036  f7fffffe          BL       ssd1306_I2C_Write
;;;176    	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
00003a  22b0              MOVS     r2,#0xb0
00003c  2100              MOVS     r1,#0
00003e  2078              MOVS     r0,#0x78
000040  f7fffffe          BL       ssd1306_I2C_Write
;;;177    	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
000044  22c8              MOVS     r2,#0xc8
000046  2100              MOVS     r1,#0
000048  2078              MOVS     r0,#0x78
00004a  f7fffffe          BL       ssd1306_I2C_Write
;;;178    	SSD1306_WRITECOMMAND(0x00); //---set low column address
00004e  2200              MOVS     r2,#0
000050  4611              MOV      r1,r2
000052  2078              MOVS     r0,#0x78
000054  f7fffffe          BL       ssd1306_I2C_Write
;;;179    	SSD1306_WRITECOMMAND(0x10); //---set high column address
000058  2210              MOVS     r2,#0x10
00005a  2100              MOVS     r1,#0
00005c  2078              MOVS     r0,#0x78
00005e  f7fffffe          BL       ssd1306_I2C_Write
;;;180    	SSD1306_WRITECOMMAND(0x40); //--set start line address
000062  2240              MOVS     r2,#0x40
000064  2100              MOVS     r1,#0
000066  2078              MOVS     r0,#0x78
000068  f7fffffe          BL       ssd1306_I2C_Write
;;;181    	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
00006c  2281              MOVS     r2,#0x81
00006e  2100              MOVS     r1,#0
000070  2078              MOVS     r0,#0x78
000072  f7fffffe          BL       ssd1306_I2C_Write
;;;182    	SSD1306_WRITECOMMAND(0xFF);
000076  22ff              MOVS     r2,#0xff
000078  2100              MOVS     r1,#0
00007a  2078              MOVS     r0,#0x78
00007c  f7fffffe          BL       ssd1306_I2C_Write
;;;183    	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
000080  22a1              MOVS     r2,#0xa1
000082  2100              MOVS     r1,#0
000084  2078              MOVS     r0,#0x78
000086  f7fffffe          BL       ssd1306_I2C_Write
;;;184    	SSD1306_WRITECOMMAND(0xA6); //--set normal display
00008a  22a6              MOVS     r2,#0xa6
00008c  2100              MOVS     r1,#0
00008e  2078              MOVS     r0,#0x78
000090  f7fffffe          BL       ssd1306_I2C_Write
;;;185    	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
000094  22a8              MOVS     r2,#0xa8
000096  2100              MOVS     r1,#0
000098  2078              MOVS     r0,#0x78
00009a  f7fffffe          BL       ssd1306_I2C_Write
;;;186    	SSD1306_WRITECOMMAND(0x3F); //
00009e  223f              MOVS     r2,#0x3f
0000a0  2100              MOVS     r1,#0
0000a2  2078              MOVS     r0,#0x78
0000a4  f7fffffe          BL       ssd1306_I2C_Write
;;;187    	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
0000a8  22a4              MOVS     r2,#0xa4
0000aa  2100              MOVS     r1,#0
0000ac  2078              MOVS     r0,#0x78
0000ae  f7fffffe          BL       ssd1306_I2C_Write
;;;188    	SSD1306_WRITECOMMAND(0xD3); //-set display offset
0000b2  22d3              MOVS     r2,#0xd3
0000b4  2100              MOVS     r1,#0
0000b6  2078              MOVS     r0,#0x78
0000b8  f7fffffe          BL       ssd1306_I2C_Write
;;;189    	SSD1306_WRITECOMMAND(0x00); //-not offset
0000bc  2200              MOVS     r2,#0
0000be  4611              MOV      r1,r2
0000c0  2078              MOVS     r0,#0x78
0000c2  f7fffffe          BL       ssd1306_I2C_Write
;;;190    	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
0000c6  22d5              MOVS     r2,#0xd5
0000c8  2100              MOVS     r1,#0
0000ca  2078              MOVS     r0,#0x78
0000cc  f7fffffe          BL       ssd1306_I2C_Write
;;;191    	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
0000d0  22f0              MOVS     r2,#0xf0
0000d2  2100              MOVS     r1,#0
0000d4  2078              MOVS     r0,#0x78
0000d6  f7fffffe          BL       ssd1306_I2C_Write
;;;192    	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
0000da  22d9              MOVS     r2,#0xd9
0000dc  2100              MOVS     r1,#0
0000de  2078              MOVS     r0,#0x78
0000e0  f7fffffe          BL       ssd1306_I2C_Write
;;;193    	SSD1306_WRITECOMMAND(0x22); //
0000e4  2222              MOVS     r2,#0x22
0000e6  2100              MOVS     r1,#0
0000e8  2078              MOVS     r0,#0x78
0000ea  f7fffffe          BL       ssd1306_I2C_Write
;;;194    	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
0000ee  22da              MOVS     r2,#0xda
0000f0  2100              MOVS     r1,#0
0000f2  2078              MOVS     r0,#0x78
0000f4  f7fffffe          BL       ssd1306_I2C_Write
;;;195    	SSD1306_WRITECOMMAND(0x12);
0000f8  2212              MOVS     r2,#0x12
0000fa  2100              MOVS     r1,#0
0000fc  2078              MOVS     r0,#0x78
0000fe  f7fffffe          BL       ssd1306_I2C_Write
;;;196    	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
000102  22db              MOVS     r2,#0xdb
000104  2100              MOVS     r1,#0
000106  2078              MOVS     r0,#0x78
000108  f7fffffe          BL       ssd1306_I2C_Write
;;;197    	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
00010c  2220              MOVS     r2,#0x20
00010e  2100              MOVS     r1,#0
000110  2078              MOVS     r0,#0x78
000112  f7fffffe          BL       ssd1306_I2C_Write
;;;198    	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
000116  228d              MOVS     r2,#0x8d
000118  2100              MOVS     r1,#0
00011a  2078              MOVS     r0,#0x78
00011c  f7fffffe          BL       ssd1306_I2C_Write
;;;199    	SSD1306_WRITECOMMAND(0x14); //
000120  2214              MOVS     r2,#0x14
000122  2100              MOVS     r1,#0
000124  2078              MOVS     r0,#0x78
000126  f7fffffe          BL       ssd1306_I2C_Write
;;;200    	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
00012a  22af              MOVS     r2,#0xaf
00012c  2100              MOVS     r1,#0
00012e  2078              MOVS     r0,#0x78
000130  f7fffffe          BL       ssd1306_I2C_Write
;;;201    	
;;;202    
;;;203    	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
000134  222e              MOVS     r2,#0x2e
000136  2100              MOVS     r1,#0
000138  2078              MOVS     r0,#0x78
00013a  f7fffffe          BL       ssd1306_I2C_Write
;;;204    
;;;205    	/* Clear screen */
;;;206    	SSD1306_Fill(SSD1306_COLOR_BLACK);
00013e  2000              MOVS     r0,#0
000140  f7fffffe          BL       SSD1306_Fill
;;;207    	
;;;208    	/* Update screen */
;;;209    	SSD1306_UpdateScreen();
000144  f7fffffe          BL       SSD1306_UpdateScreen
;;;210    	
;;;211    	/* Set default values */
;;;212    	SSD1306.CurrentX = 0;
000148  2000              MOVS     r0,#0
00014a  4906              LDR      r1,|L13.356|
00014c  8008              STRH     r0,[r1,#0]
;;;213    	SSD1306.CurrentY = 0;
00014e  8048              STRH     r0,[r1,#2]
;;;214    	
;;;215    	/* Initialized OK */
;;;216    	SSD1306.Initialized = 1;
000150  2001              MOVS     r0,#1
000152  7148              STRB     r0,[r1,#5]
;;;217    	
;;;218    	/* Return OK */
;;;219    	return 1;
;;;220    }
000154  bd10              POP      {r4,pc}
;;;221    
                          ENDP

000156  0000              DCW      0x0000
                  |L13.344|
000158  53534431          DCB      "SSD1306",0
00015c  33303600
                  |L13.352|
                          DCD      0x40005400
                  |L13.356|
                          DCD      SSD1306

                          AREA ||i.SSD1306_InvertDisplay||, CODE, READONLY, ALIGN=1

                  SSD1306_InvertDisplay PROC
;;;124    
;;;125    void SSD1306_InvertDisplay (int i)
000000  b510              PUSH     {r4,lr}
;;;126    {
000002  4604              MOV      r4,r0
;;;127      if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
000004  b12c              CBZ      r4,|L14.18|
000006  22a7              MOVS     r2,#0xa7
000008  2100              MOVS     r1,#0
00000a  2078              MOVS     r0,#0x78
00000c  f7fffffe          BL       ssd1306_I2C_Write
000010  e004              B        |L14.28|
                  |L14.18|
;;;128    
;;;129      else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
000012  22a6              MOVS     r2,#0xa6
000014  2100              MOVS     r1,#0
000016  2078              MOVS     r0,#0x78
000018  f7fffffe          BL       ssd1306_I2C_Write
                  |L14.28|
;;;130    
;;;131    }
00001c  bd10              POP      {r4,pc}
;;;132    
                          ENDP


                          AREA ||i.SSD1306_OFF||, CODE, READONLY, ALIGN=1

                  SSD1306_OFF PROC
;;;606    }
;;;607    void SSD1306_OFF(void) 
000000  b510              PUSH     {r4,lr}
;;;608    {
;;;609    	SSD1306_WRITECOMMAND(0x8D);  
000002  228d              MOVS     r2,#0x8d
000004  2100              MOVS     r1,#0
000006  2078              MOVS     r0,#0x78
000008  f7fffffe          BL       ssd1306_I2C_Write
;;;610    	SSD1306_WRITECOMMAND(0x10);
00000c  2210              MOVS     r2,#0x10
00000e  2100              MOVS     r1,#0
000010  2078              MOVS     r0,#0x78
000012  f7fffffe          BL       ssd1306_I2C_Write
;;;611    	SSD1306_WRITECOMMAND(0xAE);  
000016  22ae              MOVS     r2,#0xae
000018  2100              MOVS     r1,#0
00001a  2078              MOVS     r0,#0x78
00001c  f7fffffe          BL       ssd1306_I2C_Write
;;;612    }
000020  bd10              POP      {r4,pc}
;;;613    
                          ENDP


                          AREA ||i.SSD1306_ON||, CODE, READONLY, ALIGN=1

                  SSD1306_ON PROC
;;;600    }
;;;601    void SSD1306_ON(void) 
000000  b510              PUSH     {r4,lr}
;;;602    {
;;;603    	SSD1306_WRITECOMMAND(0x8D);  
000002  228d              MOVS     r2,#0x8d
000004  2100              MOVS     r1,#0
000006  2078              MOVS     r0,#0x78
000008  f7fffffe          BL       ssd1306_I2C_Write
;;;604    	SSD1306_WRITECOMMAND(0x14);  
00000c  2214              MOVS     r2,#0x14
00000e  2100              MOVS     r1,#0
000010  2078              MOVS     r0,#0x78
000012  f7fffffe          BL       ssd1306_I2C_Write
;;;605    	SSD1306_WRITECOMMAND(0xAF);  
000016  22af              MOVS     r2,#0xaf
000018  2100              MOVS     r1,#0
00001a  2078              MOVS     r0,#0x78
00001c  f7fffffe          BL       ssd1306_I2C_Write
;;;606    }
000020  bd10              POP      {r4,pc}
;;;607    void SSD1306_OFF(void) 
                          ENDP


                          AREA ||i.SSD1306_Putc||, CODE, READONLY, ALIGN=2

                  SSD1306_Putc PROC
;;;279    
;;;280    char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4690              MOV      r8,r2
;;;281    	uint32_t i, b, j;
;;;282    	
;;;283    	/* Check available space in LCD */
;;;284    	if (
00000a  4826              LDR      r0,|L17.164|
00000c  8800              LDRH     r0,[r0,#0]  ; SSD1306
00000e  7821              LDRB     r1,[r4,#0]
000010  4408              ADD      r0,r0,r1
000012  2880              CMP      r0,#0x80
000014  da05              BGE      |L17.34|
;;;285    		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
;;;286    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
000016  4823              LDR      r0,|L17.164|
000018  8840              LDRH     r0,[r0,#2]  ; SSD1306
00001a  7861              LDRB     r1,[r4,#1]
00001c  4408              ADD      r0,r0,r1
00001e  2840              CMP      r0,#0x40
000020  db02              BLT      |L17.40|
                  |L17.34|
;;;287    	) {
;;;288    		/* Error */
;;;289    		return 0;
000022  2000              MOVS     r0,#0
                  |L17.36|
;;;290    	}
;;;291    	
;;;292    	/* Go through font */
;;;293    	for (i = 0; i < Font->FontHeight; i++) {
;;;294    		b = Font->data[(ch - 32) * Font->FontHeight + i];
;;;295    		for (j = 0; j < Font->FontWidth; j++) {
;;;296    			if ((b << j) & 0x8000) {
;;;297    				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
;;;298    			} else {
;;;299    				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
;;;300    			}
;;;301    		}
;;;302    	}
;;;303    	
;;;304    	/* Increase pointer */
;;;305    	SSD1306.CurrentX += Font->FontWidth;
;;;306    	
;;;307    	/* Return character written */
;;;308    	return ch;
;;;309    }
000024  e8bd83f0          POP      {r4-r9,pc}
                  |L17.40|
000028  2500              MOVS     r5,#0                 ;293
00002a  e030              B        |L17.142|
                  |L17.44|
00002c  f1a70020          SUB      r0,r7,#0x20           ;294
000030  7861              LDRB     r1,[r4,#1]            ;294
000032  fb005001          MLA      r0,r0,r1,r5           ;294
000036  6861              LDR      r1,[r4,#4]            ;294
000038  f8319010          LDRH     r9,[r1,r0,LSL #1]     ;294
00003c  2600              MOVS     r6,#0                 ;295
00003e  e022              B        |L17.134|
                  |L17.64|
000040  fa09f006          LSL      r0,r9,r6              ;296
000044  f4004000          AND      r0,r0,#0x8000         ;296
000048  b158              CBZ      r0,|L17.98|
00004a  4a16              LDR      r2,|L17.164|
00004c  8852              LDRH     r2,[r2,#2]            ;297  ; SSD1306
00004e  442a              ADD      r2,r2,r5              ;297
000050  b291              UXTH     r1,r2                 ;297
000052  4a14              LDR      r2,|L17.164|
000054  8812              LDRH     r2,[r2,#0]            ;297  ; SSD1306
000056  4432              ADD      r2,r2,r6              ;297
000058  b290              UXTH     r0,r2                 ;297
00005a  4642              MOV      r2,r8                 ;297
00005c  f7fffffe          BL       SSD1306_DrawPixel
000060  e010              B        |L17.132|
                  |L17.98|
000062  f1b80f00          CMP      r8,#0                 ;299
000066  d101              BNE      |L17.108|
000068  2301              MOVS     r3,#1                 ;299
00006a  e000              B        |L17.110|
                  |L17.108|
00006c  2300              MOVS     r3,#0                 ;299
                  |L17.110|
00006e  461a              MOV      r2,r3                 ;299
000070  4b0c              LDR      r3,|L17.164|
000072  885b              LDRH     r3,[r3,#2]            ;299  ; SSD1306
000074  442b              ADD      r3,r3,r5              ;299
000076  b299              UXTH     r1,r3                 ;299
000078  4b0a              LDR      r3,|L17.164|
00007a  881b              LDRH     r3,[r3,#0]            ;299  ; SSD1306
00007c  4433              ADD      r3,r3,r6              ;299
00007e  b298              UXTH     r0,r3                 ;299
000080  f7fffffe          BL       SSD1306_DrawPixel
                  |L17.132|
000084  1c76              ADDS     r6,r6,#1              ;295
                  |L17.134|
000086  7820              LDRB     r0,[r4,#0]            ;295
000088  42b0              CMP      r0,r6                 ;295
00008a  d8d9              BHI      |L17.64|
00008c  1c6d              ADDS     r5,r5,#1              ;293
                  |L17.142|
00008e  7860              LDRB     r0,[r4,#1]            ;293
000090  42a8              CMP      r0,r5                 ;293
000092  d8cb              BHI      |L17.44|
000094  4803              LDR      r0,|L17.164|
000096  8800              LDRH     r0,[r0,#0]            ;305  ; SSD1306
000098  7821              LDRB     r1,[r4,#0]            ;305
00009a  4408              ADD      r0,r0,r1              ;305
00009c  4901              LDR      r1,|L17.164|
00009e  8008              STRH     r0,[r1,#0]            ;305
0000a0  4638              MOV      r0,r7                 ;308
0000a2  e7bf              B        |L17.36|
;;;310    
                          ENDP

                  |L17.164|
                          DCD      SSD1306

                          AREA ||i.SSD1306_Puts||, CODE, READONLY, ALIGN=1

                  SSD1306_Puts PROC
;;;310    
;;;311    char SSD1306_Puts(const char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;312    	/* Write characters */
;;;313    	while (*str) {
000008  e00a              B        |L18.32|
                  |L18.10|
;;;314    		/* Write character by character */
;;;315    		if (SSD1306_Putc(*str, Font, color) != *str) {
00000a  7820              LDRB     r0,[r4,#0]
00000c  4632              MOV      r2,r6
00000e  4629              MOV      r1,r5
000010  f7fffffe          BL       SSD1306_Putc
000014  7821              LDRB     r1,[r4,#0]
000016  4288              CMP      r0,r1
000018  d001              BEQ      |L18.30|
;;;316    			/* Return error */
;;;317    			return *str;
00001a  7820              LDRB     r0,[r4,#0]
                  |L18.28|
;;;318    		}
;;;319    		
;;;320    		/* Increase string pointer */
;;;321    		str++;
;;;322    	}
;;;323    	
;;;324    	/* Everything OK, zero should be returned */
;;;325    	return *str;
;;;326    }
00001c  bd70              POP      {r4-r6,pc}
                  |L18.30|
00001e  1c64              ADDS     r4,r4,#1              ;321
                  |L18.32|
000020  7820              LDRB     r0,[r4,#0]            ;313
000022  2800              CMP      r0,#0                 ;313
000024  d1f1              BNE      |L18.10|
000026  7820              LDRB     r0,[r4,#0]            ;325
000028  e7f8              B        |L18.28|
;;;327     
                          ENDP


                          AREA ||i.SSD1306_ScrollLeft||, CODE, READONLY, ALIGN=1

                  SSD1306_ScrollLeft PROC
;;;72     
;;;73     void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
000000  b570              PUSH     {r4-r6,lr}
;;;74     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;75       SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
000006  2227              MOVS     r2,#0x27
000008  2100              MOVS     r1,#0
00000a  2078              MOVS     r0,#0x78
00000c  f7fffffe          BL       ssd1306_I2C_Write
;;;76       SSD1306_WRITECOMMAND (0x00);  // send dummy
000010  2200              MOVS     r2,#0
000012  4611              MOV      r1,r2
000014  2078              MOVS     r0,#0x78
000016  f7fffffe          BL       ssd1306_I2C_Write
;;;77       SSD1306_WRITECOMMAND(start_row);  // start page address
00001a  4622              MOV      r2,r4
00001c  2100              MOVS     r1,#0
00001e  2078              MOVS     r0,#0x78
000020  f7fffffe          BL       ssd1306_I2C_Write
;;;78       SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
000024  2200              MOVS     r2,#0
000026  4611              MOV      r1,r2
000028  2078              MOVS     r0,#0x78
00002a  f7fffffe          BL       ssd1306_I2C_Write
;;;79       SSD1306_WRITECOMMAND(end_row);  // end page address
00002e  462a              MOV      r2,r5
000030  2100              MOVS     r1,#0
000032  2078              MOVS     r0,#0x78
000034  f7fffffe          BL       ssd1306_I2C_Write
;;;80       SSD1306_WRITECOMMAND(0X00);
000038  2200              MOVS     r2,#0
00003a  4611              MOV      r1,r2
00003c  2078              MOVS     r0,#0x78
00003e  f7fffffe          BL       ssd1306_I2C_Write
;;;81       SSD1306_WRITECOMMAND(0XFF);
000042  22ff              MOVS     r2,#0xff
000044  2100              MOVS     r1,#0
000046  2078              MOVS     r0,#0x78
000048  f7fffffe          BL       ssd1306_I2C_Write
;;;82       SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
00004c  222f              MOVS     r2,#0x2f
00004e  2100              MOVS     r1,#0
000050  2078              MOVS     r0,#0x78
000052  f7fffffe          BL       ssd1306_I2C_Write
;;;83     }
000056  bd70              POP      {r4-r6,pc}
;;;84     
                          ENDP


                          AREA ||i.SSD1306_ScrollRight||, CODE, READONLY, ALIGN=1

                  SSD1306_ScrollRight PROC
;;;59     
;;;60     void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
000000  b570              PUSH     {r4-r6,lr}
;;;61     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;62       SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
000006  2226              MOVS     r2,#0x26
000008  2100              MOVS     r1,#0
00000a  2078              MOVS     r0,#0x78
00000c  f7fffffe          BL       ssd1306_I2C_Write
;;;63       SSD1306_WRITECOMMAND (0x00);  // send dummy
000010  2200              MOVS     r2,#0
000012  4611              MOV      r1,r2
000014  2078              MOVS     r0,#0x78
000016  f7fffffe          BL       ssd1306_I2C_Write
;;;64       SSD1306_WRITECOMMAND(start_row);  // start page address
00001a  4622              MOV      r2,r4
00001c  2100              MOVS     r1,#0
00001e  2078              MOVS     r0,#0x78
000020  f7fffffe          BL       ssd1306_I2C_Write
;;;65       SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
000024  2200              MOVS     r2,#0
000026  4611              MOV      r1,r2
000028  2078              MOVS     r0,#0x78
00002a  f7fffffe          BL       ssd1306_I2C_Write
;;;66       SSD1306_WRITECOMMAND(end_row);  // end page address
00002e  462a              MOV      r2,r5
000030  2100              MOVS     r1,#0
000032  2078              MOVS     r0,#0x78
000034  f7fffffe          BL       ssd1306_I2C_Write
;;;67       SSD1306_WRITECOMMAND(0X00);
000038  2200              MOVS     r2,#0
00003a  4611              MOV      r1,r2
00003c  2078              MOVS     r0,#0x78
00003e  f7fffffe          BL       ssd1306_I2C_Write
;;;68       SSD1306_WRITECOMMAND(0XFF);
000042  22ff              MOVS     r2,#0xff
000044  2100              MOVS     r1,#0
000046  2078              MOVS     r0,#0x78
000048  f7fffffe          BL       ssd1306_I2C_Write
;;;69       SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
00004c  222f              MOVS     r2,#0x2f
00004e  2100              MOVS     r1,#0
000050  2078              MOVS     r0,#0x78
000052  f7fffffe          BL       ssd1306_I2C_Write
;;;70     }
000056  bd70              POP      {r4-r6,pc}
;;;71     
                          ENDP


                          AREA ||i.SSD1306_Scrolldiagleft||, CODE, READONLY, ALIGN=1

                  SSD1306_Scrolldiagleft PROC
;;;101    
;;;102    void SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row)
000000  b570              PUSH     {r4-r6,lr}
;;;103    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;104      SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
000006  22a3              MOVS     r2,#0xa3
000008  2100              MOVS     r1,#0
00000a  2078              MOVS     r0,#0x78
00000c  f7fffffe          BL       ssd1306_I2C_Write
;;;105      SSD1306_WRITECOMMAND (0x00);   // write dummy
000010  2200              MOVS     r2,#0
000012  4611              MOV      r1,r2
000014  2078              MOVS     r0,#0x78
000016  f7fffffe          BL       ssd1306_I2C_Write
;;;106      SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
00001a  2240              MOVS     r2,#0x40
00001c  2100              MOVS     r1,#0
00001e  2078              MOVS     r0,#0x78
000020  f7fffffe          BL       ssd1306_I2C_Write
;;;107    
;;;108      SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
000024  222a              MOVS     r2,#0x2a
000026  2100              MOVS     r1,#0
000028  2078              MOVS     r0,#0x78
00002a  f7fffffe          BL       ssd1306_I2C_Write
;;;109      SSD1306_WRITECOMMAND (0x00);
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  2078              MOVS     r0,#0x78
000034  f7fffffe          BL       ssd1306_I2C_Write
;;;110      SSD1306_WRITECOMMAND(start_row);
000038  4622              MOV      r2,r4
00003a  2100              MOVS     r1,#0
00003c  2078              MOVS     r0,#0x78
00003e  f7fffffe          BL       ssd1306_I2C_Write
;;;111      SSD1306_WRITECOMMAND(0X00);
000042  2200              MOVS     r2,#0
000044  4611              MOV      r1,r2
000046  2078              MOVS     r0,#0x78
000048  f7fffffe          BL       ssd1306_I2C_Write
;;;112      SSD1306_WRITECOMMAND(end_row);
00004c  462a              MOV      r2,r5
00004e  2100              MOVS     r1,#0
000050  2078              MOVS     r0,#0x78
000052  f7fffffe          BL       ssd1306_I2C_Write
;;;113      SSD1306_WRITECOMMAND (0x01);
000056  2201              MOVS     r2,#1
000058  2100              MOVS     r1,#0
00005a  2078              MOVS     r0,#0x78
00005c  f7fffffe          BL       ssd1306_I2C_Write
;;;114      SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
000060  222f              MOVS     r2,#0x2f
000062  2100              MOVS     r1,#0
000064  2078              MOVS     r0,#0x78
000066  f7fffffe          BL       ssd1306_I2C_Write
;;;115    }
00006a  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.SSD1306_Scrolldiagright||, CODE, READONLY, ALIGN=1

                  SSD1306_Scrolldiagright PROC
;;;85     
;;;86     void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
000000  b570              PUSH     {r4-r6,lr}
;;;87     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;88       SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
000006  22a3              MOVS     r2,#0xa3
000008  2100              MOVS     r1,#0
00000a  2078              MOVS     r0,#0x78
00000c  f7fffffe          BL       ssd1306_I2C_Write
;;;89       SSD1306_WRITECOMMAND (0x00);   // write dummy
000010  2200              MOVS     r2,#0
000012  4611              MOV      r1,r2
000014  2078              MOVS     r0,#0x78
000016  f7fffffe          BL       ssd1306_I2C_Write
;;;90       SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
00001a  2240              MOVS     r2,#0x40
00001c  2100              MOVS     r1,#0
00001e  2078              MOVS     r0,#0x78
000020  f7fffffe          BL       ssd1306_I2C_Write
;;;91     
;;;92       SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
000024  2229              MOVS     r2,#0x29
000026  2100              MOVS     r1,#0
000028  2078              MOVS     r0,#0x78
00002a  f7fffffe          BL       ssd1306_I2C_Write
;;;93       SSD1306_WRITECOMMAND (0x00);
00002e  2200              MOVS     r2,#0
000030  4611              MOV      r1,r2
000032  2078              MOVS     r0,#0x78
000034  f7fffffe          BL       ssd1306_I2C_Write
;;;94       SSD1306_WRITECOMMAND(start_row);
000038  4622              MOV      r2,r4
00003a  2100              MOVS     r1,#0
00003c  2078              MOVS     r0,#0x78
00003e  f7fffffe          BL       ssd1306_I2C_Write
;;;95       SSD1306_WRITECOMMAND(0X00);
000042  2200              MOVS     r2,#0
000044  4611              MOV      r1,r2
000046  2078              MOVS     r0,#0x78
000048  f7fffffe          BL       ssd1306_I2C_Write
;;;96       SSD1306_WRITECOMMAND(end_row);
00004c  462a              MOV      r2,r5
00004e  2100              MOVS     r1,#0
000050  2078              MOVS     r0,#0x78
000052  f7fffffe          BL       ssd1306_I2C_Write
;;;97       SSD1306_WRITECOMMAND (0x01);
000056  2201              MOVS     r2,#1
000058  2100              MOVS     r1,#0
00005a  2078              MOVS     r0,#0x78
00005c  f7fffffe          BL       ssd1306_I2C_Write
;;;98       SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
000060  222f              MOVS     r2,#0x2f
000062  2100              MOVS     r1,#0
000064  2078              MOVS     r0,#0x78
000066  f7fffffe          BL       ssd1306_I2C_Write
;;;99     }
00006a  bd70              POP      {r4-r6,pc}
;;;100    
                          ENDP


                          AREA ||i.SSD1306_Stopscroll||, CODE, READONLY, ALIGN=1

                  SSD1306_Stopscroll PROC
;;;117    
;;;118    void SSD1306_Stopscroll(void)
000000  b510              PUSH     {r4,lr}
;;;119    {
;;;120    	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
000002  222e              MOVS     r2,#0x2e
000004  2100              MOVS     r1,#0
000006  2078              MOVS     r0,#0x78
000008  f7fffffe          BL       ssd1306_I2C_Write
;;;121    }
00000c  bd10              POP      {r4,pc}
;;;122    
                          ENDP


                          AREA ||i.SSD1306_ToggleInvert||, CODE, READONLY, ALIGN=2

                  SSD1306_ToggleInvert PROC
;;;234    
;;;235    void SSD1306_ToggleInvert(void) {
000000  490a              LDR      r1,|L24.44|
;;;236    	uint16_t i;
;;;237    	
;;;238    	/* Toggle invert */
;;;239    	SSD1306.Inverted = !SSD1306.Inverted;
000002  7909              LDRB     r1,[r1,#4]  ; SSD1306
000004  b909              CBNZ     r1,|L24.10|
000006  2101              MOVS     r1,#1
000008  e000              B        |L24.12|
                  |L24.10|
00000a  2100              MOVS     r1,#0
                  |L24.12|
00000c  4a07              LDR      r2,|L24.44|
00000e  7111              STRB     r1,[r2,#4]
;;;240    	
;;;241    	/* Do memory toggle */
;;;242    	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
000010  2000              MOVS     r0,#0
000012  e006              B        |L24.34|
                  |L24.20|
;;;243    		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
000014  4906              LDR      r1,|L24.48|
000016  5c09              LDRB     r1,[r1,r0]
000018  43c9              MVNS     r1,r1
00001a  4a05              LDR      r2,|L24.48|
00001c  5411              STRB     r1,[r2,r0]
00001e  1c41              ADDS     r1,r0,#1              ;242
000020  b288              UXTH     r0,r1                 ;242
                  |L24.34|
000022  f5b06f80          CMP      r0,#0x400             ;242
000026  d3f5              BCC      |L24.20|
;;;244    	}
;;;245    }
000028  4770              BX       lr
;;;246    
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      SSD1306
                  |L24.48|
                          DCD      SSD1306_Buffer

                          AREA ||i.SSD1306_UpdateScreen||, CODE, READONLY, ALIGN=2

                  SSD1306_UpdateScreen PROC
;;;221    
;;;222    void SSD1306_UpdateScreen(void) {
000000  b510              PUSH     {r4,lr}
;;;223    	uint8_t m;
;;;224    	
;;;225    	for (m = 0; m < 8; m++) {
000002  2400              MOVS     r4,#0
000004  e01b              B        |L25.62|
                  |L25.6|
;;;226    		SSD1306_WRITECOMMAND(0xB0 + m);
000006  f10400b0          ADD      r0,r4,#0xb0
00000a  b2c2              UXTB     r2,r0
00000c  2100              MOVS     r1,#0
00000e  2078              MOVS     r0,#0x78
000010  f7fffffe          BL       ssd1306_I2C_Write
;;;227    		SSD1306_WRITECOMMAND(0x00);
000014  2200              MOVS     r2,#0
000016  4611              MOV      r1,r2
000018  2078              MOVS     r0,#0x78
00001a  f7fffffe          BL       ssd1306_I2C_Write
;;;228    		SSD1306_WRITECOMMAND(0x10);
00001e  2210              MOVS     r2,#0x10
000020  2100              MOVS     r1,#0
000022  2078              MOVS     r0,#0x78
000024  f7fffffe          BL       ssd1306_I2C_Write
;;;229    		
;;;230    		/* Write multi data */
;;;231    		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
000028  4806              LDR      r0,|L25.68|
00002a  2180              MOVS     r1,#0x80
00002c  fb010204          MLA      r2,r1,r4,r0
000030  460b              MOV      r3,r1
000032  2140              MOVS     r1,#0x40
000034  2078              MOVS     r0,#0x78
000036  f7fffffe          BL       ssd1306_I2C_WriteMulti
00003a  1c60              ADDS     r0,r4,#1              ;225
00003c  b2c4              UXTB     r4,r0                 ;225
                  |L25.62|
00003e  2c08              CMP      r4,#8                 ;225
000040  dbe1              BLT      |L25.6|
;;;232    	}
;;;233    }
000042  bd10              POP      {r4,pc}
;;;234    
                          ENDP

                  |L25.68|
                          DCD      SSD1306_Buffer

                          AREA ||i.ssd1306_I2C_Init||, CODE, READONLY, ALIGN=2

                  ssd1306_I2C_Init PROC
;;;623    
;;;624    void ssd1306_I2C_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;625    	//MX_I2C1_Init();
;;;626    	uint32_t p = 250000;
000002  4c05              LDR      r4,|L26.24|
;;;627    	while(p>0)
000004  e000              B        |L26.8|
                  |L26.6|
;;;628    		p--;
000006  1e64              SUBS     r4,r4,#1
                  |L26.8|
000008  2c00              CMP      r4,#0                 ;627
00000a  d1fc              BNE      |L26.6|
;;;629    	I2C_Initstruct(SSD1306_I2C, SSD1306_I2C_PIN, I2C_CLOCK_FAST_MODE);
00000c  4a03              LDR      r2,|L26.28|
00000e  2189              MOVS     r1,#0x89
000010  4803              LDR      r0,|L26.32|
000012  f7fffffe          BL       I2C_Initstruct
;;;630    	//HAL_I2C_DeInit(&hi2c1);
;;;631    	//p = 250000;
;;;632    	//while(p>0)
;;;633    	//	p--;
;;;634    	//MX_I2C1_Init();
;;;635    }
000016  bd10              POP      {r4,pc}
;;;636    
                          ENDP

                  |L26.24|
                          DCD      0x0003d090
                  |L26.28|
                          DCD      0x00061a80
                  |L26.32|
                          DCD      0x40005400

                          AREA ||i.ssd1306_I2C_Write||, CODE, READONLY, ALIGN=2

                  ssd1306_I2C_Write PROC
;;;647    
;;;648    void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;649    	uint8_t dt[2];
;;;650    	dt[0] = reg;
000008  f88d4004          STRB     r4,[sp,#4]
;;;651    	dt[1] = data;
00000c  f88d6005          STRB     r6,[sp,#5]
;;;652    //	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
;;;653    	I2C_Write_MutiData(I2C1, address, reg, 2, dt);
000010  a801              ADD      r0,sp,#4
000012  2302              MOVS     r3,#2
000014  4622              MOV      r2,r4
000016  4629              MOV      r1,r5
000018  9000              STR      r0,[sp,#0]
00001a  4802              LDR      r0,|L27.36|
00001c  f7fffffe          BL       I2C_Write_MutiData
;;;654    }
000020  bd7c              POP      {r2-r6,pc}
;;;655    
                          ENDP

000022  0000              DCW      0x0000
                  |L27.36|
                          DCD      0x40005400

                          AREA ||i.ssd1306_I2C_WriteMulti||, CODE, READONLY, ALIGN=2

                  ssd1306_I2C_WriteMulti PROC
;;;636    
;;;637    void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b0c2              SUB      sp,sp,#0x108
000006  4607              MOV      r7,r0
000008  460d              MOV      r5,r1
00000a  4690              MOV      r8,r2
00000c  461e              MOV      r6,r3
;;;638    uint8_t dt[256];
;;;639    dt[0] = reg;
00000e  f88d5008          STRB     r5,[sp,#8]
;;;640    uint8_t i;
;;;641    for(i = 0; i < count; i++)
000012  2400              MOVS     r4,#0
000014  e005              B        |L28.34|
                  |L28.22|
;;;642    dt[i+1] = data[i];
000016  f8181004          LDRB     r1,[r8,r4]
00001a  aa02              ADD      r2,sp,#8
00001c  1c60              ADDS     r0,r4,#1
00001e  5411              STRB     r1,[r2,r0]
000020  b2c4              UXTB     r4,r0                 ;641
                  |L28.34|
000022  42b4              CMP      r4,r6                 ;641
000024  dbf7              BLT      |L28.22|
;;;643    //HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
;;;644    	I2C_Write_MutiData(I2C1, address, reg, count+1 ,dt );
000026  a802              ADD      r0,sp,#8
000028  9000              STR      r0,[sp,#0]
00002a  1c70              ADDS     r0,r6,#1
00002c  b2c3              UXTB     r3,r0
00002e  462a              MOV      r2,r5
000030  4639              MOV      r1,r7
000032  4803              LDR      r0,|L28.64|
000034  f7fffffe          BL       I2C_Write_MutiData
;;;645    }
000038  b042              ADD      sp,sp,#0x108
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;646    
                          ENDP

00003e  0000              DCW      0x0000
                  |L28.64|
                          DCD      0x40005400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Rx_data
                          %        59
                  SSD1306_Buffer
                          %        1024

                          AREA ||.data||, DATA, ALIGN=1

                  Rx_indx
000000  0000              DCB      0x00,0x00
                  SSD1306
000002  0000              DCB      0x00,0x00
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "USER\\f4_ssd1306.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_f4_ssd1306_c_3be69e8b____REV16|
#line 138 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_f4_ssd1306_c_3be69e8b____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_f4_ssd1306_c_3be69e8b____REVSH|
#line 153
|__asm___12_f4_ssd1306_c_3be69e8b____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_f4_ssd1306_c_3be69e8b____RRX|
#line 328
|__asm___12_f4_ssd1306_c_3be69e8b____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
