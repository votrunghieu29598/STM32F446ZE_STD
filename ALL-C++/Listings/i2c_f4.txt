; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\i2c_f4.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\i2c_f4.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I.\USER -I.\SCR -I.\Libraries\CMSIS\Include -I.\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I.\Libraries\STM32F4xx_StdPeriph_Driver\inc -D__UVISION_VERSION=535 -DSTM32F446xx -DUSE_STDPERIPH_DRIVER -DSTM32F446xx -DHSE_VALUE=8000000 --omf_browse=.\objects\i2c_f4.crf USER\i2c_f4.c]
                          THUMB

                          AREA ||i.I2C_Check_Connected||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_s
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                  I2C_Check_Connected PROC
;;;277    //printf("ADD:0x%X ",add);
;;;278    uint8_t I2C_Check_Connected (I2C_TypeDef* I2Cx, uint8_t add,char* name){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;279    	I2C_Start(I2Cx,ENABLE);
000008  2101              MOVS     r1,#1
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       I2C_Start
;;;280    	I2C_Send_ADD(I2Cx,add,Send);
000010  2200              MOVS     r2,#0
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       I2C_Send_ADD
;;;281    	I2C_Stop(I2Cx,ENABLE);
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       I2C_Stop
;;;282    	
;;;283    	if(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_ADDR)){
000022  4906              LDR      r1,|L1.60|
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       I2C_GetFlagStatus
00002a  b920              CBNZ     r0,|L1.54|
;;;284    		printf("ADD:0x%X %s-connected\n", add, name);
00002c  4632              MOV      r2,r6
00002e  4629              MOV      r1,r5
000030  a003              ADR      r0,|L1.64|
000032  f7fffffe          BL       __2printf
                  |L1.54|
;;;285    	}
;;;286    	return 0;
000036  2000              MOVS     r0,#0
;;;287    }
000038  bd70              POP      {r4-r6,pc}
;;;288    
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x10000002
                  |L1.64|
000040  4144443a          DCB      "ADD:0x%X %s-connected\n",0
000044  30782558
000048  2025732d
00004c  636f6e6e
000050  65637465
000054  640a00  
000057  00                DCB      0

                          AREA ||i.I2C_Initstruct||, CODE, READONLY, ALIGN=2

                  I2C_Initstruct PROC
;;;4      
;;;5      void I2C_Initstruct (I2C_TypeDef* I2Cx, uint8_t I2C_Pin, uint32_t I2C_Clock ){
000000  b5f0              PUSH     {r4-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;6      	uint8_t pin = I2C_Pin;
00000a  4634              MOV      r4,r6
;;;7      /* ------------------------- Config GPIO I2C1 ------------------------- */
;;;8      	if(I2Cx == I2C1 && I2C_Pin == pin){
00000c  48c7              LDR      r0,|L2.812|
00000e  4285              CMP      r5,r0
000010  d16c              BNE      |L2.236|
000012  42a6              CMP      r6,r4
000014  d16a              BNE      |L2.236|
;;;9      		if(pin == I2C1_PinB67){			
000016  2c67              CMP      r4,#0x67
000018  d120              BNE      |L2.92|
;;;10     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOB, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  2002              MOVS     r0,#2
00001e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;11     
;;;12     			GPIO_InitTypeDef GPIO_I2C;
;;;13     			GPIO_I2C.GPIO_Mode = GPIO_Mode_AF;
000022  2002              MOVS     r0,#2
000024  f88d0008          STRB     r0,[sp,#8]
;;;14     			GPIO_I2C.GPIO_OType = GPIO_OType_OD;
000028  2001              MOVS     r0,#1
00002a  f88d000a          STRB     r0,[sp,#0xa]
;;;15     			GPIO_I2C.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
00002e  20c0              MOVS     r0,#0xc0
000030  9001              STR      r0,[sp,#4]
;;;16     			GPIO_I2C.GPIO_PuPd = GPIO_PuPd_UP;
000032  2001              MOVS     r0,#1
000034  f88d000b          STRB     r0,[sp,#0xb]
;;;17     			GPIO_I2C.GPIO_Speed = GPIO_Speed_50MHz;
000038  2002              MOVS     r0,#2
00003a  f88d0009          STRB     r0,[sp,#9]
;;;18     			GPIO_Init (GPIOB, &GPIO_I2C);
00003e  a901              ADD      r1,sp,#4
000040  48bb              LDR      r0,|L2.816|
000042  f7fffffe          BL       GPIO_Init
;;;19     			//
;;;20     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
000046  2204              MOVS     r2,#4
000048  2106              MOVS     r1,#6
00004a  48b9              LDR      r0,|L2.816|
00004c  f7fffffe          BL       GPIO_PinAFConfig
;;;21     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource7, GPIO_AF_I2C1);
000050  2204              MOVS     r2,#4
000052  2107              MOVS     r1,#7
000054  48b6              LDR      r0,|L2.816|
000056  f7fffffe          BL       GPIO_PinAFConfig
                  |L2.90|
;;;22     		}
00005a  e12d              B        |L2.696|
                  |L2.92|
;;;23     		else if(pin == I2C1_PinB89){
00005c  2c89              CMP      r4,#0x89
00005e  d121              BNE      |L2.164|
;;;24     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOB, ENABLE);
000060  2101              MOVS     r1,#1
000062  2002              MOVS     r0,#2
000064  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;25     			
;;;26     			GPIO_InitTypeDef GPIO_I2C;
;;;27     			GPIO_I2C.GPIO_Mode = GPIO_Mode_AF;
000068  2002              MOVS     r0,#2
00006a  f88d0008          STRB     r0,[sp,#8]
;;;28     			GPIO_I2C.GPIO_OType = GPIO_OType_OD;
00006e  2001              MOVS     r0,#1
000070  f88d000a          STRB     r0,[sp,#0xa]
;;;29     			GPIO_I2C.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
000074  f44f7040          MOV      r0,#0x300
000078  9001              STR      r0,[sp,#4]
;;;30     			GPIO_I2C.GPIO_PuPd = GPIO_PuPd_UP;
00007a  2001              MOVS     r0,#1
00007c  f88d000b          STRB     r0,[sp,#0xb]
;;;31     			GPIO_I2C.GPIO_Speed = GPIO_Speed_50MHz;
000080  2002              MOVS     r0,#2
000082  f88d0009          STRB     r0,[sp,#9]
;;;32     			GPIO_Init (GPIOB, &GPIO_I2C);
000086  a901              ADD      r1,sp,#4
000088  48a9              LDR      r0,|L2.816|
00008a  f7fffffe          BL       GPIO_Init
;;;33     			//
;;;34     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
00008e  2204              MOVS     r2,#4
000090  2108              MOVS     r1,#8
000092  48a7              LDR      r0,|L2.816|
000094  f7fffffe          BL       GPIO_PinAFConfig
;;;35     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
000098  2204              MOVS     r2,#4
00009a  2109              MOVS     r1,#9
00009c  48a4              LDR      r0,|L2.816|
00009e  f7fffffe          BL       GPIO_PinAFConfig
                  |L2.162|
;;;36     //			//bat clock B
;;;37     //			RCC -> AHB1ENR |= 1 << 1;
;;;38     //			//bat clock I2C1
;;;39     //			RCC -> APB1ENR |= 1 << 21;
;;;40     //			// config GPIO_B
;;;41     //			GPIOB -> MODER |= 2 << 16 | 2 << 18;
;;;42     //			GPIOB -> OTYPER |= 1 << 8 | 1 << 9; 
;;;43     //			GPIOB -> OSPEEDR |= 1 << 16 | 1 << 18;
;;;44     //			GPIOB -> PUPDR |= 1 << 16 | 1 << 18; 
;;;45     //			//lien ket chan GPIO_B vs I2C1
;;;46     //			GPIOB -> AFR[1] |= 4 << 0;
;;;47     //			GPIOB -> AFR[1] |= 4 << 4;
;;;48     		}
0000a2  e109              B        |L2.696|
                  |L2.164|
;;;49     		else if(pin == I2C1_PinB69){
0000a4  2c69              CMP      r4,#0x69
0000a6  d1d8              BNE      |L2.90|
;;;50     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOB, ENABLE);
0000a8  2101              MOVS     r1,#1
0000aa  2002              MOVS     r0,#2
0000ac  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;51     
;;;52     			GPIO_InitTypeDef GPIO_I2C;
;;;53     			GPIO_I2C.GPIO_Mode = GPIO_Mode_AF;
0000b0  2002              MOVS     r0,#2
0000b2  f88d0008          STRB     r0,[sp,#8]
;;;54     			GPIO_I2C.GPIO_OType = GPIO_OType_OD;
0000b6  2001              MOVS     r0,#1
0000b8  f88d000a          STRB     r0,[sp,#0xa]
;;;55     			GPIO_I2C.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
0000bc  f44f7010          MOV      r0,#0x240
0000c0  9001              STR      r0,[sp,#4]
;;;56     			GPIO_I2C.GPIO_PuPd = GPIO_PuPd_UP;
0000c2  2001              MOVS     r0,#1
0000c4  f88d000b          STRB     r0,[sp,#0xb]
;;;57     			GPIO_I2C.GPIO_Speed = GPIO_Speed_50MHz;
0000c8  2002              MOVS     r0,#2
0000ca  f88d0009          STRB     r0,[sp,#9]
;;;58     			GPIO_Init (GPIOB, &GPIO_I2C);
0000ce  a901              ADD      r1,sp,#4
0000d0  4897              LDR      r0,|L2.816|
0000d2  f7fffffe          BL       GPIO_Init
;;;59     			//
;;;60     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
0000d6  2204              MOVS     r2,#4
0000d8  2106              MOVS     r1,#6
0000da  4895              LDR      r0,|L2.816|
0000dc  f7fffffe          BL       GPIO_PinAFConfig
;;;61     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
0000e0  2204              MOVS     r2,#4
0000e2  2109              MOVS     r1,#9
0000e4  4892              LDR      r0,|L2.816|
0000e6  f7fffffe          BL       GPIO_PinAFConfig
;;;62     			}
0000ea  e0e5              B        |L2.696|
                  |L2.236|
;;;63     	}
;;;64     /* ------------------------- Config GPIO I2C2 ------------------------- */
;;;65     	else if(I2Cx == I2C2 && I2C_Pin == pin){
0000ec  4891              LDR      r0,|L2.820|
0000ee  4285              CMP      r5,r0
0000f0  d16b              BNE      |L2.458|
0000f2  42a6              CMP      r6,r4
0000f4  d169              BNE      |L2.458|
;;;66     		if(pin == I2C2_PinB1011){
0000f6  2cb1              CMP      r4,#0xb1
0000f8  d121              BNE      |L2.318|
;;;67     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOB, ENABLE);
0000fa  2101              MOVS     r1,#1
0000fc  2002              MOVS     r0,#2
0000fe  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;68     			GPIO_InitTypeDef GPIO_I2C;
;;;69     			GPIO_I2C.GPIO_Mode = GPIO_Mode_AF;
000102  2002              MOVS     r0,#2
000104  f88d0008          STRB     r0,[sp,#8]
;;;70     			GPIO_I2C.GPIO_OType = GPIO_OType_OD;
000108  2001              MOVS     r0,#1
00010a  f88d000a          STRB     r0,[sp,#0xa]
;;;71     			GPIO_I2C.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
00010e  f44f6040          MOV      r0,#0xc00
000112  9001              STR      r0,[sp,#4]
;;;72     			GPIO_I2C.GPIO_PuPd = GPIO_PuPd_UP;
000114  2001              MOVS     r0,#1
000116  f88d000b          STRB     r0,[sp,#0xb]
;;;73     			GPIO_I2C.GPIO_Speed = GPIO_Speed_50MHz;
00011a  2002              MOVS     r0,#2
00011c  f88d0009          STRB     r0,[sp,#9]
;;;74     			GPIO_Init (GPIOB, &GPIO_I2C);
000120  a901              ADD      r1,sp,#4
000122  4883              LDR      r0,|L2.816|
000124  f7fffffe          BL       GPIO_Init
;;;75     			//
;;;76     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
000128  2204              MOVS     r2,#4
00012a  210a              MOVS     r1,#0xa
00012c  4880              LDR      r0,|L2.816|
00012e  f7fffffe          BL       GPIO_PinAFConfig
;;;77     			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
000132  2204              MOVS     r2,#4
000134  210b              MOVS     r1,#0xb
000136  487e              LDR      r0,|L2.816|
000138  f7fffffe          BL       GPIO_PinAFConfig
;;;78     		}
00013c  e0bc              B        |L2.696|
                  |L2.318|
;;;79     		else if(pin == I2C2_PinF01){
00013e  2cf0              CMP      r4,#0xf0
000140  d120              BNE      |L2.388|
;;;80     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOF, ENABLE);
000142  2101              MOVS     r1,#1
000144  2020              MOVS     r0,#0x20
000146  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;81     			GPIO_InitTypeDef GPIO_I2C;
;;;82     			GPIO_I2C.GPIO_Mode = GPIO_Mode_AF;
00014a  2002              MOVS     r0,#2
00014c  f88d0008          STRB     r0,[sp,#8]
;;;83     			GPIO_I2C.GPIO_OType = GPIO_OType_OD;
000150  2001              MOVS     r0,#1
000152  f88d000a          STRB     r0,[sp,#0xa]
;;;84     			GPIO_I2C.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
000156  2003              MOVS     r0,#3
000158  9001              STR      r0,[sp,#4]
;;;85     			GPIO_I2C.GPIO_PuPd = GPIO_PuPd_UP;
00015a  2001              MOVS     r0,#1
00015c  f88d000b          STRB     r0,[sp,#0xb]
;;;86     			GPIO_I2C.GPIO_Speed = GPIO_Speed_50MHz;
000160  2002              MOVS     r0,#2
000162  f88d0009          STRB     r0,[sp,#9]
;;;87     			GPIO_Init (GPIOF, &GPIO_I2C);
000166  a901              ADD      r1,sp,#4
000168  4873              LDR      r0,|L2.824|
00016a  f7fffffe          BL       GPIO_Init
;;;88     			//
;;;89     			GPIO_PinAFConfig  (GPIOF, GPIO_PinSource0, GPIO_AF_I2C2);
00016e  2204              MOVS     r2,#4
000170  2100              MOVS     r1,#0
000172  4871              LDR      r0,|L2.824|
000174  f7fffffe          BL       GPIO_PinAFConfig
;;;90     			GPIO_PinAFConfig  (GPIOF, GPIO_PinSource1, GPIO_AF_I2C2);
000178  2204              MOVS     r2,#4
00017a  2101              MOVS     r1,#1
00017c  486e              LDR      r0,|L2.824|
00017e  f7fffffe          BL       GPIO_PinAFConfig
;;;91     		}else if(pin == I2C2_PinF45){
000182  e099              B        |L2.696|
                  |L2.388|
000184  2cf4              CMP      r4,#0xf4
000186  d18c              BNE      |L2.162|
;;;92     			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOF, ENABLE);
000188  2101              MOVS     r1,#1
00018a  2020              MOVS     r0,#0x20
00018c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;93     			GPIO_InitTypeDef GPIO_I2C;
;;;94     			GPIO_I2C.GPIO_Mode = GPIO_Mode_AF;
000190  2002              MOVS     r0,#2
000192  f88d0008          STRB     r0,[sp,#8]
;;;95     			GPIO_I2C.GPIO_OType = GPIO_OType_OD;
000196  2001              MOVS     r0,#1
000198  f88d000a          STRB     r0,[sp,#0xa]
;;;96     			GPIO_I2C.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
00019c  2003              MOVS     r0,#3
00019e  9001              STR      r0,[sp,#4]
;;;97     			GPIO_I2C.GPIO_PuPd = GPIO_PuPd_UP;
0001a0  2001              MOVS     r0,#1
0001a2  f88d000b          STRB     r0,[sp,#0xb]
;;;98     			GPIO_I2C.GPIO_Speed = GPIO_Speed_50MHz;
0001a6  2002              MOVS     r0,#2
0001a8  f88d0009          STRB     r0,[sp,#9]
;;;99     			GPIO_Init (GPIOF, &GPIO_I2C);
0001ac  a901              ADD      r1,sp,#4
0001ae  4862              LDR      r0,|L2.824|
0001b0  f7fffffe          BL       GPIO_Init
;;;100    			//
;;;101    			GPIO_PinAFConfig  (GPIOF, GPIO_PinSource0, GPIO_AF_I2C2);
0001b4  2204              MOVS     r2,#4
0001b6  2100              MOVS     r1,#0
0001b8  485f              LDR      r0,|L2.824|
0001ba  f7fffffe          BL       GPIO_PinAFConfig
;;;102    			GPIO_PinAFConfig  (GPIOF, GPIO_PinSource1, GPIO_AF_I2C2);
0001be  2204              MOVS     r2,#4
0001c0  2101              MOVS     r1,#1
0001c2  485d              LDR      r0,|L2.824|
0001c4  f7fffffe          BL       GPIO_PinAFConfig
;;;103    		}
0001c8  e076              B        |L2.696|
                  |L2.458|
;;;104    	}
;;;105    /* ------------------------- Config GPIO I2C3 ------------------------- */
;;;106    	else if(I2Cx == I2C3 && I2C_Pin == pin){
0001ca  485c              LDR      r0,|L2.828|
0001cc  4285              CMP      r5,r0
0001ce  d173              BNE      |L2.696|
0001d0  42a6              CMP      r6,r4
0001d2  d171              BNE      |L2.696|
;;;107    		if(pin == I2C3_PinAB84){
0001d4  2ca4              CMP      r4,#0xa4
0001d6  d136              BNE      |L2.582|
;;;108    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOA, ENABLE);
0001d8  2101              MOVS     r1,#1
0001da  4608              MOV      r0,r1
0001dc  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;109    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOB, ENABLE);
0001e0  2101              MOVS     r1,#1
0001e2  2002              MOVS     r0,#2
0001e4  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;110    			GPIO_InitTypeDef GPIO_I2C;
;;;111    			
;;;112    			GPIO_I2C.GPIO_Mode = GPIO_Mode_AF;
0001e8  2002              MOVS     r0,#2
0001ea  f88d0008          STRB     r0,[sp,#8]
;;;113    			GPIO_I2C.GPIO_OType = GPIO_OType_OD;
0001ee  2001              MOVS     r0,#1
0001f0  f88d000a          STRB     r0,[sp,#0xa]
;;;114    			GPIO_I2C.GPIO_Pin = GPIO_Pin_8 ;
0001f4  0200              LSLS     r0,r0,#8
0001f6  9001              STR      r0,[sp,#4]
;;;115    			GPIO_I2C.GPIO_PuPd = GPIO_PuPd_UP;
0001f8  2001              MOVS     r0,#1
0001fa  f88d000b          STRB     r0,[sp,#0xb]
;;;116    			GPIO_I2C.GPIO_Speed = GPIO_Speed_50MHz;
0001fe  2002              MOVS     r0,#2
000200  f88d0009          STRB     r0,[sp,#9]
;;;117    			GPIO_Init (GPIOA, &GPIO_I2C);
000204  a901              ADD      r1,sp,#4
000206  484e              LDR      r0,|L2.832|
000208  f7fffffe          BL       GPIO_Init
;;;118    			
;;;119    			GPIO_I2C.GPIO_Mode = GPIO_Mode_AF;
00020c  2002              MOVS     r0,#2
00020e  f88d0008          STRB     r0,[sp,#8]
;;;120    			GPIO_I2C.GPIO_OType = GPIO_OType_OD;
000212  2001              MOVS     r0,#1
000214  f88d000a          STRB     r0,[sp,#0xa]
;;;121    			GPIO_I2C.GPIO_Pin = GPIO_Pin_4 ;
000218  2010              MOVS     r0,#0x10
00021a  9001              STR      r0,[sp,#4]
;;;122    			GPIO_I2C.GPIO_PuPd = GPIO_PuPd_UP;
00021c  2001              MOVS     r0,#1
00021e  f88d000b          STRB     r0,[sp,#0xb]
;;;123    			GPIO_I2C.GPIO_Speed = GPIO_Speed_50MHz;
000222  2002              MOVS     r0,#2
000224  f88d0009          STRB     r0,[sp,#9]
;;;124    			GPIO_Init (GPIOB, &GPIO_I2C);
000228  a901              ADD      r1,sp,#4
00022a  4841              LDR      r0,|L2.816|
00022c  f7fffffe          BL       GPIO_Init
;;;125    			
;;;126    			GPIO_PinAFConfig  (GPIOA, GPIO_PinSource8, GPIO_AF_I2C3);
000230  2204              MOVS     r2,#4
000232  2108              MOVS     r1,#8
000234  4842              LDR      r0,|L2.832|
000236  f7fffffe          BL       GPIO_PinAFConfig
;;;127    			GPIO_PinAFConfig  (GPIOB, GPIO_PinSource4, GPIO_AF_I2C3);
00023a  2204              MOVS     r2,#4
00023c  4611              MOV      r1,r2
00023e  483c              LDR      r0,|L2.816|
000240  f7fffffe          BL       GPIO_PinAFConfig
;;;128    		}
000244  e038              B        |L2.696|
                  |L2.582|
;;;129    		else if(pin == I2C3_PinAC89){
000246  2ca9              CMP      r4,#0xa9
000248  d136              BNE      |L2.696|
;;;130    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOA, ENABLE);
00024a  2101              MOVS     r1,#1
00024c  4608              MOV      r0,r1
00024e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;131    			RCC_AHB1PeriphClockCmd  (RCC_AHB1Periph_GPIOC, ENABLE);
000252  2101              MOVS     r1,#1
000254  2004              MOVS     r0,#4
000256  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;132    			GPIO_InitTypeDef GPIO_I2C;
;;;133    			
;;;134    			GPIO_I2C.GPIO_Mode = GPIO_Mode_AF;
00025a  2002              MOVS     r0,#2
00025c  f88d0008          STRB     r0,[sp,#8]
;;;135    			GPIO_I2C.GPIO_OType = GPIO_OType_OD;
000260  2001              MOVS     r0,#1
000262  f88d000a          STRB     r0,[sp,#0xa]
;;;136    			GPIO_I2C.GPIO_Pin = GPIO_Pin_8 ;
000266  0200              LSLS     r0,r0,#8
000268  9001              STR      r0,[sp,#4]
;;;137    			GPIO_I2C.GPIO_PuPd = GPIO_PuPd_UP;
00026a  2001              MOVS     r0,#1
00026c  f88d000b          STRB     r0,[sp,#0xb]
;;;138    			GPIO_I2C.GPIO_Speed = GPIO_Speed_50MHz;
000270  2002              MOVS     r0,#2
000272  f88d0009          STRB     r0,[sp,#9]
;;;139    			GPIO_Init (GPIOA, &GPIO_I2C);
000276  a901              ADD      r1,sp,#4
000278  4831              LDR      r0,|L2.832|
00027a  f7fffffe          BL       GPIO_Init
;;;140    			
;;;141    			GPIO_I2C.GPIO_Mode = GPIO_Mode_AF;
00027e  2002              MOVS     r0,#2
000280  f88d0008          STRB     r0,[sp,#8]
;;;142    			GPIO_I2C.GPIO_OType = GPIO_OType_OD;
000284  2001              MOVS     r0,#1
000286  f88d000a          STRB     r0,[sp,#0xa]
;;;143    			GPIO_I2C.GPIO_Pin = GPIO_Pin_9 ;
00028a  0240              LSLS     r0,r0,#9
00028c  9001              STR      r0,[sp,#4]
;;;144    			GPIO_I2C.GPIO_PuPd = GPIO_PuPd_UP;
00028e  2001              MOVS     r0,#1
000290  f88d000b          STRB     r0,[sp,#0xb]
;;;145    			GPIO_I2C.GPIO_Speed = GPIO_Speed_50MHz;
000294  2002              MOVS     r0,#2
000296  f88d0009          STRB     r0,[sp,#9]
;;;146    			GPIO_Init (GPIOC, &GPIO_I2C);
00029a  a901              ADD      r1,sp,#4
00029c  4829              LDR      r0,|L2.836|
00029e  f7fffffe          BL       GPIO_Init
;;;147    			
;;;148    			GPIO_PinAFConfig  (GPIOA, GPIO_PinSource8, GPIO_AF_I2C3);
0002a2  2204              MOVS     r2,#4
0002a4  2108              MOVS     r1,#8
0002a6  4826              LDR      r0,|L2.832|
0002a8  f7fffffe          BL       GPIO_PinAFConfig
;;;149    			GPIO_PinAFConfig  (GPIOC, GPIO_PinSource9, GPIO_AF_I2C3);
0002ac  2204              MOVS     r2,#4
0002ae  2109              MOVS     r1,#9
0002b0  4824              LDR      r0,|L2.836|
0002b2  f7fffffe          BL       GPIO_PinAFConfig
;;;150    		}
0002b6  bf00              NOP      
                  |L2.696|
;;;151    /* ------------------------- Config I2CX ------------------------- */		
;;;152    	}
;;;153    	if(I2Cx == I2C1){
0002b8  481c              LDR      r0,|L2.812|
0002ba  4285              CMP      r5,r0
0002bc  d104              BNE      |L2.712|
;;;154    		RCC_APB1PeriphClockCmd  (RCC_APB1Periph_I2C1, ENABLE);
0002be  2101              MOVS     r1,#1
0002c0  0548              LSLS     r0,r1,#21
0002c2  f7fffffe          BL       RCC_APB1PeriphClockCmd
0002c6  e00e              B        |L2.742|
                  |L2.712|
;;;155    	}else if(I2Cx == I2C2){
0002c8  481a              LDR      r0,|L2.820|
0002ca  4285              CMP      r5,r0
0002cc  d104              BNE      |L2.728|
;;;156    		RCC_APB1PeriphClockCmd  (RCC_APB1Periph_I2C2, ENABLE);
0002ce  2101              MOVS     r1,#1
0002d0  0588              LSLS     r0,r1,#22
0002d2  f7fffffe          BL       RCC_APB1PeriphClockCmd
0002d6  e006              B        |L2.742|
                  |L2.728|
;;;157    	}else if(I2Cx == I2C3){
0002d8  4818              LDR      r0,|L2.828|
0002da  4285              CMP      r5,r0
0002dc  d103              BNE      |L2.742|
;;;158    		RCC_APB1PeriphClockCmd  (RCC_APB1Periph_I2C3, ENABLE);
0002de  2101              MOVS     r1,#1
0002e0  05c8              LSLS     r0,r1,#23
0002e2  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L2.742|
;;;159    	}
;;;160    	I2C_DeInit(I2Cx);
0002e6  4628              MOV      r0,r5
0002e8  f7fffffe          BL       I2C_DeInit
;;;161    	I2C_InitTypeDef I2CX_Config;
;;;162    	
;;;163    	I2CX_Config.I2C_Ack = I2C_Ack_Enable;
0002ec  f44f6080          MOV      r0,#0x400
0002f0  f8ad0016          STRH     r0,[sp,#0x16]
;;;164    	I2CX_Config.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
0002f4  0100              LSLS     r0,r0,#4
0002f6  f8ad0018          STRH     r0,[sp,#0x18]
;;;165    	I2CX_Config.I2C_ClockSpeed = I2C_Clock;
0002fa  9703              STR      r7,[sp,#0xc]
;;;166    	I2CX_Config.I2C_DutyCycle = I2C_DutyCycle_2;
0002fc  f64b70ff          MOV      r0,#0xbfff
000300  f8ad0012          STRH     r0,[sp,#0x12]
;;;167    	I2CX_Config.I2C_Mode = I2C_Mode_I2C;
000304  2000              MOVS     r0,#0
000306  f8ad0010          STRH     r0,[sp,#0x10]
;;;168    	I2CX_Config.I2C_OwnAddress1 = Master_addr;
00030a  2001              MOVS     r0,#1
00030c  f8ad0014          STRH     r0,[sp,#0x14]
;;;169    	I2C_Init  (I2Cx, &I2CX_Config);
000310  a903              ADD      r1,sp,#0xc
000312  4628              MOV      r0,r5
000314  f7fffffe          BL       I2C_Init
;;;170    	I2C_Cmd  (I2Cx, ENABLE);
000318  2101              MOVS     r1,#1
00031a  4628              MOV      r0,r5
00031c  f7fffffe          BL       I2C_Cmd
;;;171    	I2C_SoftwareResetCmd  (I2Cx, DISABLE);
000320  2100              MOVS     r1,#0
000322  4628              MOV      r0,r5
000324  f7fffffe          BL       I2C_SoftwareResetCmd
;;;172    }
000328  b007              ADD      sp,sp,#0x1c
00032a  bdf0              POP      {r4-r7,pc}
;;;173    void I2C_Scan_ADD (I2C_TypeDef* I2Cx,uint8_t add){
                          ENDP

                  |L2.812|
                          DCD      0x40005400
                  |L2.816|
                          DCD      0x40020400
                  |L2.820|
                          DCD      0x40005800
                  |L2.824|
                          DCD      0x40021400
                  |L2.828|
                          DCD      0x40005c00
                  |L2.832|
                          DCD      0x40020000
                  |L2.836|
                          DCD      0x40020800

                          AREA ||i.I2C_Read||, CODE, READONLY, ALIGN=2

                  I2C_Read PROC
;;;232    }
;;;233    uint8_t I2C_Read (I2C_TypeDef* I2Cx,uint8_t ack){
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;234    	uint8_t data;
;;;235    	if(ack == Read ){
000006  2c01              CMP      r4,#1
000008  d104              BNE      |L3.20|
;;;236    			I2C_AcknowledgeConfig  (I2Cx, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       I2C_AcknowledgeConfig
000012  e004              B        |L3.30|
                  |L3.20|
;;;237    		}
;;;238    	else if (ack == Send){
000014  b91c              CBNZ     r4,|L3.30|
;;;239    			I2C_AcknowledgeConfig  (I2Cx, ENABLE);
000016  2101              MOVS     r1,#1
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       I2C_AcknowledgeConfig
                  |L3.30|
;;;240    		}
;;;241    	while(!I2C_CheckEvent  (I2Cx,I2C_EVENT_MASTER_BYTE_RECEIVED));
00001e  bf00              NOP      
                  |L3.32|
000020  4909              LDR      r1,|L3.72|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       I2C_CheckEvent
000028  2800              CMP      r0,#0
00002a  d0f9              BEQ      |L3.32|
;;;242    	while(!I2C_GetFlagStatus  (I2Cx, I2C_FLAG_RXNE));
00002c  bf00              NOP      
                  |L3.46|
00002e  4907              LDR      r1,|L3.76|
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       I2C_GetFlagStatus
000036  2800              CMP      r0,#0
000038  d0f9              BEQ      |L3.46|
;;;243    	data = I2C_ReceiveData  (I2Cx);
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       I2C_ReceiveData
000040  4606              MOV      r6,r0
;;;244    	return data;
000042  4630              MOV      r0,r6
;;;245    }
000044  bd70              POP      {r4-r6,pc}
;;;246    uint8_t I2C_Read_Data(I2C_TypeDef* I2Cx, uint8_t add, uint8_t reg){
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      0x00030040
                  |L3.76|
                          DCD      0x10000040

                          AREA ||i.I2C_Read_Data||, CODE, READONLY, ALIGN=1

                  I2C_Read_Data PROC
;;;245    }
;;;246    uint8_t I2C_Read_Data(I2C_TypeDef* I2Cx, uint8_t add, uint8_t reg){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;247    	u8 rec;
;;;248    	I2C_Start(I2Cx,ENABLE);
00000a  2101              MOVS     r1,#1
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       I2C_Start
;;;249    	I2C_Send_ADD(I2Cx, add, Send);
000012  2200              MOVS     r2,#0
000014  4631              MOV      r1,r6
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       I2C_Send_ADD
;;;250    	I2C_Write(I2Cx,reg);
00001c  4621              MOV      r1,r4
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       I2C_Write
;;;251    //	I2C_Stop(I2Cx,ENABLE);
;;;252    	
;;;253    	I2C_Start(I2Cx,ENABLE);
000024  2101              MOVS     r1,#1
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       I2C_Start
;;;254    	I2C_Send_ADD(I2Cx, add, Read);
00002c  2201              MOVS     r2,#1
00002e  4631              MOV      r1,r6
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       I2C_Send_ADD
;;;255    	rec = I2C_Read(I2Cx, Read);
000036  2101              MOVS     r1,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       I2C_Read
00003e  4607              MOV      r7,r0
;;;256    	I2C_Stop(I2Cx,ENABLE);
000040  2101              MOVS     r1,#1
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       I2C_Stop
;;;257    	return rec;
000048  4638              MOV      r0,r7
;;;258    }
00004a  e8bd81f0          POP      {r4-r8,pc}
;;;259    uint8_t I2C_Read_MutiData(I2C_TypeDef* I2Cx, uint8_t add, uint8_t reg, uint8_t len, uint8_t *data){
                          ENDP


                          AREA ||i.I2C_Read_MutiData||, CODE, READONLY, ALIGN=1

                  I2C_Read_MutiData PROC
;;;258    }
;;;259    uint8_t I2C_Read_MutiData(I2C_TypeDef* I2Cx, uint8_t add, uint8_t reg, uint8_t len, uint8_t *data){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
00000c  9d06              LDR      r5,[sp,#0x18]
;;;260    	I2C_Start(I2Cx,ENABLE);
00000e  2101              MOVS     r1,#1
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       I2C_Start
;;;261    	I2C_Send_ADD(I2Cx, add, Send);
000016  2200              MOVS     r2,#0
000018  4641              MOV      r1,r8
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       I2C_Send_ADD
;;;262    	I2C_Write(I2Cx,reg);
000020  4631              MOV      r1,r6
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       I2C_Write
;;;263    //	I2C_Stop(I2Cx,ENABLE);
;;;264    	I2C_Start(I2Cx,ENABLE);
000028  2101              MOVS     r1,#1
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       I2C_Start
;;;265    	I2C_Send_ADD(I2Cx, add, Read);
000030  2201              MOVS     r2,#1
000032  4641              MOV      r1,r8
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       I2C_Send_ADD
;;;266    	while(len--){
00003a  e00e              B        |L5.90|
                  |L5.60|
;;;267    		if(!len){
00003c  b934              CBNZ     r4,|L5.76|
;;;268    			*data++ = I2C_Read(I2Cx, Read);// last byte master send Nack
00003e  2101              MOVS     r1,#1
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       I2C_Read
000046  f8050b01          STRB     r0,[r5],#1
00004a  e006              B        |L5.90|
                  |L5.76|
;;;269    		}
;;;270    		else if (len){
00004c  b12c              CBZ      r4,|L5.90|
;;;271    			*data++ = I2C_Read(I2Cx, Send);
00004e  2100              MOVS     r1,#0
000050  4638              MOV      r0,r7
000052  f7fffffe          BL       I2C_Read
000056  f8050b01          STRB     r0,[r5],#1
                  |L5.90|
00005a  1e20              SUBS     r0,r4,#0              ;266
00005c  f1a40101          SUB      r1,r4,#1              ;266
000060  b2cc              UXTB     r4,r1                 ;266
000062  d1eb              BNE      |L5.60|
;;;272    		}
;;;273    	}
;;;274    	I2C_Stop(I2Cx,ENABLE);
000064  2101              MOVS     r1,#1
000066  4638              MOV      r0,r7
000068  f7fffffe          BL       I2C_Stop
;;;275    	return 0;
00006c  2000              MOVS     r0,#0
;;;276    }
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;277    //printf("ADD:0x%X ",add);
                          ENDP


                          AREA ||i.I2C_Scan_ADD||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  I2C_Scan_ADD PROC
;;;172    }
;;;173    void I2C_Scan_ADD (I2C_TypeDef* I2Cx,uint8_t add){
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;174    	for(add = 1; add < 255; add++){
000006  2401              MOVS     r4,#1
000008  e022              B        |L6.80|
                  |L6.10|
;;;175    			I2C_GenerateSTART(I2Cx, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       I2C_GenerateSTART
;;;176    			while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
000012  bf00              NOP      
                  |L6.20|
000014  4910              LDR      r1,|L6.88|
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       I2C_CheckEvent
00001c  2800              CMP      r0,#0
00001e  d0f9              BEQ      |L6.20|
;;;177    			I2C_Send7bitAddress (I2Cx,add, I2C_Direction_Transmitter);
000020  2200              MOVS     r2,#0
000022  4621              MOV      r1,r4
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       I2C_Send7bitAddress
;;;178    			I2C_GenerateSTOP (I2Cx, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       I2C_GenerateSTOP
;;;179    			delay_us(100);
000032  ed9f0b0a          VLDR     d0,|L6.92|
000036  f7fffffe          BL       delay_us
;;;180    				if(I2C_GetFlagStatus  (I2Cx,I2C_FLAG_ADDR))
00003a  490a              LDR      r1,|L6.100|
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       I2C_GetFlagStatus
000042  b118              CBZ      r0,|L6.76|
;;;181    					{
;;;182    						printf("ADD:0x%X \n",add);
000044  4621              MOV      r1,r4
000046  a008              ADR      r0,|L6.104|
000048  f7fffffe          BL       __2printf
                  |L6.76|
00004c  1c60              ADDS     r0,r4,#1              ;174
00004e  b2c4              UXTB     r4,r0                 ;174
                  |L6.80|
000050  2cff              CMP      r4,#0xff              ;174
000052  dbda              BLT      |L6.10|
;;;183    					}
;;;184    	}
;;;185    }
000054  bd70              POP      {r4-r6,pc}
;;;186    void I2C_Start (I2C_TypeDef* I2Cx, FunctionalState  NewState){
                          ENDP

000056  0000              DCW      0x0000
                  |L6.88|
                          DCD      0x00030001
                  |L6.92|
00005c  00000000          DCFD     0x4059000000000000 ; 100
000060  40590000
                  |L6.100|
                          DCD      0x10000002
                  |L6.104|
000068  4144443a          DCB      "ADD:0x%X \n",0
00006c  30782558
000070  200a00  
000073  00                DCB      0

                          AREA ||i.I2C_Send_ADD||, CODE, READONLY, ALIGN=2

                  I2C_Send_ADD PROC
;;;194    }
;;;195    void I2C_Send_ADD (I2C_TypeDef* I2Cx,uint8_t add, uint8_t Direction){
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;196    	if(Direction == Send){
000008  b964              CBNZ     r4,|L7.36|
;;;197    		I2C_Send7bitAddress  (I2Cx, add, I2C_Direction_Transmitter);
00000a  2200              MOVS     r2,#0
00000c  4631              MOV      r1,r6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       I2C_Send7bitAddress
;;;198    		while(!I2C_CheckEvent  (I2Cx,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));//EV6
000014  bf00              NOP      
                  |L7.22|
000016  490b              LDR      r1,|L7.68|
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       I2C_CheckEvent
00001e  2800              CMP      r0,#0
000020  d0f9              BEQ      |L7.22|
000022  e00d              B        |L7.64|
                  |L7.36|
;;;199    	}
;;;200    	else if (Direction == Read){
000024  2c01              CMP      r4,#1
000026  d10b              BNE      |L7.64|
;;;201    		I2C_Send7bitAddress  (I2Cx, add, I2C_Direction_Receiver);
000028  2201              MOVS     r2,#1
00002a  4631              MOV      r1,r6
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       I2C_Send7bitAddress
;;;202    		while(!I2C_CheckEvent  (I2Cx,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));//EV6
000032  bf00              NOP      
                  |L7.52|
000034  4904              LDR      r1,|L7.72|
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       I2C_CheckEvent
00003c  2800              CMP      r0,#0
00003e  d0f9              BEQ      |L7.52|
                  |L7.64|
;;;203    	}
;;;204    }
000040  bd70              POP      {r4-r6,pc}
;;;205    void I2C_Write(I2C_TypeDef* I2Cx,uint8_t data){
                          ENDP

000042  0000              DCW      0x0000
                  |L7.68|
                          DCD      0x00070082
                  |L7.72|
                          DCD      0x00030002

                          AREA ||i.I2C_Start||, CODE, READONLY, ALIGN=2

                  I2C_Start PROC
;;;185    }
;;;186    void I2C_Start (I2C_TypeDef* I2Cx, FunctionalState  NewState){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;187    	I2C_AcknowledgeConfig  (I2Cx, NewState);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       I2C_AcknowledgeConfig
;;;188    	I2C_GenerateSTART(I2Cx, NewState);
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       I2C_GenerateSTART
;;;189    	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));//EV5
000016  bf00              NOP      
                  |L8.24|
000018  4903              LDR      r1,|L8.40|
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       I2C_CheckEvent
000020  2800              CMP      r0,#0
000022  d0f9              BEQ      |L8.24|
;;;190    }
000024  bd70              POP      {r4-r6,pc}
;;;191    void I2C_Stop (I2C_TypeDef* I2Cx, FunctionalState  NewState){
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      0x00030001

                          AREA ||i.I2C_Stop||, CODE, READONLY, ALIGN=2

                  I2C_Stop PROC
;;;190    }
;;;191    void I2C_Stop (I2C_TypeDef* I2Cx, FunctionalState  NewState){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;192    	while(I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));//EV8_2
000006  bf00              NOP      
                  |L9.8|
000008  4905              LDR      r1,|L9.32|
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       I2C_CheckEvent
000010  2800              CMP      r0,#0
000012  d1f9              BNE      |L9.8|
;;;193    	I2C_GenerateSTOP  (I2Cx, NewState);
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       I2C_GenerateSTOP
;;;194    }
00001c  bd70              POP      {r4-r6,pc}
;;;195    void I2C_Send_ADD (I2C_TypeDef* I2Cx,uint8_t add, uint8_t Direction){
                          ENDP

00001e  0000              DCW      0x0000
                  |L9.32|
                          DCD      0x00070084

                          AREA ||i.I2C_Write||, CODE, READONLY, ALIGN=2

                  I2C_Write PROC
;;;204    }
;;;205    void I2C_Write(I2C_TypeDef* I2Cx,uint8_t data){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;206    	I2C_SendData(I2Cx, data);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       I2C_SendData
;;;207    	while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTING));//EV8
00000e  bf00              NOP      
                  |L10.16|
000010  4906              LDR      r1,|L10.44|
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       I2C_CheckEvent
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L10.16|
;;;208    	while(!I2C_GetFlagStatus(I2Cx, I2C_FLAG_TXE));
00001c  bf00              NOP      
                  |L10.30|
00001e  4904              LDR      r1,|L10.48|
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       I2C_GetFlagStatus
000026  2800              CMP      r0,#0
000028  d0f9              BEQ      |L10.30|
;;;209    }
00002a  bd70              POP      {r4-r6,pc}
;;;210    void I2C_Write_Data(I2C_TypeDef* I2Cx, uint8_t add, uint8_t reg, uint8_t data){
                          ENDP

                  |L10.44|
                          DCD      0x00070080
                  |L10.48|
                          DCD      0x10000080

                          AREA ||i.I2C_Write_Data||, CODE, READONLY, ALIGN=1

                  I2C_Write_Data PROC
;;;209    }
;;;210    void I2C_Write_Data(I2C_TypeDef* I2Cx, uint8_t add, uint8_t reg, uint8_t data){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;211    	I2C_Start(I2Cx,ENABLE);
00000c  2101              MOVS     r1,#1
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       I2C_Start
;;;212    	I2C_Send_ADD(I2Cx,add,Send);
000014  2200              MOVS     r2,#0
000016  4639              MOV      r1,r7
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       I2C_Send_ADD
;;;213    	I2C_Write(I2Cx,reg);
00001e  4621              MOV      r1,r4
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       I2C_Write
;;;214    //	I2C_Stop(I2Cx,ENABLE);
;;;215    	
;;;216    	I2C_Start(I2Cx,ENABLE);
000026  2101              MOVS     r1,#1
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       I2C_Start
;;;217    	I2C_Send_ADD(I2Cx,add,Send);
00002e  2200              MOVS     r2,#0
000030  4639              MOV      r1,r7
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       I2C_Send_ADD
;;;218    	I2C_Write(I2Cx,data);
000038  4629              MOV      r1,r5
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       I2C_Write
;;;219    	I2C_Stop(I2Cx,ENABLE);
000040  2101              MOVS     r1,#1
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       I2C_Stop
;;;220    }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;221    void I2C_Write_MutiData(I2C_TypeDef* I2Cx, uint8_t add, uint8_t reg,uint8_t len, uint8_t* data){
                          ENDP


                          AREA ||i.I2C_Write_MutiData||, CODE, READONLY, ALIGN=1

                  I2C_Write_MutiData PROC
;;;220    }
;;;221    void I2C_Write_MutiData(I2C_TypeDef* I2Cx, uint8_t add, uint8_t reg,uint8_t len, uint8_t* data){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  9e06              LDR      r6,[sp,#0x18]
;;;222    	I2C_Start(I2Cx,ENABLE);
00000e  2101              MOVS     r1,#1
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       I2C_Start
;;;223    	I2C_Send_ADD(I2Cx,add,Send);
000016  2200              MOVS     r2,#0
000018  4641              MOV      r1,r8
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       I2C_Send_ADD
;;;224    	I2C_Write(I2Cx,reg);
000020  4621              MOV      r1,r4
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       I2C_Write
;;;225    //	I2C_Stop(I2Cx,ENABLE);
;;;226    	I2C_Start(I2Cx,ENABLE);
000028  2101              MOVS     r1,#1
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       I2C_Start
;;;227    	I2C_Send_ADD(I2Cx,add,Send);
000030  2200              MOVS     r2,#0
000032  4641              MOV      r1,r8
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       I2C_Send_ADD
;;;228    	while(len--){
00003a  e004              B        |L12.70|
                  |L12.60|
;;;229    		I2C_Write(I2Cx,*data++);
00003c  f8161b01          LDRB     r1,[r6],#1
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       I2C_Write
                  |L12.70|
000046  1e28              SUBS     r0,r5,#0              ;228
000048  f1a50101          SUB      r1,r5,#1              ;228
00004c  b2cd              UXTB     r5,r1                 ;228
00004e  d1f5              BNE      |L12.60|
;;;230    		}
;;;231    	I2C_Stop(I2Cx,ENABLE);
000050  2101              MOVS     r1,#1
000052  4638              MOV      r0,r7
000054  f7fffffe          BL       I2C_Stop
;;;232    }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;233    uint8_t I2C_Read (I2C_TypeDef* I2Cx,uint8_t ack){
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Rx_data
                          %        59

                          AREA ||.data||, DATA, ALIGN=0

                  Rx_indx
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "USER\\i2c_f4.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_i2c_f4_c_df172a89____REV16|
#line 138 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_i2c_f4_c_df172a89____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_i2c_f4_c_df172a89____REVSH|
#line 153
|__asm___8_i2c_f4_c_df172a89____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_i2c_f4_c_df172a89____RRX|
#line 328
|__asm___8_i2c_f4_c_df172a89____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
